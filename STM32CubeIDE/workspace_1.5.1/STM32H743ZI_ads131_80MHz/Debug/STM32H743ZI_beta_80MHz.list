
STM32H743ZI_beta_80MHz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee34  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  0800f0d4  0800f0d4  0001f0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f438  0800f438  0001f438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f440  0800f440  0001f440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f444  0800f444  0001f444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000260  20000000  0800f448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000745c  20000260  0800f6a8  00020260  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  200076bc  0800f6a8  000276bc  2**0
                  ALLOC
  9 .dma_buffer   00000b84  30000000  30000000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ARM.attributes 0000002e  00000000  00000000  00030b84  2**0
                  CONTENTS, READONLY
 11 .debug_info   00056586  00000000  00000000  00030bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00007d7a  00000000  00000000  00087138  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000213b5  00000000  00000000  0008eeb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002860  00000000  00000000  000b0268  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002720  00000000  00000000  000b2ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000414f4  00000000  00000000  000b51e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002840e  00000000  00000000  000f66dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00179b08  00000000  00000000  0011eaea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002985f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007778  00000000  00000000  00298670  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000260 	.word	0x20000260
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f0bc 	.word	0x0800f0bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000264 	.word	0x20000264
 80002dc:	0800f0bc 	.word	0x0800f0bc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <HAL_InitTick+0x44>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b90b      	cbnz	r3, 800068a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8000686:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000688:	4770      	bx	lr
{
 800068a:	b510      	push	{r4, lr}
 800068c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800068e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000692:	fbb0 f3f3 	udiv	r3, r0, r3
 8000696:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <HAL_InitTick+0x48>)
 8000698:	6810      	ldr	r0, [r2, #0]
 800069a:	fbb0 f0f3 	udiv	r0, r0, r3
 800069e:	f000 f8c1 	bl	8000824 <HAL_SYSTICK_Config>
 80006a2:	b968      	cbnz	r0, 80006c0 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a4:	2c0f      	cmp	r4, #15
 80006a6:	d901      	bls.n	80006ac <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80006a8:	2001      	movs	r0, #1
 80006aa:	e00a      	b.n	80006c2 <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ac:	2200      	movs	r2, #0
 80006ae:	4621      	mov	r1, r4
 80006b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006b4:	f000 f876 	bl	80007a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b8:	4b02      	ldr	r3, [pc, #8]	; (80006c4 <HAL_InitTick+0x44>)
 80006ba:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 80006bc:	2000      	movs	r0, #0
 80006be:	e000      	b.n	80006c2 <HAL_InitTick+0x42>
      return HAL_ERROR;
 80006c0:	2001      	movs	r0, #1
}
 80006c2:	bd10      	pop	{r4, pc}
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000190 	.word	0x20000190

080006cc <HAL_Init>:
{
 80006cc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ce:	2003      	movs	r0, #3
 80006d0:	f000 f856 	bl	8000780 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80006d4:	f003 fcc0 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 80006d8:	490f      	ldr	r1, [pc, #60]	; (8000718 <HAL_Init+0x4c>)
 80006da:	698b      	ldr	r3, [r1, #24]
 80006dc:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80006e0:	4a0e      	ldr	r2, [pc, #56]	; (800071c <HAL_Init+0x50>)
 80006e2:	5cd3      	ldrb	r3, [r2, r3]
 80006e4:	f003 031f 	and.w	r3, r3, #31
 80006e8:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006ea:	698b      	ldr	r3, [r1, #24]
 80006ec:	f003 030f 	and.w	r3, r3, #15
 80006f0:	5cd3      	ldrb	r3, [r2, r3]
 80006f2:	f003 031f 	and.w	r3, r3, #31
 80006f6:	fa20 f303 	lsr.w	r3, r0, r3
 80006fa:	4a09      	ldr	r2, [pc, #36]	; (8000720 <HAL_Init+0x54>)
 80006fc:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <HAL_Init+0x58>)
 8000700:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000702:	2000      	movs	r0, #0
 8000704:	f7ff ffbc 	bl	8000680 <HAL_InitTick>
 8000708:	b110      	cbz	r0, 8000710 <HAL_Init+0x44>
    return HAL_ERROR;
 800070a:	2401      	movs	r4, #1
}
 800070c:	4620      	mov	r0, r4
 800070e:	bd10      	pop	{r4, pc}
 8000710:	4604      	mov	r4, r0
  HAL_MspInit();
 8000712:	f00c fa97 	bl	800cc44 <HAL_MspInit>
  return HAL_OK;
 8000716:	e7f9      	b.n	800070c <HAL_Init+0x40>
 8000718:	58024400 	.word	0x58024400
 800071c:	0800f2cc 	.word	0x0800f2cc
 8000720:	20000194 	.word	0x20000194
 8000724:	20000190 	.word	0x20000190

08000728 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <HAL_IncTick+0x10>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <HAL_IncTick+0x14>)
 800072e:	6811      	ldr	r1, [r2, #0]
 8000730:	440b      	add	r3, r1
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000000 	.word	0x20000000
 800073c:	20000344 	.word	0x20000344

08000740 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000740:	4b01      	ldr	r3, [pc, #4]	; (8000748 <HAL_GetTick+0x8>)
 8000742:	6818      	ldr	r0, [r3, #0]
}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000344 	.word	0x20000344

0800074c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800074c:	b538      	push	{r3, r4, r5, lr}
 800074e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000750:	f7ff fff6 	bl	8000740 <HAL_GetTick>
 8000754:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000756:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800075a:	d002      	beq.n	8000762 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <HAL_Delay+0x24>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000762:	f7ff ffed 	bl	8000740 <HAL_GetTick>
 8000766:	1b40      	subs	r0, r0, r5
 8000768:	42a0      	cmp	r0, r4
 800076a:	d3fa      	bcc.n	8000762 <HAL_Delay+0x16>
  {
  }
}
 800076c:	bd38      	pop	{r3, r4, r5, pc}
 800076e:	bf00      	nop
 8000770:	20000000 	.word	0x20000000

08000774 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000774:	4b01      	ldr	r3, [pc, #4]	; (800077c <HAL_GetREVID+0x8>)
 8000776:	6818      	ldr	r0, [r3, #0]
}
 8000778:	0c00      	lsrs	r0, r0, #16
 800077a:	4770      	bx	lr
 800077c:	5c001000 	.word	0x5c001000

08000780 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000780:	4906      	ldr	r1, [pc, #24]	; (800079c <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000782:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000784:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000788:	041b      	lsls	r3, r3, #16
 800078a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800078c:	0200      	lsls	r0, r0, #8
 800078e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000792:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000794:	4a02      	ldr	r2, [pc, #8]	; (80007a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000796:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000798:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800079a:	4770      	bx	lr
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	05fa0000 	.word	0x05fa0000

080007a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <HAL_NVIC_SetPriority+0x58>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ae:	f1c3 0407 	rsb	r4, r3, #7
 80007b2:	2c04      	cmp	r4, #4
 80007b4:	bf28      	it	cs
 80007b6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b8:	1d1d      	adds	r5, r3, #4
 80007ba:	2d06      	cmp	r5, #6
 80007bc:	d914      	bls.n	80007e8 <HAL_NVIC_SetPriority+0x44>
 80007be:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80007c4:	fa05 f404 	lsl.w	r4, r5, r4
 80007c8:	ea21 0104 	bic.w	r1, r1, r4
 80007cc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ce:	fa05 f303 	lsl.w	r3, r5, r3
 80007d2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80007d8:	2800      	cmp	r0, #0
 80007da:	db07      	blt.n	80007ec <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007dc:	0109      	lsls	r1, r1, #4
 80007de:	b2c9      	uxtb	r1, r1
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <HAL_NVIC_SetPriority+0x5c>)
 80007e2:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80007e4:	bc30      	pop	{r4, r5}
 80007e6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e8:	2300      	movs	r3, #0
 80007ea:	e7e9      	b.n	80007c0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ec:	f000 000f 	and.w	r0, r0, #15
 80007f0:	0109      	lsls	r1, r1, #4
 80007f2:	b2c9      	uxtb	r1, r1
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <HAL_NVIC_SetPriority+0x60>)
 80007f6:	5419      	strb	r1, [r3, r0]
 80007f8:	e7f4      	b.n	80007e4 <HAL_NVIC_SetPriority+0x40>
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00
 8000800:	e000e400 	.word	0xe000e400
 8000804:	e000ed14 	.word	0xe000ed14

08000808 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000808:	2800      	cmp	r0, #0
 800080a:	db07      	blt.n	800081c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080c:	f000 021f 	and.w	r2, r0, #31
 8000810:	0940      	lsrs	r0, r0, #5
 8000812:	2301      	movs	r3, #1
 8000814:	4093      	lsls	r3, r2
 8000816:	4a02      	ldr	r2, [pc, #8]	; (8000820 <HAL_NVIC_EnableIRQ+0x18>)
 8000818:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000e100 	.word	0xe000e100

08000824 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000824:	3801      	subs	r0, #1
 8000826:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800082a:	d20a      	bcs.n	8000842 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_SYSTICK_Config+0x24>)
 800082e:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000830:	4a06      	ldr	r2, [pc, #24]	; (800084c <HAL_SYSTICK_Config+0x28>)
 8000832:	21f0      	movs	r1, #240	; 0xf0
 8000834:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000838:	2000      	movs	r0, #0
 800083a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083c:	2207      	movs	r2, #7
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000842:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000850:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000852:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000854:	6804      	ldr	r4, [r0, #0]
 8000856:	4e65      	ldr	r6, [pc, #404]	; (80009ec <DMA_SetConfig+0x19c>)
 8000858:	4d65      	ldr	r5, [pc, #404]	; (80009f0 <DMA_SetConfig+0x1a0>)
 800085a:	42ac      	cmp	r4, r5
 800085c:	bf18      	it	ne
 800085e:	42b4      	cmpne	r4, r6
 8000860:	d042      	beq.n	80008e8 <DMA_SetConfig+0x98>
 8000862:	3518      	adds	r5, #24
 8000864:	42ac      	cmp	r4, r5
 8000866:	d03f      	beq.n	80008e8 <DMA_SetConfig+0x98>
 8000868:	3518      	adds	r5, #24
 800086a:	42ac      	cmp	r4, r5
 800086c:	d03c      	beq.n	80008e8 <DMA_SetConfig+0x98>
 800086e:	3518      	adds	r5, #24
 8000870:	42ac      	cmp	r4, r5
 8000872:	d039      	beq.n	80008e8 <DMA_SetConfig+0x98>
 8000874:	3518      	adds	r5, #24
 8000876:	42ac      	cmp	r4, r5
 8000878:	d036      	beq.n	80008e8 <DMA_SetConfig+0x98>
 800087a:	3518      	adds	r5, #24
 800087c:	42ac      	cmp	r4, r5
 800087e:	d033      	beq.n	80008e8 <DMA_SetConfig+0x98>
 8000880:	3518      	adds	r5, #24
 8000882:	42ac      	cmp	r4, r5
 8000884:	d030      	beq.n	80008e8 <DMA_SetConfig+0x98>
 8000886:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800088a:	42ac      	cmp	r4, r5
 800088c:	d02c      	beq.n	80008e8 <DMA_SetConfig+0x98>
 800088e:	3518      	adds	r5, #24
 8000890:	42ac      	cmp	r4, r5
 8000892:	d029      	beq.n	80008e8 <DMA_SetConfig+0x98>
 8000894:	3518      	adds	r5, #24
 8000896:	42ac      	cmp	r4, r5
 8000898:	d026      	beq.n	80008e8 <DMA_SetConfig+0x98>
 800089a:	3518      	adds	r5, #24
 800089c:	42ac      	cmp	r4, r5
 800089e:	d023      	beq.n	80008e8 <DMA_SetConfig+0x98>
 80008a0:	3518      	adds	r5, #24
 80008a2:	42ac      	cmp	r4, r5
 80008a4:	d020      	beq.n	80008e8 <DMA_SetConfig+0x98>
 80008a6:	3518      	adds	r5, #24
 80008a8:	42ac      	cmp	r4, r5
 80008aa:	d01d      	beq.n	80008e8 <DMA_SetConfig+0x98>
 80008ac:	3518      	adds	r5, #24
 80008ae:	42ac      	cmp	r4, r5
 80008b0:	d01a      	beq.n	80008e8 <DMA_SetConfig+0x98>
 80008b2:	3518      	adds	r5, #24
 80008b4:	42ac      	cmp	r4, r5
 80008b6:	d017      	beq.n	80008e8 <DMA_SetConfig+0x98>
 80008b8:	4d4e      	ldr	r5, [pc, #312]	; (80009f4 <DMA_SetConfig+0x1a4>)
 80008ba:	42ac      	cmp	r4, r5
 80008bc:	d014      	beq.n	80008e8 <DMA_SetConfig+0x98>
 80008be:	3514      	adds	r5, #20
 80008c0:	42ac      	cmp	r4, r5
 80008c2:	d011      	beq.n	80008e8 <DMA_SetConfig+0x98>
 80008c4:	3514      	adds	r5, #20
 80008c6:	42ac      	cmp	r4, r5
 80008c8:	d00e      	beq.n	80008e8 <DMA_SetConfig+0x98>
 80008ca:	3514      	adds	r5, #20
 80008cc:	42ac      	cmp	r4, r5
 80008ce:	d00b      	beq.n	80008e8 <DMA_SetConfig+0x98>
 80008d0:	3514      	adds	r5, #20
 80008d2:	42ac      	cmp	r4, r5
 80008d4:	d008      	beq.n	80008e8 <DMA_SetConfig+0x98>
 80008d6:	3514      	adds	r5, #20
 80008d8:	42ac      	cmp	r4, r5
 80008da:	d005      	beq.n	80008e8 <DMA_SetConfig+0x98>
 80008dc:	3514      	adds	r5, #20
 80008de:	42ac      	cmp	r4, r5
 80008e0:	d002      	beq.n	80008e8 <DMA_SetConfig+0x98>
 80008e2:	3514      	adds	r5, #20
 80008e4:	42ac      	cmp	r4, r5
 80008e6:	d107      	bne.n	80008f8 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008e8:	6e44      	ldr	r4, [r0, #100]	; 0x64
 80008ea:	6e85      	ldr	r5, [r0, #104]	; 0x68
 80008ec:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80008ee:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 80008f0:	b114      	cbz	r4, 80008f8 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80008f2:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80008f4:	6f45      	ldr	r5, [r0, #116]	; 0x74
 80008f6:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80008f8:	6804      	ldr	r4, [r0, #0]
 80008fa:	4e3c      	ldr	r6, [pc, #240]	; (80009ec <DMA_SetConfig+0x19c>)
 80008fc:	4d3c      	ldr	r5, [pc, #240]	; (80009f0 <DMA_SetConfig+0x1a0>)
 80008fe:	42ac      	cmp	r4, r5
 8000900:	bf18      	it	ne
 8000902:	42b4      	cmpne	r4, r6
 8000904:	d052      	beq.n	80009ac <DMA_SetConfig+0x15c>
 8000906:	3518      	adds	r5, #24
 8000908:	42ac      	cmp	r4, r5
 800090a:	d04f      	beq.n	80009ac <DMA_SetConfig+0x15c>
 800090c:	3518      	adds	r5, #24
 800090e:	42ac      	cmp	r4, r5
 8000910:	d04c      	beq.n	80009ac <DMA_SetConfig+0x15c>
 8000912:	3518      	adds	r5, #24
 8000914:	42ac      	cmp	r4, r5
 8000916:	d049      	beq.n	80009ac <DMA_SetConfig+0x15c>
 8000918:	3518      	adds	r5, #24
 800091a:	42ac      	cmp	r4, r5
 800091c:	d046      	beq.n	80009ac <DMA_SetConfig+0x15c>
 800091e:	3518      	adds	r5, #24
 8000920:	42ac      	cmp	r4, r5
 8000922:	d043      	beq.n	80009ac <DMA_SetConfig+0x15c>
 8000924:	3518      	adds	r5, #24
 8000926:	42ac      	cmp	r4, r5
 8000928:	d040      	beq.n	80009ac <DMA_SetConfig+0x15c>
 800092a:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800092e:	42ac      	cmp	r4, r5
 8000930:	d03c      	beq.n	80009ac <DMA_SetConfig+0x15c>
 8000932:	3518      	adds	r5, #24
 8000934:	42ac      	cmp	r4, r5
 8000936:	d039      	beq.n	80009ac <DMA_SetConfig+0x15c>
 8000938:	3518      	adds	r5, #24
 800093a:	42ac      	cmp	r4, r5
 800093c:	d036      	beq.n	80009ac <DMA_SetConfig+0x15c>
 800093e:	3518      	adds	r5, #24
 8000940:	42ac      	cmp	r4, r5
 8000942:	d033      	beq.n	80009ac <DMA_SetConfig+0x15c>
 8000944:	3518      	adds	r5, #24
 8000946:	42ac      	cmp	r4, r5
 8000948:	d030      	beq.n	80009ac <DMA_SetConfig+0x15c>
 800094a:	3518      	adds	r5, #24
 800094c:	42ac      	cmp	r4, r5
 800094e:	d02d      	beq.n	80009ac <DMA_SetConfig+0x15c>
 8000950:	3518      	adds	r5, #24
 8000952:	42ac      	cmp	r4, r5
 8000954:	d02a      	beq.n	80009ac <DMA_SetConfig+0x15c>
 8000956:	3518      	adds	r5, #24
 8000958:	42ac      	cmp	r4, r5
 800095a:	d027      	beq.n	80009ac <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800095c:	4e25      	ldr	r6, [pc, #148]	; (80009f4 <DMA_SetConfig+0x1a4>)
 800095e:	4d26      	ldr	r5, [pc, #152]	; (80009f8 <DMA_SetConfig+0x1a8>)
 8000960:	42ac      	cmp	r4, r5
 8000962:	bf18      	it	ne
 8000964:	42b4      	cmpne	r4, r6
 8000966:	d011      	beq.n	800098c <DMA_SetConfig+0x13c>
 8000968:	4d24      	ldr	r5, [pc, #144]	; (80009fc <DMA_SetConfig+0x1ac>)
 800096a:	42ac      	cmp	r4, r5
 800096c:	d00e      	beq.n	800098c <DMA_SetConfig+0x13c>
 800096e:	3514      	adds	r5, #20
 8000970:	42ac      	cmp	r4, r5
 8000972:	d00b      	beq.n	800098c <DMA_SetConfig+0x13c>
 8000974:	3514      	adds	r5, #20
 8000976:	42ac      	cmp	r4, r5
 8000978:	d008      	beq.n	800098c <DMA_SetConfig+0x13c>
 800097a:	3514      	adds	r5, #20
 800097c:	42ac      	cmp	r4, r5
 800097e:	d005      	beq.n	800098c <DMA_SetConfig+0x13c>
 8000980:	3514      	adds	r5, #20
 8000982:	42ac      	cmp	r4, r5
 8000984:	d002      	beq.n	800098c <DMA_SetConfig+0x13c>
 8000986:	3514      	adds	r5, #20
 8000988:	42ac      	cmp	r4, r5
 800098a:	d123      	bne.n	80009d4 <DMA_SetConfig+0x184>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800098c:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800098e:	f004 051f 	and.w	r5, r4, #31
 8000992:	2401      	movs	r4, #1
 8000994:	40ac      	lsls	r4, r5
 8000996:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8000998:	6804      	ldr	r4, [r0, #0]
 800099a:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800099c:	6883      	ldr	r3, [r0, #8]
 800099e:	2b40      	cmp	r3, #64	; 0x40
 80009a0:	d01f      	beq.n	80009e2 <DMA_SetConfig+0x192>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80009a2:	6803      	ldr	r3, [r0, #0]
 80009a4:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80009a6:	6803      	ldr	r3, [r0, #0]
 80009a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80009aa:	e013      	b.n	80009d4 <DMA_SetConfig+0x184>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80009ac:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 80009ae:	f004 051f 	and.w	r5, r4, #31
 80009b2:	243f      	movs	r4, #63	; 0x3f
 80009b4:	40ac      	lsls	r4, r5
 80009b6:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80009b8:	6805      	ldr	r5, [r0, #0]
 80009ba:	682c      	ldr	r4, [r5, #0]
 80009bc:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80009c0:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80009c2:	6804      	ldr	r4, [r0, #0]
 80009c4:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80009c6:	6883      	ldr	r3, [r0, #8]
 80009c8:	2b40      	cmp	r3, #64	; 0x40
 80009ca:	d005      	beq.n	80009d8 <DMA_SetConfig+0x188>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80009cc:	6803      	ldr	r3, [r0, #0]
 80009ce:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80009d0:	6803      	ldr	r3, [r0, #0]
 80009d2:	60da      	str	r2, [r3, #12]
}
 80009d4:	bcf0      	pop	{r4, r5, r6, r7}
 80009d6:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80009d8:	6803      	ldr	r3, [r0, #0]
 80009da:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80009dc:	6803      	ldr	r3, [r0, #0]
 80009de:	60d9      	str	r1, [r3, #12]
 80009e0:	e7f8      	b.n	80009d4 <DMA_SetConfig+0x184>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80009e2:	6803      	ldr	r3, [r0, #0]
 80009e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80009e6:	6803      	ldr	r3, [r0, #0]
 80009e8:	60d9      	str	r1, [r3, #12]
 80009ea:	e7f3      	b.n	80009d4 <DMA_SetConfig+0x184>
 80009ec:	40020010 	.word	0x40020010
 80009f0:	40020028 	.word	0x40020028
 80009f4:	58025408 	.word	0x58025408
 80009f8:	5802541c 	.word	0x5802541c
 80009fc:	58025430 	.word	0x58025430

08000a00 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000a00:	6802      	ldr	r2, [r0, #0]
 8000a02:	4928      	ldr	r1, [pc, #160]	; (8000aa4 <DMA_CalcBaseAndBitshift+0xa4>)
 8000a04:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <DMA_CalcBaseAndBitshift+0xa8>)
 8000a06:	429a      	cmp	r2, r3
 8000a08:	bf18      	it	ne
 8000a0a:	428a      	cmpne	r2, r1
 8000a0c:	d02f      	beq.n	8000a6e <DMA_CalcBaseAndBitshift+0x6e>
 8000a0e:	3318      	adds	r3, #24
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d02c      	beq.n	8000a6e <DMA_CalcBaseAndBitshift+0x6e>
 8000a14:	3318      	adds	r3, #24
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d029      	beq.n	8000a6e <DMA_CalcBaseAndBitshift+0x6e>
 8000a1a:	3318      	adds	r3, #24
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d026      	beq.n	8000a6e <DMA_CalcBaseAndBitshift+0x6e>
 8000a20:	3318      	adds	r3, #24
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d023      	beq.n	8000a6e <DMA_CalcBaseAndBitshift+0x6e>
 8000a26:	3318      	adds	r3, #24
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d020      	beq.n	8000a6e <DMA_CalcBaseAndBitshift+0x6e>
 8000a2c:	3318      	adds	r3, #24
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d01d      	beq.n	8000a6e <DMA_CalcBaseAndBitshift+0x6e>
 8000a32:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d019      	beq.n	8000a6e <DMA_CalcBaseAndBitshift+0x6e>
 8000a3a:	3318      	adds	r3, #24
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d016      	beq.n	8000a6e <DMA_CalcBaseAndBitshift+0x6e>
 8000a40:	3318      	adds	r3, #24
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d013      	beq.n	8000a6e <DMA_CalcBaseAndBitshift+0x6e>
 8000a46:	3318      	adds	r3, #24
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d010      	beq.n	8000a6e <DMA_CalcBaseAndBitshift+0x6e>
 8000a4c:	3318      	adds	r3, #24
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d00d      	beq.n	8000a6e <DMA_CalcBaseAndBitshift+0x6e>
 8000a52:	3318      	adds	r3, #24
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d00a      	beq.n	8000a6e <DMA_CalcBaseAndBitshift+0x6e>
 8000a58:	3318      	adds	r3, #24
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d007      	beq.n	8000a6e <DMA_CalcBaseAndBitshift+0x6e>
 8000a5e:	3318      	adds	r3, #24
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d004      	beq.n	8000a6e <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8000a64:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000a68:	6582      	str	r2, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8000a6a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000a6c:	4770      	bx	lr
{
 8000a6e:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8000a70:	b2d3      	uxtb	r3, r2
 8000a72:	3b10      	subs	r3, #16
 8000a74:	490d      	ldr	r1, [pc, #52]	; (8000aac <DMA_CalcBaseAndBitshift+0xac>)
 8000a76:	fba1 1303 	umull	r1, r3, r1, r3
 8000a7a:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8000a7c:	f003 0107 	and.w	r1, r3, #7
 8000a80:	4c0b      	ldr	r4, [pc, #44]	; (8000ab0 <DMA_CalcBaseAndBitshift+0xb0>)
 8000a82:	5c61      	ldrb	r1, [r4, r1]
 8000a84:	65c1      	str	r1, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d806      	bhi.n	8000a98 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <DMA_CalcBaseAndBitshift+0xb4>)
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	6583      	str	r3, [r0, #88]	; 0x58
}
 8000a90:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a96:	4770      	bx	lr
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <DMA_CalcBaseAndBitshift+0xb4>)
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	6583      	str	r3, [r0, #88]	; 0x58
 8000aa0:	e7f6      	b.n	8000a90 <DMA_CalcBaseAndBitshift+0x90>
 8000aa2:	bf00      	nop
 8000aa4:	40020010 	.word	0x40020010
 8000aa8:	40020028 	.word	0x40020028
 8000aac:	aaaaaaab 	.word	0xaaaaaaab
 8000ab0:	0800f0d4 	.word	0x0800f0d4
 8000ab4:	fffffc00 	.word	0xfffffc00

08000ab8 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000ab8:	6983      	ldr	r3, [r0, #24]
 8000aba:	b99b      	cbnz	r3, 8000ae4 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 8000abc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d00a      	beq.n	8000ad8 <DMA_CheckFifoParam+0x20>
 8000ac2:	b11b      	cbz	r3, 8000acc <DMA_CheckFifoParam+0x14>
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d001      	beq.n	8000acc <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8000ac8:	2000      	movs	r0, #0
 8000aca:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000acc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000ace:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000ad2:	d12e      	bne.n	8000b32 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ad8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000ada:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000ade:	d02a      	beq.n	8000b36 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ae8:	d006      	beq.n	8000af8 <DMA_CheckFifoParam+0x40>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8000aea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d92a      	bls.n	8000b46 <DMA_CheckFifoParam+0x8e>
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	d016      	beq.n	8000b22 <DMA_CheckFifoParam+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 8000af4:	2000      	movs	r0, #0
 8000af6:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8000af8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d803      	bhi.n	8000b06 <DMA_CheckFifoParam+0x4e>
 8000afe:	e8df f003 	tbb	[pc, r3]
 8000b02:	041c      	.short	0x041c
 8000b04:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8000b06:	2000      	movs	r0, #0
 8000b08:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000b0c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000b10:	d115      	bne.n	8000b3e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8000b12:	2000      	movs	r0, #0
 8000b14:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000b16:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000b18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000b1c:	d011      	beq.n	8000b42 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000b1e:	2000      	movs	r0, #0
 8000b20:	4770      	bx	lr
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b22:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000b24:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000b28:	d001      	beq.n	8000b2e <DMA_CheckFifoParam+0x76>
        {
          status = HAL_ERROR;
 8000b2a:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 8000b2c:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8000b2e:	2000      	movs	r0, #0
 8000b30:	4770      	bx	lr
          status = HAL_ERROR;
 8000b32:	2001      	movs	r0, #1
 8000b34:	4770      	bx	lr
          status = HAL_ERROR;
 8000b36:	2001      	movs	r0, #1
 8000b38:	4770      	bx	lr
        status = HAL_ERROR;
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	4770      	bx	lr
          status = HAL_ERROR;
 8000b3e:	2001      	movs	r0, #1
 8000b40:	4770      	bx	lr
          status = HAL_ERROR;
 8000b42:	2001      	movs	r0, #1
 8000b44:	4770      	bx	lr
        status = HAL_ERROR;
 8000b46:	2001      	movs	r0, #1
 8000b48:	4770      	bx	lr
	...

08000b4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8000b4c:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000b4e:	4922      	ldr	r1, [pc, #136]	; (8000bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8000b50:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	bf18      	it	ne
 8000b56:	428b      	cmpne	r3, r1
 8000b58:	d028      	beq.n	8000bac <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8000b5a:	3214      	adds	r2, #20
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d025      	beq.n	8000bac <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8000b60:	3214      	adds	r2, #20
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d022      	beq.n	8000bac <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8000b66:	3214      	adds	r2, #20
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d01f      	beq.n	8000bac <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8000b6c:	3214      	adds	r2, #20
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d01c      	beq.n	8000bac <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8000b72:	3214      	adds	r2, #20
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d019      	beq.n	8000bac <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8000b78:	3214      	adds	r2, #20
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d016      	beq.n	8000bac <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	3a10      	subs	r2, #16
 8000b82:	4917      	ldr	r1, [pc, #92]	; (8000be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8000b84:	fba1 1202 	umull	r1, r2, r1, r2
 8000b88:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8000b8a:	4916      	ldr	r1, [pc, #88]	; (8000be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 8000b8c:	4419      	add	r1, r3
 8000b8e:	29a8      	cmp	r1, #168	; 0xa8
 8000b90:	d91f      	bls.n	8000bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8000b94:	4413      	add	r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8000b9c:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8000b9e:	f002 021f 	and.w	r2, r2, #31
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	fa03 f202 	lsl.w	r2, r3, r2
 8000ba8:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
 8000baa:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	3b08      	subs	r3, #8
 8000bb0:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8000bba:	441a      	add	r2, r3
 8000bbc:	0092      	lsls	r2, r2, #2
 8000bbe:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8000bc2:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8000bc4:	f003 031f 	and.w	r3, r3, #31
 8000bc8:	2201      	movs	r2, #1
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	6683      	str	r3, [r0, #104]	; 0x68
 8000bd0:	4770      	bx	lr
      stream_number += 8U;
 8000bd2:	3208      	adds	r2, #8
 8000bd4:	e7dd      	b.n	8000b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 8000bd6:	bf00      	nop
 8000bd8:	58025408 	.word	0x58025408
 8000bdc:	5802541c 	.word	0x5802541c
 8000be0:	aaaaaaab 	.word	0xaaaaaaab
 8000be4:	bffdfbf0 	.word	0xbffdfbf0
 8000be8:	10008200 	.word	0x10008200
 8000bec:	40020880 	.word	0x40020880
 8000bf0:	cccccccd 	.word	0xcccccccd
 8000bf4:	16009600 	.word	0x16009600
 8000bf8:	58025880 	.word	0x58025880

08000bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000bfc:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8000bfe:	1e4a      	subs	r2, r1, #1
 8000c00:	2a07      	cmp	r2, #7
 8000c02:	d82c      	bhi.n	8000c5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x62>
{
 8000c04:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000c06:	6803      	ldr	r3, [r0, #0]
 8000c08:	4d15      	ldr	r5, [pc, #84]	; (8000c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8000c0a:	4c16      	ldr	r4, [pc, #88]	; (8000c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8000c0c:	42a3      	cmp	r3, r4
 8000c0e:	bf18      	it	ne
 8000c10:	42ab      	cmpne	r3, r5
 8000c12:	d018      	beq.n	8000c46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8000c14:	3414      	adds	r4, #20
 8000c16:	42a3      	cmp	r3, r4
 8000c18:	d015      	beq.n	8000c46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8000c1a:	3414      	adds	r4, #20
 8000c1c:	42a3      	cmp	r3, r4
 8000c1e:	d012      	beq.n	8000c46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8000c20:	3414      	adds	r4, #20
 8000c22:	42a3      	cmp	r3, r4
 8000c24:	d00f      	beq.n	8000c46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8000c26:	3414      	adds	r4, #20
 8000c28:	42a3      	cmp	r3, r4
 8000c2a:	d00c      	beq.n	8000c46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8000c2c:	3414      	adds	r4, #20
 8000c2e:	42a3      	cmp	r3, r4
 8000c30:	d009      	beq.n	8000c46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8000c32:	3414      	adds	r4, #20
 8000c34:	42a3      	cmp	r3, r4
 8000c36:	d006      	beq.n	8000c46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8000c3a:	440b      	add	r3, r1
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 8000c42:	6703      	str	r3, [r0, #112]	; 0x70
 8000c44:	e005      	b.n	8000c52 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8000c48:	440b      	add	r3, r1
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8000c50:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8000c52:	2301      	movs	r3, #1
 8000c54:	fa03 f202 	lsl.w	r2, r3, r2
 8000c58:	6742      	str	r2, [r0, #116]	; 0x74
  }
}
 8000c5a:	bc30      	pop	{r4, r5}
 8000c5c:	4770      	bx	lr
 8000c5e:	4770      	bx	lr
 8000c60:	58025408 	.word	0x58025408
 8000c64:	5802541c 	.word	0x5802541c
 8000c68:	1000823f 	.word	0x1000823f
 8000c6c:	40020940 	.word	0x40020940
 8000c70:	1600963f 	.word	0x1600963f
 8000c74:	58025940 	.word	0x58025940

08000c78 <HAL_DMA_Init>:
{
 8000c78:	b570      	push	{r4, r5, r6, lr}
 8000c7a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c7c:	f7ff fd60 	bl	8000740 <HAL_GetTick>
  if(hdma == NULL)
 8000c80:	2c00      	cmp	r4, #0
 8000c82:	f000 81bd 	beq.w	8001000 <HAL_DMA_Init+0x388>
 8000c86:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000c88:	6823      	ldr	r3, [r4, #0]
 8000c8a:	49b7      	ldr	r1, [pc, #732]	; (8000f68 <HAL_DMA_Init+0x2f0>)
 8000c8c:	4ab7      	ldr	r2, [pc, #732]	; (8000f6c <HAL_DMA_Init+0x2f4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	bf18      	it	ne
 8000c92:	428b      	cmpne	r3, r1
 8000c94:	bf0c      	ite	eq
 8000c96:	2201      	moveq	r2, #1
 8000c98:	2200      	movne	r2, #0
 8000c9a:	d050      	beq.n	8000d3e <HAL_DMA_Init+0xc6>
 8000c9c:	3130      	adds	r1, #48	; 0x30
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d04d      	beq.n	8000d3e <HAL_DMA_Init+0xc6>
 8000ca2:	3118      	adds	r1, #24
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	d04a      	beq.n	8000d3e <HAL_DMA_Init+0xc6>
 8000ca8:	3118      	adds	r1, #24
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d047      	beq.n	8000d3e <HAL_DMA_Init+0xc6>
 8000cae:	3118      	adds	r1, #24
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	d044      	beq.n	8000d3e <HAL_DMA_Init+0xc6>
 8000cb4:	3118      	adds	r1, #24
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d041      	beq.n	8000d3e <HAL_DMA_Init+0xc6>
 8000cba:	3118      	adds	r1, #24
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d03e      	beq.n	8000d3e <HAL_DMA_Init+0xc6>
 8000cc0:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	d03a      	beq.n	8000d3e <HAL_DMA_Init+0xc6>
 8000cc8:	3118      	adds	r1, #24
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d037      	beq.n	8000d3e <HAL_DMA_Init+0xc6>
 8000cce:	3118      	adds	r1, #24
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d034      	beq.n	8000d3e <HAL_DMA_Init+0xc6>
 8000cd4:	3118      	adds	r1, #24
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d031      	beq.n	8000d3e <HAL_DMA_Init+0xc6>
 8000cda:	3118      	adds	r1, #24
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d02e      	beq.n	8000d3e <HAL_DMA_Init+0xc6>
 8000ce0:	3118      	adds	r1, #24
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d02b      	beq.n	8000d3e <HAL_DMA_Init+0xc6>
 8000ce6:	3118      	adds	r1, #24
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d028      	beq.n	8000d3e <HAL_DMA_Init+0xc6>
 8000cec:	3118      	adds	r1, #24
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d025      	beq.n	8000d3e <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000cf2:	499f      	ldr	r1, [pc, #636]	; (8000f70 <HAL_DMA_Init+0x2f8>)
 8000cf4:	4a9f      	ldr	r2, [pc, #636]	; (8000f74 <HAL_DMA_Init+0x2fc>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	bf18      	it	ne
 8000cfa:	428b      	cmpne	r3, r1
 8000cfc:	f000 8124 	beq.w	8000f48 <HAL_DMA_Init+0x2d0>
 8000d00:	4a9d      	ldr	r2, [pc, #628]	; (8000f78 <HAL_DMA_Init+0x300>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	f000 8120 	beq.w	8000f48 <HAL_DMA_Init+0x2d0>
 8000d08:	3214      	adds	r2, #20
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	f000 811c 	beq.w	8000f48 <HAL_DMA_Init+0x2d0>
 8000d10:	3214      	adds	r2, #20
 8000d12:	4293      	cmp	r3, r2
 8000d14:	f000 8118 	beq.w	8000f48 <HAL_DMA_Init+0x2d0>
 8000d18:	3214      	adds	r2, #20
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	f000 8114 	beq.w	8000f48 <HAL_DMA_Init+0x2d0>
 8000d20:	3214      	adds	r2, #20
 8000d22:	4293      	cmp	r3, r2
 8000d24:	f000 8110 	beq.w	8000f48 <HAL_DMA_Init+0x2d0>
 8000d28:	3214      	adds	r2, #20
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	f000 810c 	beq.w	8000f48 <HAL_DMA_Init+0x2d0>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d30:	2340      	movs	r3, #64	; 0x40
 8000d32:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000d34:	2303      	movs	r3, #3
 8000d36:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	e04a      	b.n	8000dd4 <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d44:	2102      	movs	r1, #2
 8000d46:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000d4a:	bb7a      	cbnz	r2, 8000dac <HAL_DMA_Init+0x134>
 8000d4c:	4a8b      	ldr	r2, [pc, #556]	; (8000f7c <HAL_DMA_Init+0x304>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d02c      	beq.n	8000dac <HAL_DMA_Init+0x134>
 8000d52:	3218      	adds	r2, #24
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d029      	beq.n	8000dac <HAL_DMA_Init+0x134>
 8000d58:	3218      	adds	r2, #24
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d026      	beq.n	8000dac <HAL_DMA_Init+0x134>
 8000d5e:	3218      	adds	r2, #24
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d023      	beq.n	8000dac <HAL_DMA_Init+0x134>
 8000d64:	3218      	adds	r2, #24
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d020      	beq.n	8000dac <HAL_DMA_Init+0x134>
 8000d6a:	3218      	adds	r2, #24
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d01d      	beq.n	8000dac <HAL_DMA_Init+0x134>
 8000d70:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d019      	beq.n	8000dac <HAL_DMA_Init+0x134>
 8000d78:	3218      	adds	r2, #24
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d016      	beq.n	8000dac <HAL_DMA_Init+0x134>
 8000d7e:	3218      	adds	r2, #24
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d013      	beq.n	8000dac <HAL_DMA_Init+0x134>
 8000d84:	3218      	adds	r2, #24
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d010      	beq.n	8000dac <HAL_DMA_Init+0x134>
 8000d8a:	3218      	adds	r2, #24
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d00d      	beq.n	8000dac <HAL_DMA_Init+0x134>
 8000d90:	3218      	adds	r2, #24
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d00a      	beq.n	8000dac <HAL_DMA_Init+0x134>
 8000d96:	3218      	adds	r2, #24
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d007      	beq.n	8000dac <HAL_DMA_Init+0x134>
 8000d9c:	3218      	adds	r2, #24
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d004      	beq.n	8000dac <HAL_DMA_Init+0x134>
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	f022 0201 	bic.w	r2, r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	e003      	b.n	8000db4 <HAL_DMA_Init+0x13c>
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	f022 0201 	bic.w	r2, r2, #1
 8000db2:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	f012 0f01 	tst.w	r2, #1
 8000dbc:	d00b      	beq.n	8000dd6 <HAL_DMA_Init+0x15e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dbe:	f7ff fcbf 	bl	8000740 <HAL_GetTick>
 8000dc2:	1b40      	subs	r0, r0, r5
 8000dc4:	2805      	cmp	r0, #5
 8000dc6:	d9f5      	bls.n	8000db4 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dc8:	2320      	movs	r3, #32
 8000dca:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8000dd2:	2001      	movs	r0, #1
}
 8000dd4:	bd70      	pop	{r4, r5, r6, pc}
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000dd6:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000dd8:	4869      	ldr	r0, [pc, #420]	; (8000f80 <HAL_DMA_Init+0x308>)
 8000dda:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
 8000ddc:	68a1      	ldr	r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dde:	68e2      	ldr	r2, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8000de0:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de2:	6921      	ldr	r1, [r4, #16]
 8000de4:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de6:	6961      	ldr	r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de8:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dea:	69a1      	ldr	r1, [r4, #24]
 8000dec:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8000dee:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000df0:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8000df2:	6a21      	ldr	r1, [r4, #32]
 8000df4:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
 8000df6:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000df8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000dfa:	2904      	cmp	r1, #4
 8000dfc:	f000 8099 	beq.w	8000f32 <HAL_DMA_Init+0x2ba>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8000e00:	4960      	ldr	r1, [pc, #384]	; (8000f84 <HAL_DMA_Init+0x30c>)
 8000e02:	6808      	ldr	r0, [r1, #0]
 8000e04:	4960      	ldr	r1, [pc, #384]	; (8000f88 <HAL_DMA_Init+0x310>)
 8000e06:	4001      	ands	r1, r0
 8000e08:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000e0c:	d311      	bcc.n	8000e32 <HAL_DMA_Init+0x1ba>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000e0e:	6861      	ldr	r1, [r4, #4]
 8000e10:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
 8000e14:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
 8000e18:	2803      	cmp	r0, #3
 8000e1a:	bf88      	it	hi
 8000e1c:	2d05      	cmphi	r5, #5
 8000e1e:	d906      	bls.n	8000e2e <HAL_DMA_Init+0x1b6>
 8000e20:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
 8000e24:	2801      	cmp	r0, #1
 8000e26:	d902      	bls.n	8000e2e <HAL_DMA_Init+0x1b6>
 8000e28:	394f      	subs	r1, #79	; 0x4f
 8000e2a:	2903      	cmp	r1, #3
 8000e2c:	d801      	bhi.n	8000e32 <HAL_DMA_Init+0x1ba>
        registerValue |= DMA_SxCR_TRBUFF;
 8000e2e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000e32:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000e34:	6826      	ldr	r6, [r4, #0]
 8000e36:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e38:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 8000e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e3e:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d108      	bne.n	8000e56 <HAL_DMA_Init+0x1de>
      registerValue |= hdma->Init.FIFOThreshold;
 8000e44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e46:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e4a:	b123      	cbz	r3, 8000e56 <HAL_DMA_Init+0x1de>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e4c:	4620      	mov	r0, r4
 8000e4e:	f7ff fe33 	bl	8000ab8 <DMA_CheckFifoParam>
 8000e52:	2800      	cmp	r0, #0
 8000e54:	d172      	bne.n	8000f3c <HAL_DMA_Init+0x2c4>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8000e56:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e58:	4620      	mov	r0, r4
 8000e5a:	f7ff fdd1 	bl	8000a00 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000e5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000e60:	f003 021f 	and.w	r2, r3, #31
 8000e64:	233f      	movs	r3, #63	; 0x3f
 8000e66:	4093      	lsls	r3, r2
 8000e68:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	493e      	ldr	r1, [pc, #248]	; (8000f68 <HAL_DMA_Init+0x2f0>)
 8000e6e:	4a3f      	ldr	r2, [pc, #252]	; (8000f6c <HAL_DMA_Init+0x2f4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	bf18      	it	ne
 8000e74:	428b      	cmpne	r3, r1
 8000e76:	d042      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000e78:	3218      	adds	r2, #24
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d03f      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000e7e:	3218      	adds	r2, #24
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d03c      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000e84:	3218      	adds	r2, #24
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d039      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000e8a:	3218      	adds	r2, #24
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d036      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000e90:	3218      	adds	r2, #24
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d033      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000e96:	3218      	adds	r2, #24
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d030      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000e9c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d02c      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000ea4:	3218      	adds	r2, #24
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d029      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000eaa:	3218      	adds	r2, #24
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d026      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000eb0:	3218      	adds	r2, #24
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d023      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000eb6:	3218      	adds	r2, #24
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d020      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000ebc:	3218      	adds	r2, #24
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d01d      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000ec2:	3218      	adds	r2, #24
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d01a      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000ec8:	3218      	adds	r2, #24
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d017      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000ece:	4a28      	ldr	r2, [pc, #160]	; (8000f70 <HAL_DMA_Init+0x2f8>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d014      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000ed4:	3214      	adds	r2, #20
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d011      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000eda:	3214      	adds	r2, #20
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d00e      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000ee0:	3214      	adds	r2, #20
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d00b      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000ee6:	3214      	adds	r2, #20
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d008      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000eec:	3214      	adds	r2, #20
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d005      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000ef2:	3214      	adds	r2, #20
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d002      	beq.n	8000efe <HAL_DMA_Init+0x286>
 8000ef8:	3214      	adds	r2, #20
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d113      	bne.n	8000f26 <HAL_DMA_Init+0x2ae>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000efe:	4620      	mov	r0, r4
 8000f00:	f7ff fe24 	bl	8000b4c <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f04:	68a3      	ldr	r3, [r4, #8]
 8000f06:	2b80      	cmp	r3, #128	; 0x80
 8000f08:	d06d      	beq.n	8000fe6 <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f0a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000f0c:	7922      	ldrb	r2, [r4, #4]
 8000f0e:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000f12:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8000f14:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8000f16:	6863      	ldr	r3, [r4, #4]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	2b07      	cmp	r3, #7
 8000f1c:	d966      	bls.n	8000fec <HAL_DMA_Init+0x374>
      hdma->DMAmuxRequestGen = 0U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8000f22:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f24:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f26:	2000      	movs	r0, #0
 8000f28:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000f30:	e750      	b.n	8000dd4 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f32:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000f34:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000f36:	4301      	orrs	r1, r0
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	e761      	b.n	8000e00 <HAL_DMA_Init+0x188>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f3c:	2340      	movs	r3, #64	; 0x40
 8000f3e:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8000f40:	2001      	movs	r0, #1
 8000f42:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8000f46:	e745      	b.n	8000dd4 <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f4e:	2202      	movs	r2, #2
 8000f50:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000f54:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000f56:	490d      	ldr	r1, [pc, #52]	; (8000f8c <HAL_DMA_Init+0x314>)
 8000f58:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000f5a:	68a2      	ldr	r2, [r4, #8]
 8000f5c:	2a40      	cmp	r2, #64	; 0x40
 8000f5e:	d01a      	beq.n	8000f96 <HAL_DMA_Init+0x31e>
 8000f60:	2a80      	cmp	r2, #128	; 0x80
 8000f62:	d015      	beq.n	8000f90 <HAL_DMA_Init+0x318>
 8000f64:	2200      	movs	r2, #0
 8000f66:	e017      	b.n	8000f98 <HAL_DMA_Init+0x320>
 8000f68:	40020010 	.word	0x40020010
 8000f6c:	40020028 	.word	0x40020028
 8000f70:	58025408 	.word	0x58025408
 8000f74:	5802541c 	.word	0x5802541c
 8000f78:	58025430 	.word	0x58025430
 8000f7c:	40020040 	.word	0x40020040
 8000f80:	fe10803f 	.word	0xfe10803f
 8000f84:	5c001000 	.word	0x5c001000
 8000f88:	ffff0000 	.word	0xffff0000
 8000f8c:	fffe000f 	.word	0xfffe000f
 8000f90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f94:	e000      	b.n	8000f98 <HAL_DMA_Init+0x320>
 8000f96:	2210      	movs	r2, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000f98:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000f9a:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000f9e:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8000fa0:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000fa4:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000fa6:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000faa:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000fac:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000fb0:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000fb2:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000fb6:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000fb8:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000fbc:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000fbe:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000fc0:	6822      	ldr	r2, [r4, #0]
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_DMA_Init+0x38c>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a10      	ldr	r2, [pc, #64]	; (8001008 <HAL_DMA_Init+0x390>)
 8000fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f7ff fd14 	bl	8000a00 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000fd8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000fda:	f003 021f 	and.w	r2, r3, #31
 8000fde:	2301      	movs	r3, #1
 8000fe0:	4093      	lsls	r3, r2
 8000fe2:	6043      	str	r3, [r0, #4]
 8000fe4:	e741      	b.n	8000e6a <HAL_DMA_Init+0x1f2>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	6063      	str	r3, [r4, #4]
 8000fea:	e78e      	b.n	8000f0a <HAL_DMA_Init+0x292>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000fec:	4620      	mov	r0, r4
 8000fee:	f7ff fe05 	bl	8000bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000ff2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ff8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000ffa:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	e792      	b.n	8000f26 <HAL_DMA_Init+0x2ae>
    return HAL_ERROR;
 8001000:	2001      	movs	r0, #1
 8001002:	e6e7      	b.n	8000dd4 <HAL_DMA_Init+0x15c>
 8001004:	a7fdabf8 	.word	0xa7fdabf8
 8001008:	cccccccd 	.word	0xcccccccd

0800100c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800100c:	2800      	cmp	r0, #0
 800100e:	f000 813e 	beq.w	800128e <HAL_DMA_Start_IT+0x282>
{
 8001012:	b570      	push	{r4, r5, r6, lr}
 8001014:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001016:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800101a:	2801      	cmp	r0, #1
 800101c:	f000 8139 	beq.w	8001292 <HAL_DMA_Start_IT+0x286>
 8001020:	2001      	movs	r0, #1
 8001022:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001026:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 800102a:	b2c0      	uxtb	r0, r0
 800102c:	2801      	cmp	r0, #1
 800102e:	d007      	beq.n	8001040 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 8001030:	2300      	movs	r3, #0
 8001032:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001036:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800103a:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800103c:	2001      	movs	r0, #1
}
 800103e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001040:	2002      	movs	r0, #2
 8001042:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001046:	2000      	movs	r0, #0
 8001048:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800104a:	6820      	ldr	r0, [r4, #0]
 800104c:	4e92      	ldr	r6, [pc, #584]	; (8001298 <HAL_DMA_Start_IT+0x28c>)
 800104e:	4d93      	ldr	r5, [pc, #588]	; (800129c <HAL_DMA_Start_IT+0x290>)
 8001050:	42a8      	cmp	r0, r5
 8001052:	bf18      	it	ne
 8001054:	42b0      	cmpne	r0, r6
 8001056:	d02f      	beq.n	80010b8 <HAL_DMA_Start_IT+0xac>
 8001058:	3518      	adds	r5, #24
 800105a:	42a8      	cmp	r0, r5
 800105c:	d02c      	beq.n	80010b8 <HAL_DMA_Start_IT+0xac>
 800105e:	3518      	adds	r5, #24
 8001060:	42a8      	cmp	r0, r5
 8001062:	d029      	beq.n	80010b8 <HAL_DMA_Start_IT+0xac>
 8001064:	3518      	adds	r5, #24
 8001066:	42a8      	cmp	r0, r5
 8001068:	d026      	beq.n	80010b8 <HAL_DMA_Start_IT+0xac>
 800106a:	3518      	adds	r5, #24
 800106c:	42a8      	cmp	r0, r5
 800106e:	d023      	beq.n	80010b8 <HAL_DMA_Start_IT+0xac>
 8001070:	3518      	adds	r5, #24
 8001072:	42a8      	cmp	r0, r5
 8001074:	d020      	beq.n	80010b8 <HAL_DMA_Start_IT+0xac>
 8001076:	3518      	adds	r5, #24
 8001078:	42a8      	cmp	r0, r5
 800107a:	d01d      	beq.n	80010b8 <HAL_DMA_Start_IT+0xac>
 800107c:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8001080:	42a8      	cmp	r0, r5
 8001082:	d019      	beq.n	80010b8 <HAL_DMA_Start_IT+0xac>
 8001084:	3518      	adds	r5, #24
 8001086:	42a8      	cmp	r0, r5
 8001088:	d016      	beq.n	80010b8 <HAL_DMA_Start_IT+0xac>
 800108a:	3518      	adds	r5, #24
 800108c:	42a8      	cmp	r0, r5
 800108e:	d013      	beq.n	80010b8 <HAL_DMA_Start_IT+0xac>
 8001090:	3518      	adds	r5, #24
 8001092:	42a8      	cmp	r0, r5
 8001094:	d010      	beq.n	80010b8 <HAL_DMA_Start_IT+0xac>
 8001096:	3518      	adds	r5, #24
 8001098:	42a8      	cmp	r0, r5
 800109a:	d00d      	beq.n	80010b8 <HAL_DMA_Start_IT+0xac>
 800109c:	3518      	adds	r5, #24
 800109e:	42a8      	cmp	r0, r5
 80010a0:	d00a      	beq.n	80010b8 <HAL_DMA_Start_IT+0xac>
 80010a2:	3518      	adds	r5, #24
 80010a4:	42a8      	cmp	r0, r5
 80010a6:	d007      	beq.n	80010b8 <HAL_DMA_Start_IT+0xac>
 80010a8:	3518      	adds	r5, #24
 80010aa:	42a8      	cmp	r0, r5
 80010ac:	d004      	beq.n	80010b8 <HAL_DMA_Start_IT+0xac>
 80010ae:	6805      	ldr	r5, [r0, #0]
 80010b0:	f025 0501 	bic.w	r5, r5, #1
 80010b4:	6005      	str	r5, [r0, #0]
 80010b6:	e003      	b.n	80010c0 <HAL_DMA_Start_IT+0xb4>
 80010b8:	6805      	ldr	r5, [r0, #0]
 80010ba:	f025 0501 	bic.w	r5, r5, #1
 80010be:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010c0:	4620      	mov	r0, r4
 80010c2:	f7ff fbc5 	bl	8000850 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	4973      	ldr	r1, [pc, #460]	; (8001298 <HAL_DMA_Start_IT+0x28c>)
 80010ca:	4a74      	ldr	r2, [pc, #464]	; (800129c <HAL_DMA_Start_IT+0x290>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	bf18      	it	ne
 80010d0:	428b      	cmpne	r3, r1
 80010d2:	d038      	beq.n	8001146 <HAL_DMA_Start_IT+0x13a>
 80010d4:	3218      	adds	r2, #24
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d035      	beq.n	8001146 <HAL_DMA_Start_IT+0x13a>
 80010da:	3218      	adds	r2, #24
 80010dc:	4293      	cmp	r3, r2
 80010de:	d032      	beq.n	8001146 <HAL_DMA_Start_IT+0x13a>
 80010e0:	3218      	adds	r2, #24
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d02f      	beq.n	8001146 <HAL_DMA_Start_IT+0x13a>
 80010e6:	3218      	adds	r2, #24
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d02c      	beq.n	8001146 <HAL_DMA_Start_IT+0x13a>
 80010ec:	3218      	adds	r2, #24
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d029      	beq.n	8001146 <HAL_DMA_Start_IT+0x13a>
 80010f2:	3218      	adds	r2, #24
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d026      	beq.n	8001146 <HAL_DMA_Start_IT+0x13a>
 80010f8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d022      	beq.n	8001146 <HAL_DMA_Start_IT+0x13a>
 8001100:	3218      	adds	r2, #24
 8001102:	4293      	cmp	r3, r2
 8001104:	d01f      	beq.n	8001146 <HAL_DMA_Start_IT+0x13a>
 8001106:	3218      	adds	r2, #24
 8001108:	4293      	cmp	r3, r2
 800110a:	d01c      	beq.n	8001146 <HAL_DMA_Start_IT+0x13a>
 800110c:	3218      	adds	r2, #24
 800110e:	4293      	cmp	r3, r2
 8001110:	d019      	beq.n	8001146 <HAL_DMA_Start_IT+0x13a>
 8001112:	3218      	adds	r2, #24
 8001114:	4293      	cmp	r3, r2
 8001116:	d016      	beq.n	8001146 <HAL_DMA_Start_IT+0x13a>
 8001118:	3218      	adds	r2, #24
 800111a:	4293      	cmp	r3, r2
 800111c:	d013      	beq.n	8001146 <HAL_DMA_Start_IT+0x13a>
 800111e:	3218      	adds	r2, #24
 8001120:	4293      	cmp	r3, r2
 8001122:	d010      	beq.n	8001146 <HAL_DMA_Start_IT+0x13a>
 8001124:	3218      	adds	r2, #24
 8001126:	4293      	cmp	r3, r2
 8001128:	d00d      	beq.n	8001146 <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	f022 020e 	bic.w	r2, r2, #14
 8001130:	f042 020a 	orr.w	r2, r2, #10
 8001134:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001138:	b193      	cbz	r3, 8001160 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800113a:	6822      	ldr	r2, [r4, #0]
 800113c:	6813      	ldr	r3, [r2, #0]
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	e00c      	b.n	8001160 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	f022 021e 	bic.w	r2, r2, #30
 800114c:	f042 0216 	orr.w	r2, r2, #22
 8001150:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001154:	b123      	cbz	r3, 8001160 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001156:	6822      	ldr	r2, [r4, #0]
 8001158:	6813      	ldr	r3, [r2, #0]
 800115a:	f043 0308 	orr.w	r3, r3, #8
 800115e:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	494d      	ldr	r1, [pc, #308]	; (8001298 <HAL_DMA_Start_IT+0x28c>)
 8001164:	4a4d      	ldr	r2, [pc, #308]	; (800129c <HAL_DMA_Start_IT+0x290>)
 8001166:	4293      	cmp	r3, r2
 8001168:	bf18      	it	ne
 800116a:	428b      	cmpne	r3, r1
 800116c:	d042      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 800116e:	3218      	adds	r2, #24
 8001170:	4293      	cmp	r3, r2
 8001172:	d03f      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 8001174:	3218      	adds	r2, #24
 8001176:	4293      	cmp	r3, r2
 8001178:	d03c      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 800117a:	3218      	adds	r2, #24
 800117c:	4293      	cmp	r3, r2
 800117e:	d039      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 8001180:	3218      	adds	r2, #24
 8001182:	4293      	cmp	r3, r2
 8001184:	d036      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 8001186:	3218      	adds	r2, #24
 8001188:	4293      	cmp	r3, r2
 800118a:	d033      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 800118c:	3218      	adds	r2, #24
 800118e:	4293      	cmp	r3, r2
 8001190:	d030      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 8001192:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001196:	4293      	cmp	r3, r2
 8001198:	d02c      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 800119a:	3218      	adds	r2, #24
 800119c:	4293      	cmp	r3, r2
 800119e:	d029      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 80011a0:	3218      	adds	r2, #24
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d026      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 80011a6:	3218      	adds	r2, #24
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d023      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 80011ac:	3218      	adds	r2, #24
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d020      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 80011b2:	3218      	adds	r2, #24
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d01d      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 80011b8:	3218      	adds	r2, #24
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d01a      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 80011be:	3218      	adds	r2, #24
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d017      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 80011c4:	4a36      	ldr	r2, [pc, #216]	; (80012a0 <HAL_DMA_Start_IT+0x294>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d014      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 80011ca:	3214      	adds	r2, #20
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d011      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 80011d0:	3214      	adds	r2, #20
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d00e      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 80011d6:	3214      	adds	r2, #20
 80011d8:	4293      	cmp	r3, r2
 80011da:	d00b      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 80011dc:	3214      	adds	r2, #20
 80011de:	4293      	cmp	r3, r2
 80011e0:	d008      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 80011e2:	3214      	adds	r2, #20
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d005      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 80011e8:	3214      	adds	r2, #20
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d002      	beq.n	80011f4 <HAL_DMA_Start_IT+0x1e8>
 80011ee:	3214      	adds	r2, #20
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d10e      	bne.n	8001212 <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80011f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80011fc:	d003      	beq.n	8001206 <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001204:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8001206:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001208:	b11b      	cbz	r3, 8001212 <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001210:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001212:	6823      	ldr	r3, [r4, #0]
 8001214:	4920      	ldr	r1, [pc, #128]	; (8001298 <HAL_DMA_Start_IT+0x28c>)
 8001216:	4a21      	ldr	r2, [pc, #132]	; (800129c <HAL_DMA_Start_IT+0x290>)
 8001218:	4293      	cmp	r3, r2
 800121a:	bf18      	it	ne
 800121c:	428b      	cmpne	r3, r1
 800121e:	d030      	beq.n	8001282 <HAL_DMA_Start_IT+0x276>
 8001220:	3218      	adds	r2, #24
 8001222:	4293      	cmp	r3, r2
 8001224:	d02d      	beq.n	8001282 <HAL_DMA_Start_IT+0x276>
 8001226:	3218      	adds	r2, #24
 8001228:	4293      	cmp	r3, r2
 800122a:	d02a      	beq.n	8001282 <HAL_DMA_Start_IT+0x276>
 800122c:	3218      	adds	r2, #24
 800122e:	4293      	cmp	r3, r2
 8001230:	d027      	beq.n	8001282 <HAL_DMA_Start_IT+0x276>
 8001232:	3218      	adds	r2, #24
 8001234:	4293      	cmp	r3, r2
 8001236:	d024      	beq.n	8001282 <HAL_DMA_Start_IT+0x276>
 8001238:	3218      	adds	r2, #24
 800123a:	4293      	cmp	r3, r2
 800123c:	d021      	beq.n	8001282 <HAL_DMA_Start_IT+0x276>
 800123e:	3218      	adds	r2, #24
 8001240:	4293      	cmp	r3, r2
 8001242:	d01e      	beq.n	8001282 <HAL_DMA_Start_IT+0x276>
 8001244:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001248:	4293      	cmp	r3, r2
 800124a:	d01a      	beq.n	8001282 <HAL_DMA_Start_IT+0x276>
 800124c:	3218      	adds	r2, #24
 800124e:	4293      	cmp	r3, r2
 8001250:	d017      	beq.n	8001282 <HAL_DMA_Start_IT+0x276>
 8001252:	3218      	adds	r2, #24
 8001254:	4293      	cmp	r3, r2
 8001256:	d014      	beq.n	8001282 <HAL_DMA_Start_IT+0x276>
 8001258:	3218      	adds	r2, #24
 800125a:	4293      	cmp	r3, r2
 800125c:	d011      	beq.n	8001282 <HAL_DMA_Start_IT+0x276>
 800125e:	3218      	adds	r2, #24
 8001260:	4293      	cmp	r3, r2
 8001262:	d00e      	beq.n	8001282 <HAL_DMA_Start_IT+0x276>
 8001264:	3218      	adds	r2, #24
 8001266:	4293      	cmp	r3, r2
 8001268:	d00b      	beq.n	8001282 <HAL_DMA_Start_IT+0x276>
 800126a:	3218      	adds	r2, #24
 800126c:	4293      	cmp	r3, r2
 800126e:	d008      	beq.n	8001282 <HAL_DMA_Start_IT+0x276>
 8001270:	3218      	adds	r2, #24
 8001272:	4293      	cmp	r3, r2
 8001274:	d005      	beq.n	8001282 <HAL_DMA_Start_IT+0x276>
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	f042 0201 	orr.w	r2, r2, #1
 800127c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800127e:	2000      	movs	r0, #0
 8001280:	e6dd      	b.n	800103e <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	f042 0201 	orr.w	r2, r2, #1
 8001288:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800128a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800128c:	e6d7      	b.n	800103e <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 800128e:	2001      	movs	r0, #1
}
 8001290:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001292:	2002      	movs	r0, #2
 8001294:	e6d3      	b.n	800103e <HAL_DMA_Start_IT+0x32>
 8001296:	bf00      	nop
 8001298:	40020010 	.word	0x40020010
 800129c:	40020028 	.word	0x40020028
 80012a0:	58025408 	.word	0x58025408

080012a4 <HAL_DMA_Abort>:
{
 80012a4:	b570      	push	{r4, r5, r6, lr}
 80012a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff fa4a 	bl	8000740 <HAL_GetTick>
  if(hdma == NULL)
 80012ac:	2c00      	cmp	r4, #0
 80012ae:	f000 8191 	beq.w	80015d4 <HAL_DMA_Abort+0x330>
 80012b2:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d006      	beq.n	80012cc <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80012c2:	2300      	movs	r3, #0
 80012c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80012c8:	2001      	movs	r0, #1
}
 80012ca:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	498c      	ldr	r1, [pc, #560]	; (8001500 <HAL_DMA_Abort+0x25c>)
 80012d0:	4a8c      	ldr	r2, [pc, #560]	; (8001504 <HAL_DMA_Abort+0x260>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	bf18      	it	ne
 80012d6:	428b      	cmpne	r3, r1
 80012d8:	d030      	beq.n	800133c <HAL_DMA_Abort+0x98>
 80012da:	3218      	adds	r2, #24
 80012dc:	4293      	cmp	r3, r2
 80012de:	d02d      	beq.n	800133c <HAL_DMA_Abort+0x98>
 80012e0:	3218      	adds	r2, #24
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d02a      	beq.n	800133c <HAL_DMA_Abort+0x98>
 80012e6:	3218      	adds	r2, #24
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d027      	beq.n	800133c <HAL_DMA_Abort+0x98>
 80012ec:	3218      	adds	r2, #24
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d024      	beq.n	800133c <HAL_DMA_Abort+0x98>
 80012f2:	3218      	adds	r2, #24
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d021      	beq.n	800133c <HAL_DMA_Abort+0x98>
 80012f8:	3218      	adds	r2, #24
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d01e      	beq.n	800133c <HAL_DMA_Abort+0x98>
 80012fe:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001302:	4293      	cmp	r3, r2
 8001304:	d01a      	beq.n	800133c <HAL_DMA_Abort+0x98>
 8001306:	3218      	adds	r2, #24
 8001308:	4293      	cmp	r3, r2
 800130a:	d017      	beq.n	800133c <HAL_DMA_Abort+0x98>
 800130c:	3218      	adds	r2, #24
 800130e:	4293      	cmp	r3, r2
 8001310:	d014      	beq.n	800133c <HAL_DMA_Abort+0x98>
 8001312:	3218      	adds	r2, #24
 8001314:	4293      	cmp	r3, r2
 8001316:	d011      	beq.n	800133c <HAL_DMA_Abort+0x98>
 8001318:	3218      	adds	r2, #24
 800131a:	4293      	cmp	r3, r2
 800131c:	d00e      	beq.n	800133c <HAL_DMA_Abort+0x98>
 800131e:	3218      	adds	r2, #24
 8001320:	4293      	cmp	r3, r2
 8001322:	d00b      	beq.n	800133c <HAL_DMA_Abort+0x98>
 8001324:	3218      	adds	r2, #24
 8001326:	4293      	cmp	r3, r2
 8001328:	d008      	beq.n	800133c <HAL_DMA_Abort+0x98>
 800132a:	3218      	adds	r2, #24
 800132c:	4293      	cmp	r3, r2
 800132e:	d005      	beq.n	800133c <HAL_DMA_Abort+0x98>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	f022 020e 	bic.w	r2, r2, #14
 8001336:	601a      	str	r2, [r3, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001338:	6826      	ldr	r6, [r4, #0]
 800133a:	e009      	b.n	8001350 <HAL_DMA_Abort+0xac>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	f022 021e 	bic.w	r2, r2, #30
 8001342:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001344:	6822      	ldr	r2, [r4, #0]
 8001346:	6953      	ldr	r3, [r2, #20]
 8001348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800134c:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800134e:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001350:	6823      	ldr	r3, [r4, #0]
 8001352:	496b      	ldr	r1, [pc, #428]	; (8001500 <HAL_DMA_Abort+0x25c>)
 8001354:	4a6b      	ldr	r2, [pc, #428]	; (8001504 <HAL_DMA_Abort+0x260>)
 8001356:	4293      	cmp	r3, r2
 8001358:	bf18      	it	ne
 800135a:	428b      	cmpne	r3, r1
 800135c:	d042      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 800135e:	3218      	adds	r2, #24
 8001360:	4293      	cmp	r3, r2
 8001362:	d03f      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 8001364:	3218      	adds	r2, #24
 8001366:	4293      	cmp	r3, r2
 8001368:	d03c      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 800136a:	3218      	adds	r2, #24
 800136c:	4293      	cmp	r3, r2
 800136e:	d039      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 8001370:	3218      	adds	r2, #24
 8001372:	4293      	cmp	r3, r2
 8001374:	d036      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 8001376:	3218      	adds	r2, #24
 8001378:	4293      	cmp	r3, r2
 800137a:	d033      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 800137c:	3218      	adds	r2, #24
 800137e:	4293      	cmp	r3, r2
 8001380:	d030      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 8001382:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001386:	4293      	cmp	r3, r2
 8001388:	d02c      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 800138a:	3218      	adds	r2, #24
 800138c:	4293      	cmp	r3, r2
 800138e:	d029      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 8001390:	3218      	adds	r2, #24
 8001392:	4293      	cmp	r3, r2
 8001394:	d026      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 8001396:	3218      	adds	r2, #24
 8001398:	4293      	cmp	r3, r2
 800139a:	d023      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 800139c:	3218      	adds	r2, #24
 800139e:	4293      	cmp	r3, r2
 80013a0:	d020      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 80013a2:	3218      	adds	r2, #24
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d01d      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 80013a8:	3218      	adds	r2, #24
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d01a      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 80013ae:	3218      	adds	r2, #24
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d017      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 80013b4:	4a54      	ldr	r2, [pc, #336]	; (8001508 <HAL_DMA_Abort+0x264>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d014      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 80013ba:	3214      	adds	r2, #20
 80013bc:	4293      	cmp	r3, r2
 80013be:	d011      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 80013c0:	3214      	adds	r2, #20
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00e      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 80013c6:	3214      	adds	r2, #20
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d00b      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 80013cc:	3214      	adds	r2, #20
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d008      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 80013d2:	3214      	adds	r2, #20
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d005      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 80013d8:	3214      	adds	r2, #20
 80013da:	4293      	cmp	r3, r2
 80013dc:	d002      	beq.n	80013e4 <HAL_DMA_Abort+0x140>
 80013de:	3214      	adds	r2, #20
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d104      	bne.n	80013ee <HAL_DMA_Abort+0x14a>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013e4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80013e6:	6813      	ldr	r3, [r2, #0]
 80013e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013ec:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	4943      	ldr	r1, [pc, #268]	; (8001500 <HAL_DMA_Abort+0x25c>)
 80013f2:	4a44      	ldr	r2, [pc, #272]	; (8001504 <HAL_DMA_Abort+0x260>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	bf18      	it	ne
 80013f8:	428b      	cmpne	r3, r1
 80013fa:	d02f      	beq.n	800145c <HAL_DMA_Abort+0x1b8>
 80013fc:	3218      	adds	r2, #24
 80013fe:	4293      	cmp	r3, r2
 8001400:	d02c      	beq.n	800145c <HAL_DMA_Abort+0x1b8>
 8001402:	3218      	adds	r2, #24
 8001404:	4293      	cmp	r3, r2
 8001406:	d029      	beq.n	800145c <HAL_DMA_Abort+0x1b8>
 8001408:	3218      	adds	r2, #24
 800140a:	4293      	cmp	r3, r2
 800140c:	d026      	beq.n	800145c <HAL_DMA_Abort+0x1b8>
 800140e:	3218      	adds	r2, #24
 8001410:	4293      	cmp	r3, r2
 8001412:	d023      	beq.n	800145c <HAL_DMA_Abort+0x1b8>
 8001414:	3218      	adds	r2, #24
 8001416:	4293      	cmp	r3, r2
 8001418:	d020      	beq.n	800145c <HAL_DMA_Abort+0x1b8>
 800141a:	3218      	adds	r2, #24
 800141c:	4293      	cmp	r3, r2
 800141e:	d01d      	beq.n	800145c <HAL_DMA_Abort+0x1b8>
 8001420:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001424:	4293      	cmp	r3, r2
 8001426:	d019      	beq.n	800145c <HAL_DMA_Abort+0x1b8>
 8001428:	3218      	adds	r2, #24
 800142a:	4293      	cmp	r3, r2
 800142c:	d016      	beq.n	800145c <HAL_DMA_Abort+0x1b8>
 800142e:	3218      	adds	r2, #24
 8001430:	4293      	cmp	r3, r2
 8001432:	d013      	beq.n	800145c <HAL_DMA_Abort+0x1b8>
 8001434:	3218      	adds	r2, #24
 8001436:	4293      	cmp	r3, r2
 8001438:	d010      	beq.n	800145c <HAL_DMA_Abort+0x1b8>
 800143a:	3218      	adds	r2, #24
 800143c:	4293      	cmp	r3, r2
 800143e:	d00d      	beq.n	800145c <HAL_DMA_Abort+0x1b8>
 8001440:	3218      	adds	r2, #24
 8001442:	4293      	cmp	r3, r2
 8001444:	d00a      	beq.n	800145c <HAL_DMA_Abort+0x1b8>
 8001446:	3218      	adds	r2, #24
 8001448:	4293      	cmp	r3, r2
 800144a:	d007      	beq.n	800145c <HAL_DMA_Abort+0x1b8>
 800144c:	3218      	adds	r2, #24
 800144e:	4293      	cmp	r3, r2
 8001450:	d004      	beq.n	800145c <HAL_DMA_Abort+0x1b8>
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e003      	b.n	8001464 <HAL_DMA_Abort+0x1c0>
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	f022 0201 	bic.w	r2, r2, #1
 8001462:	601a      	str	r2, [r3, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001464:	6833      	ldr	r3, [r6, #0]
 8001466:	f013 0f01 	tst.w	r3, #1
 800146a:	d00e      	beq.n	800148a <HAL_DMA_Abort+0x1e6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800146c:	f7ff f968 	bl	8000740 <HAL_GetTick>
 8001470:	1b40      	subs	r0, r0, r5
 8001472:	2805      	cmp	r0, #5
 8001474:	d9f6      	bls.n	8001464 <HAL_DMA_Abort+0x1c0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001476:	2320      	movs	r3, #32
 8001478:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800147a:	2300      	movs	r3, #0
 800147c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8001480:	2303      	movs	r3, #3
 8001482:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8001486:	2001      	movs	r0, #1
 8001488:	e71f      	b.n	80012ca <HAL_DMA_Abort+0x26>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800148a:	6823      	ldr	r3, [r4, #0]
 800148c:	491c      	ldr	r1, [pc, #112]	; (8001500 <HAL_DMA_Abort+0x25c>)
 800148e:	4a1d      	ldr	r2, [pc, #116]	; (8001504 <HAL_DMA_Abort+0x260>)
 8001490:	4293      	cmp	r3, r2
 8001492:	bf18      	it	ne
 8001494:	428b      	cmpne	r3, r1
 8001496:	d039      	beq.n	800150c <HAL_DMA_Abort+0x268>
 8001498:	3218      	adds	r2, #24
 800149a:	4293      	cmp	r3, r2
 800149c:	d036      	beq.n	800150c <HAL_DMA_Abort+0x268>
 800149e:	3218      	adds	r2, #24
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d033      	beq.n	800150c <HAL_DMA_Abort+0x268>
 80014a4:	3218      	adds	r2, #24
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d030      	beq.n	800150c <HAL_DMA_Abort+0x268>
 80014aa:	3218      	adds	r2, #24
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d02d      	beq.n	800150c <HAL_DMA_Abort+0x268>
 80014b0:	3218      	adds	r2, #24
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d02a      	beq.n	800150c <HAL_DMA_Abort+0x268>
 80014b6:	3218      	adds	r2, #24
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d027      	beq.n	800150c <HAL_DMA_Abort+0x268>
 80014bc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d023      	beq.n	800150c <HAL_DMA_Abort+0x268>
 80014c4:	3218      	adds	r2, #24
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d020      	beq.n	800150c <HAL_DMA_Abort+0x268>
 80014ca:	3218      	adds	r2, #24
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d01d      	beq.n	800150c <HAL_DMA_Abort+0x268>
 80014d0:	3218      	adds	r2, #24
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d01a      	beq.n	800150c <HAL_DMA_Abort+0x268>
 80014d6:	3218      	adds	r2, #24
 80014d8:	4293      	cmp	r3, r2
 80014da:	d017      	beq.n	800150c <HAL_DMA_Abort+0x268>
 80014dc:	3218      	adds	r2, #24
 80014de:	4293      	cmp	r3, r2
 80014e0:	d014      	beq.n	800150c <HAL_DMA_Abort+0x268>
 80014e2:	3218      	adds	r2, #24
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d011      	beq.n	800150c <HAL_DMA_Abort+0x268>
 80014e8:	3218      	adds	r2, #24
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d00e      	beq.n	800150c <HAL_DMA_Abort+0x268>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80014f0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80014f2:	f003 021f 	and.w	r2, r3, #31
 80014f6:	2301      	movs	r3, #1
 80014f8:	4093      	lsls	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
 80014fc:	e00d      	b.n	800151a <HAL_DMA_Abort+0x276>
 80014fe:	bf00      	nop
 8001500:	40020010 	.word	0x40020010
 8001504:	40020028 	.word	0x40020028
 8001508:	58025408 	.word	0x58025408
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150c:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800150e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001510:	f003 021f 	and.w	r2, r3, #31
 8001514:	233f      	movs	r3, #63	; 0x3f
 8001516:	4093      	lsls	r3, r2
 8001518:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	492e      	ldr	r1, [pc, #184]	; (80015d8 <HAL_DMA_Abort+0x334>)
 800151e:	4a2f      	ldr	r2, [pc, #188]	; (80015dc <HAL_DMA_Abort+0x338>)
 8001520:	4293      	cmp	r3, r2
 8001522:	bf18      	it	ne
 8001524:	428b      	cmpne	r3, r1
 8001526:	d042      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 8001528:	3218      	adds	r2, #24
 800152a:	4293      	cmp	r3, r2
 800152c:	d03f      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 800152e:	3218      	adds	r2, #24
 8001530:	4293      	cmp	r3, r2
 8001532:	d03c      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 8001534:	3218      	adds	r2, #24
 8001536:	4293      	cmp	r3, r2
 8001538:	d039      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 800153a:	3218      	adds	r2, #24
 800153c:	4293      	cmp	r3, r2
 800153e:	d036      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 8001540:	3218      	adds	r2, #24
 8001542:	4293      	cmp	r3, r2
 8001544:	d033      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 8001546:	3218      	adds	r2, #24
 8001548:	4293      	cmp	r3, r2
 800154a:	d030      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 800154c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001550:	4293      	cmp	r3, r2
 8001552:	d02c      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 8001554:	3218      	adds	r2, #24
 8001556:	4293      	cmp	r3, r2
 8001558:	d029      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 800155a:	3218      	adds	r2, #24
 800155c:	4293      	cmp	r3, r2
 800155e:	d026      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 8001560:	3218      	adds	r2, #24
 8001562:	4293      	cmp	r3, r2
 8001564:	d023      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 8001566:	3218      	adds	r2, #24
 8001568:	4293      	cmp	r3, r2
 800156a:	d020      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 800156c:	3218      	adds	r2, #24
 800156e:	4293      	cmp	r3, r2
 8001570:	d01d      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 8001572:	3218      	adds	r2, #24
 8001574:	4293      	cmp	r3, r2
 8001576:	d01a      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 8001578:	3218      	adds	r2, #24
 800157a:	4293      	cmp	r3, r2
 800157c:	d017      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 800157e:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <HAL_DMA_Abort+0x33c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d014      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 8001584:	3214      	adds	r2, #20
 8001586:	4293      	cmp	r3, r2
 8001588:	d011      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 800158a:	3214      	adds	r2, #20
 800158c:	4293      	cmp	r3, r2
 800158e:	d00e      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 8001590:	3214      	adds	r2, #20
 8001592:	4293      	cmp	r3, r2
 8001594:	d00b      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 8001596:	3214      	adds	r2, #20
 8001598:	4293      	cmp	r3, r2
 800159a:	d008      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 800159c:	3214      	adds	r2, #20
 800159e:	4293      	cmp	r3, r2
 80015a0:	d005      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 80015a2:	3214      	adds	r2, #20
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d002      	beq.n	80015ae <HAL_DMA_Abort+0x30a>
 80015a8:	3214      	adds	r2, #20
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d10b      	bne.n	80015c6 <HAL_DMA_Abort+0x322>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015b0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80015b2:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80015b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80015b6:	b133      	cbz	r3, 80015c6 <HAL_DMA_Abort+0x322>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015be:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80015c2:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80015c4:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80015cc:	2301      	movs	r3, #1
 80015ce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80015d2:	e67a      	b.n	80012ca <HAL_DMA_Abort+0x26>
    return HAL_ERROR;
 80015d4:	2001      	movs	r0, #1
 80015d6:	e678      	b.n	80012ca <HAL_DMA_Abort+0x26>
 80015d8:	40020010 	.word	0x40020010
 80015dc:	40020028 	.word	0x40020028
 80015e0:	58025408 	.word	0x58025408

080015e4 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80015e4:	2800      	cmp	r0, #0
 80015e6:	f000 813a 	beq.w	800185e <HAL_DMA_Abort_IT+0x27a>
{
 80015ea:	b508      	push	{r3, lr}
 80015ec:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ee:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d003      	beq.n	8001600 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80015fc:	2001      	movs	r0, #1
}
 80015fe:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001600:	6803      	ldr	r3, [r0, #0]
 8001602:	4899      	ldr	r0, [pc, #612]	; (8001868 <HAL_DMA_Abort_IT+0x284>)
 8001604:	4999      	ldr	r1, [pc, #612]	; (800186c <HAL_DMA_Abort_IT+0x288>)
 8001606:	428b      	cmp	r3, r1
 8001608:	bf18      	it	ne
 800160a:	4283      	cmpne	r3, r0
 800160c:	bf0c      	ite	eq
 800160e:	2101      	moveq	r1, #1
 8001610:	2100      	movne	r1, #0
 8001612:	f000 80e4 	beq.w	80017de <HAL_DMA_Abort_IT+0x1fa>
 8001616:	3030      	adds	r0, #48	; 0x30
 8001618:	4283      	cmp	r3, r0
 800161a:	f000 80e0 	beq.w	80017de <HAL_DMA_Abort_IT+0x1fa>
 800161e:	3018      	adds	r0, #24
 8001620:	4283      	cmp	r3, r0
 8001622:	f000 80dc 	beq.w	80017de <HAL_DMA_Abort_IT+0x1fa>
 8001626:	3018      	adds	r0, #24
 8001628:	4283      	cmp	r3, r0
 800162a:	f000 80d8 	beq.w	80017de <HAL_DMA_Abort_IT+0x1fa>
 800162e:	3018      	adds	r0, #24
 8001630:	4283      	cmp	r3, r0
 8001632:	f000 80d4 	beq.w	80017de <HAL_DMA_Abort_IT+0x1fa>
 8001636:	3018      	adds	r0, #24
 8001638:	4283      	cmp	r3, r0
 800163a:	f000 80d0 	beq.w	80017de <HAL_DMA_Abort_IT+0x1fa>
 800163e:	3018      	adds	r0, #24
 8001640:	4283      	cmp	r3, r0
 8001642:	f000 80cc 	beq.w	80017de <HAL_DMA_Abort_IT+0x1fa>
 8001646:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800164a:	4283      	cmp	r3, r0
 800164c:	f000 80c7 	beq.w	80017de <HAL_DMA_Abort_IT+0x1fa>
 8001650:	3018      	adds	r0, #24
 8001652:	4283      	cmp	r3, r0
 8001654:	f000 80c3 	beq.w	80017de <HAL_DMA_Abort_IT+0x1fa>
 8001658:	3018      	adds	r0, #24
 800165a:	4283      	cmp	r3, r0
 800165c:	f000 80bf 	beq.w	80017de <HAL_DMA_Abort_IT+0x1fa>
 8001660:	3018      	adds	r0, #24
 8001662:	4283      	cmp	r3, r0
 8001664:	f000 80bb 	beq.w	80017de <HAL_DMA_Abort_IT+0x1fa>
 8001668:	3018      	adds	r0, #24
 800166a:	4283      	cmp	r3, r0
 800166c:	f000 80b7 	beq.w	80017de <HAL_DMA_Abort_IT+0x1fa>
 8001670:	3018      	adds	r0, #24
 8001672:	4283      	cmp	r3, r0
 8001674:	f000 80b3 	beq.w	80017de <HAL_DMA_Abort_IT+0x1fa>
 8001678:	3018      	adds	r0, #24
 800167a:	4283      	cmp	r3, r0
 800167c:	f000 80af 	beq.w	80017de <HAL_DMA_Abort_IT+0x1fa>
 8001680:	3018      	adds	r0, #24
 8001682:	4283      	cmp	r3, r0
 8001684:	f000 80ab 	beq.w	80017de <HAL_DMA_Abort_IT+0x1fa>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001688:	6819      	ldr	r1, [r3, #0]
 800168a:	f021 010e 	bic.w	r1, r1, #14
 800168e:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8001690:	6813      	ldr	r3, [r2, #0]
 8001692:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 8001696:	4975      	ldr	r1, [pc, #468]	; (800186c <HAL_DMA_Abort_IT+0x288>)
 8001698:	428b      	cmp	r3, r1
 800169a:	bf18      	it	ne
 800169c:	4283      	cmpne	r3, r0
 800169e:	d02b      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x114>
 80016a0:	4973      	ldr	r1, [pc, #460]	; (8001870 <HAL_DMA_Abort_IT+0x28c>)
 80016a2:	428b      	cmp	r3, r1
 80016a4:	d028      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x114>
 80016a6:	3118      	adds	r1, #24
 80016a8:	428b      	cmp	r3, r1
 80016aa:	d025      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x114>
 80016ac:	3118      	adds	r1, #24
 80016ae:	428b      	cmp	r3, r1
 80016b0:	d022      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x114>
 80016b2:	3118      	adds	r1, #24
 80016b4:	428b      	cmp	r3, r1
 80016b6:	d01f      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x114>
 80016b8:	3118      	adds	r1, #24
 80016ba:	428b      	cmp	r3, r1
 80016bc:	d01c      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x114>
 80016be:	3118      	adds	r1, #24
 80016c0:	428b      	cmp	r3, r1
 80016c2:	d019      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x114>
 80016c4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80016c8:	428b      	cmp	r3, r1
 80016ca:	d015      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x114>
 80016cc:	3118      	adds	r1, #24
 80016ce:	428b      	cmp	r3, r1
 80016d0:	d012      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x114>
 80016d2:	3118      	adds	r1, #24
 80016d4:	428b      	cmp	r3, r1
 80016d6:	d00f      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x114>
 80016d8:	3118      	adds	r1, #24
 80016da:	428b      	cmp	r3, r1
 80016dc:	d00c      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x114>
 80016de:	3118      	adds	r1, #24
 80016e0:	428b      	cmp	r3, r1
 80016e2:	d009      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x114>
 80016e4:	3118      	adds	r1, #24
 80016e6:	428b      	cmp	r3, r1
 80016e8:	d006      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x114>
 80016ea:	3118      	adds	r1, #24
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d003      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x114>
 80016f0:	3118      	adds	r1, #24
 80016f2:	428b      	cmp	r3, r1
 80016f4:	f040 80ae 	bne.w	8001854 <HAL_DMA_Abort_IT+0x270>
 80016f8:	6819      	ldr	r1, [r3, #0]
 80016fa:	f021 0101 	bic.w	r1, r1, #1
 80016fe:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001700:	6813      	ldr	r3, [r2, #0]
 8001702:	4859      	ldr	r0, [pc, #356]	; (8001868 <HAL_DMA_Abort_IT+0x284>)
 8001704:	4959      	ldr	r1, [pc, #356]	; (800186c <HAL_DMA_Abort_IT+0x288>)
 8001706:	428b      	cmp	r3, r1
 8001708:	bf18      	it	ne
 800170a:	4283      	cmpne	r3, r0
 800170c:	d042      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 800170e:	3118      	adds	r1, #24
 8001710:	428b      	cmp	r3, r1
 8001712:	d03f      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 8001714:	3118      	adds	r1, #24
 8001716:	428b      	cmp	r3, r1
 8001718:	d03c      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 800171a:	3118      	adds	r1, #24
 800171c:	428b      	cmp	r3, r1
 800171e:	d039      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 8001720:	3118      	adds	r1, #24
 8001722:	428b      	cmp	r3, r1
 8001724:	d036      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 8001726:	3118      	adds	r1, #24
 8001728:	428b      	cmp	r3, r1
 800172a:	d033      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 800172c:	3118      	adds	r1, #24
 800172e:	428b      	cmp	r3, r1
 8001730:	d030      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 8001732:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001736:	428b      	cmp	r3, r1
 8001738:	d02c      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 800173a:	3118      	adds	r1, #24
 800173c:	428b      	cmp	r3, r1
 800173e:	d029      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 8001740:	3118      	adds	r1, #24
 8001742:	428b      	cmp	r3, r1
 8001744:	d026      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 8001746:	3118      	adds	r1, #24
 8001748:	428b      	cmp	r3, r1
 800174a:	d023      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 800174c:	3118      	adds	r1, #24
 800174e:	428b      	cmp	r3, r1
 8001750:	d020      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 8001752:	3118      	adds	r1, #24
 8001754:	428b      	cmp	r3, r1
 8001756:	d01d      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 8001758:	3118      	adds	r1, #24
 800175a:	428b      	cmp	r3, r1
 800175c:	d01a      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 800175e:	3118      	adds	r1, #24
 8001760:	428b      	cmp	r3, r1
 8001762:	d017      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 8001764:	4943      	ldr	r1, [pc, #268]	; (8001874 <HAL_DMA_Abort_IT+0x290>)
 8001766:	428b      	cmp	r3, r1
 8001768:	d014      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 800176a:	3114      	adds	r1, #20
 800176c:	428b      	cmp	r3, r1
 800176e:	d011      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 8001770:	3114      	adds	r1, #20
 8001772:	428b      	cmp	r3, r1
 8001774:	d00e      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 8001776:	3114      	adds	r1, #20
 8001778:	428b      	cmp	r3, r1
 800177a:	d00b      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 800177c:	3114      	adds	r1, #20
 800177e:	428b      	cmp	r3, r1
 8001780:	d008      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 8001782:	3114      	adds	r1, #20
 8001784:	428b      	cmp	r3, r1
 8001786:	d005      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 8001788:	3114      	adds	r1, #20
 800178a:	428b      	cmp	r3, r1
 800178c:	d002      	beq.n	8001794 <HAL_DMA_Abort_IT+0x1b0>
 800178e:	3114      	adds	r1, #20
 8001790:	428b      	cmp	r3, r1
 8001792:	d117      	bne.n	80017c4 <HAL_DMA_Abort_IT+0x1e0>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001794:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001796:	680b      	ldr	r3, [r1, #0]
 8001798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800179c:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800179e:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80017a0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80017a2:	f003 011f 	and.w	r1, r3, #31
 80017a6:	2301      	movs	r3, #1
 80017a8:	408b      	lsls	r3, r1
 80017aa:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017ac:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80017ae:	6e91      	ldr	r1, [r2, #104]	; 0x68
 80017b0:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80017b2:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 80017b4:	b133      	cbz	r3, 80017c4 <HAL_DMA_Abort_IT+0x1e0>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017b6:	6819      	ldr	r1, [r3, #0]
 80017b8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80017bc:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017be:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80017c0:	6f51      	ldr	r1, [r2, #116]	; 0x74
 80017c2:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 80017c4:	2300      	movs	r3, #0
 80017c6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 80017d0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d045      	beq.n	8001862 <HAL_DMA_Abort_IT+0x27e>
 80017d6:	4610      	mov	r0, r2
        hdma->XferAbortCallback(hdma);
 80017d8:	4798      	blx	r3
  return HAL_OK;
 80017da:	2000      	movs	r0, #0
 80017dc:	e70f      	b.n	80015fe <HAL_DMA_Abort_IT+0x1a>
      hdma->State = HAL_DMA_STATE_ABORT;
 80017de:	2004      	movs	r0, #4
 80017e0:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80017e4:	bb81      	cbnz	r1, 8001848 <HAL_DMA_Abort_IT+0x264>
 80017e6:	4a22      	ldr	r2, [pc, #136]	; (8001870 <HAL_DMA_Abort_IT+0x28c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d02d      	beq.n	8001848 <HAL_DMA_Abort_IT+0x264>
 80017ec:	3218      	adds	r2, #24
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d02a      	beq.n	8001848 <HAL_DMA_Abort_IT+0x264>
 80017f2:	3218      	adds	r2, #24
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d027      	beq.n	8001848 <HAL_DMA_Abort_IT+0x264>
 80017f8:	3218      	adds	r2, #24
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d024      	beq.n	8001848 <HAL_DMA_Abort_IT+0x264>
 80017fe:	3218      	adds	r2, #24
 8001800:	4293      	cmp	r3, r2
 8001802:	d021      	beq.n	8001848 <HAL_DMA_Abort_IT+0x264>
 8001804:	3218      	adds	r2, #24
 8001806:	4293      	cmp	r3, r2
 8001808:	d01e      	beq.n	8001848 <HAL_DMA_Abort_IT+0x264>
 800180a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800180e:	4293      	cmp	r3, r2
 8001810:	d01a      	beq.n	8001848 <HAL_DMA_Abort_IT+0x264>
 8001812:	3218      	adds	r2, #24
 8001814:	4293      	cmp	r3, r2
 8001816:	d017      	beq.n	8001848 <HAL_DMA_Abort_IT+0x264>
 8001818:	3218      	adds	r2, #24
 800181a:	4293      	cmp	r3, r2
 800181c:	d014      	beq.n	8001848 <HAL_DMA_Abort_IT+0x264>
 800181e:	3218      	adds	r2, #24
 8001820:	4293      	cmp	r3, r2
 8001822:	d011      	beq.n	8001848 <HAL_DMA_Abort_IT+0x264>
 8001824:	3218      	adds	r2, #24
 8001826:	4293      	cmp	r3, r2
 8001828:	d00e      	beq.n	8001848 <HAL_DMA_Abort_IT+0x264>
 800182a:	3218      	adds	r2, #24
 800182c:	4293      	cmp	r3, r2
 800182e:	d00b      	beq.n	8001848 <HAL_DMA_Abort_IT+0x264>
 8001830:	3218      	adds	r2, #24
 8001832:	4293      	cmp	r3, r2
 8001834:	d008      	beq.n	8001848 <HAL_DMA_Abort_IT+0x264>
 8001836:	3218      	adds	r2, #24
 8001838:	4293      	cmp	r3, r2
 800183a:	d005      	beq.n	8001848 <HAL_DMA_Abort_IT+0x264>
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	f022 0201 	bic.w	r2, r2, #1
 8001842:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001844:	2000      	movs	r0, #0
 8001846:	e6da      	b.n	80015fe <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	f022 0201 	bic.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001850:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8001852:	e6d4      	b.n	80015fe <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8001854:	6819      	ldr	r1, [r3, #0]
 8001856:	f021 0101 	bic.w	r1, r1, #1
 800185a:	6019      	str	r1, [r3, #0]
 800185c:	e750      	b.n	8001700 <HAL_DMA_Abort_IT+0x11c>
    return HAL_ERROR;
 800185e:	2001      	movs	r0, #1
}
 8001860:	4770      	bx	lr
  return HAL_OK;
 8001862:	2000      	movs	r0, #0
 8001864:	e6cb      	b.n	80015fe <HAL_DMA_Abort_IT+0x1a>
 8001866:	bf00      	nop
 8001868:	40020010 	.word	0x40020010
 800186c:	40020028 	.word	0x40020028
 8001870:	40020040 	.word	0x40020040
 8001874:	58025408 	.word	0x58025408

08001878 <HAL_DMA_IRQHandler>:
{
 8001878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187a:	b083      	sub	sp, #12
 800187c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001882:	4ba2      	ldr	r3, [pc, #648]	; (8001b0c <HAL_DMA_IRQHandler+0x294>)
 8001884:	681d      	ldr	r5, [r3, #0]
 8001886:	4ba2      	ldr	r3, [pc, #648]	; (8001b10 <HAL_DMA_IRQHandler+0x298>)
 8001888:	fba3 3505 	umull	r3, r5, r3, r5
 800188c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800188e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 8001890:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8001892:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001896:	6803      	ldr	r3, [r0, #0]
 8001898:	499e      	ldr	r1, [pc, #632]	; (8001b14 <HAL_DMA_IRQHandler+0x29c>)
 800189a:	489f      	ldr	r0, [pc, #636]	; (8001b18 <HAL_DMA_IRQHandler+0x2a0>)
 800189c:	4283      	cmp	r3, r0
 800189e:	bf18      	it	ne
 80018a0:	428b      	cmpne	r3, r1
 80018a2:	bf0c      	ite	eq
 80018a4:	2001      	moveq	r0, #1
 80018a6:	2000      	movne	r0, #0
 80018a8:	d061      	beq.n	800196e <HAL_DMA_IRQHandler+0xf6>
 80018aa:	4a9c      	ldr	r2, [pc, #624]	; (8001b1c <HAL_DMA_IRQHandler+0x2a4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d05e      	beq.n	800196e <HAL_DMA_IRQHandler+0xf6>
 80018b0:	3218      	adds	r2, #24
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d05b      	beq.n	800196e <HAL_DMA_IRQHandler+0xf6>
 80018b6:	3218      	adds	r2, #24
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d058      	beq.n	800196e <HAL_DMA_IRQHandler+0xf6>
 80018bc:	3218      	adds	r2, #24
 80018be:	4293      	cmp	r3, r2
 80018c0:	d055      	beq.n	800196e <HAL_DMA_IRQHandler+0xf6>
 80018c2:	3218      	adds	r2, #24
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d052      	beq.n	800196e <HAL_DMA_IRQHandler+0xf6>
 80018c8:	3218      	adds	r2, #24
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d04f      	beq.n	800196e <HAL_DMA_IRQHandler+0xf6>
 80018ce:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d04b      	beq.n	800196e <HAL_DMA_IRQHandler+0xf6>
 80018d6:	3218      	adds	r2, #24
 80018d8:	4293      	cmp	r3, r2
 80018da:	d048      	beq.n	800196e <HAL_DMA_IRQHandler+0xf6>
 80018dc:	3218      	adds	r2, #24
 80018de:	4293      	cmp	r3, r2
 80018e0:	d045      	beq.n	800196e <HAL_DMA_IRQHandler+0xf6>
 80018e2:	3218      	adds	r2, #24
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d042      	beq.n	800196e <HAL_DMA_IRQHandler+0xf6>
 80018e8:	3218      	adds	r2, #24
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d03f      	beq.n	800196e <HAL_DMA_IRQHandler+0xf6>
 80018ee:	3218      	adds	r2, #24
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d03c      	beq.n	800196e <HAL_DMA_IRQHandler+0xf6>
 80018f4:	3218      	adds	r2, #24
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d039      	beq.n	800196e <HAL_DMA_IRQHandler+0xf6>
 80018fa:	3218      	adds	r2, #24
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d036      	beq.n	800196e <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001900:	4987      	ldr	r1, [pc, #540]	; (8001b20 <HAL_DMA_IRQHandler+0x2a8>)
 8001902:	4a88      	ldr	r2, [pc, #544]	; (8001b24 <HAL_DMA_IRQHandler+0x2ac>)
 8001904:	4293      	cmp	r3, r2
 8001906:	bf18      	it	ne
 8001908:	428b      	cmpne	r3, r1
 800190a:	d012      	beq.n	8001932 <HAL_DMA_IRQHandler+0xba>
 800190c:	4a86      	ldr	r2, [pc, #536]	; (8001b28 <HAL_DMA_IRQHandler+0x2b0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d00f      	beq.n	8001932 <HAL_DMA_IRQHandler+0xba>
 8001912:	3214      	adds	r2, #20
 8001914:	4293      	cmp	r3, r2
 8001916:	d00c      	beq.n	8001932 <HAL_DMA_IRQHandler+0xba>
 8001918:	3214      	adds	r2, #20
 800191a:	4293      	cmp	r3, r2
 800191c:	d009      	beq.n	8001932 <HAL_DMA_IRQHandler+0xba>
 800191e:	3214      	adds	r2, #20
 8001920:	4293      	cmp	r3, r2
 8001922:	d006      	beq.n	8001932 <HAL_DMA_IRQHandler+0xba>
 8001924:	3214      	adds	r2, #20
 8001926:	4293      	cmp	r3, r2
 8001928:	d003      	beq.n	8001932 <HAL_DMA_IRQHandler+0xba>
 800192a:	3214      	adds	r2, #20
 800192c:	4293      	cmp	r3, r2
 800192e:	f040 8262 	bne.w	8001df6 <HAL_DMA_IRQHandler+0x57e>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001932:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001934:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001936:	f001 011f 	and.w	r1, r1, #31
 800193a:	2004      	movs	r0, #4
 800193c:	4088      	lsls	r0, r1
 800193e:	ea10 0f0c 	tst.w	r0, ip
 8001942:	f000 82a8 	beq.w	8001e96 <HAL_DMA_IRQHandler+0x61e>
 8001946:	f012 0f04 	tst.w	r2, #4
 800194a:	f000 82a4 	beq.w	8001e96 <HAL_DMA_IRQHandler+0x61e>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800194e:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001950:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001954:	f000 825b 	beq.w	8001e0e <HAL_DMA_IRQHandler+0x596>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001958:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800195c:	f040 8251 	bne.w	8001e02 <HAL_DMA_IRQHandler+0x58a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001960:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 8247 	beq.w	8001df6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1HalfCpltCallback(hdma);
 8001968:	4620      	mov	r0, r4
 800196a:	4798      	blx	r3
 800196c:	e243      	b.n	8001df6 <HAL_DMA_IRQHandler+0x57e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800196e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001970:	f002 011f 	and.w	r1, r2, #31
 8001974:	2208      	movs	r2, #8
 8001976:	408a      	lsls	r2, r1
 8001978:	4232      	tst	r2, r6
 800197a:	d041      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800197c:	bb70      	cbnz	r0, 80019dc <HAL_DMA_IRQHandler+0x164>
 800197e:	4a67      	ldr	r2, [pc, #412]	; (8001b1c <HAL_DMA_IRQHandler+0x2a4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d02b      	beq.n	80019dc <HAL_DMA_IRQHandler+0x164>
 8001984:	3218      	adds	r2, #24
 8001986:	4293      	cmp	r3, r2
 8001988:	d028      	beq.n	80019dc <HAL_DMA_IRQHandler+0x164>
 800198a:	3218      	adds	r2, #24
 800198c:	4293      	cmp	r3, r2
 800198e:	d025      	beq.n	80019dc <HAL_DMA_IRQHandler+0x164>
 8001990:	3218      	adds	r2, #24
 8001992:	4293      	cmp	r3, r2
 8001994:	d022      	beq.n	80019dc <HAL_DMA_IRQHandler+0x164>
 8001996:	3218      	adds	r2, #24
 8001998:	4293      	cmp	r3, r2
 800199a:	d01f      	beq.n	80019dc <HAL_DMA_IRQHandler+0x164>
 800199c:	3218      	adds	r2, #24
 800199e:	4293      	cmp	r3, r2
 80019a0:	d01c      	beq.n	80019dc <HAL_DMA_IRQHandler+0x164>
 80019a2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d018      	beq.n	80019dc <HAL_DMA_IRQHandler+0x164>
 80019aa:	3218      	adds	r2, #24
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d015      	beq.n	80019dc <HAL_DMA_IRQHandler+0x164>
 80019b0:	3218      	adds	r2, #24
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d012      	beq.n	80019dc <HAL_DMA_IRQHandler+0x164>
 80019b6:	3218      	adds	r2, #24
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d00f      	beq.n	80019dc <HAL_DMA_IRQHandler+0x164>
 80019bc:	3218      	adds	r2, #24
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00c      	beq.n	80019dc <HAL_DMA_IRQHandler+0x164>
 80019c2:	3218      	adds	r2, #24
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d009      	beq.n	80019dc <HAL_DMA_IRQHandler+0x164>
 80019c8:	3218      	adds	r2, #24
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d006      	beq.n	80019dc <HAL_DMA_IRQHandler+0x164>
 80019ce:	3218      	adds	r2, #24
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d003      	beq.n	80019dc <HAL_DMA_IRQHandler+0x164>
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80019da:	e002      	b.n	80019e2 <HAL_DMA_IRQHandler+0x16a>
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80019e2:	b16a      	cbz	r2, 8001a00 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	f022 0204 	bic.w	r2, r2, #4
 80019ea:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80019ec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80019ee:	f003 021f 	and.w	r2, r3, #31
 80019f2:	2308      	movs	r3, #8
 80019f4:	4093      	lsls	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a00:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a02:	f002 021f 	and.w	r2, r2, #31
 8001a06:	fa26 f302 	lsr.w	r3, r6, r2
 8001a0a:	f013 0f01 	tst.w	r3, #1
 8001a0e:	d037      	beq.n	8001a80 <HAL_DMA_IRQHandler+0x208>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	4840      	ldr	r0, [pc, #256]	; (8001b14 <HAL_DMA_IRQHandler+0x29c>)
 8001a14:	4940      	ldr	r1, [pc, #256]	; (8001b18 <HAL_DMA_IRQHandler+0x2a0>)
 8001a16:	428b      	cmp	r3, r1
 8001a18:	bf18      	it	ne
 8001a1a:	4283      	cmpne	r3, r0
 8001a1c:	d02c      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x200>
 8001a1e:	3118      	adds	r1, #24
 8001a20:	428b      	cmp	r3, r1
 8001a22:	d029      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x200>
 8001a24:	3118      	adds	r1, #24
 8001a26:	428b      	cmp	r3, r1
 8001a28:	d026      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x200>
 8001a2a:	3118      	adds	r1, #24
 8001a2c:	428b      	cmp	r3, r1
 8001a2e:	d023      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x200>
 8001a30:	3118      	adds	r1, #24
 8001a32:	428b      	cmp	r3, r1
 8001a34:	d020      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x200>
 8001a36:	3118      	adds	r1, #24
 8001a38:	428b      	cmp	r3, r1
 8001a3a:	d01d      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x200>
 8001a3c:	3118      	adds	r1, #24
 8001a3e:	428b      	cmp	r3, r1
 8001a40:	d01a      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x200>
 8001a42:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001a46:	428b      	cmp	r3, r1
 8001a48:	d016      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x200>
 8001a4a:	3118      	adds	r1, #24
 8001a4c:	428b      	cmp	r3, r1
 8001a4e:	d013      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x200>
 8001a50:	3118      	adds	r1, #24
 8001a52:	428b      	cmp	r3, r1
 8001a54:	d010      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x200>
 8001a56:	3118      	adds	r1, #24
 8001a58:	428b      	cmp	r3, r1
 8001a5a:	d00d      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x200>
 8001a5c:	3118      	adds	r1, #24
 8001a5e:	428b      	cmp	r3, r1
 8001a60:	d00a      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x200>
 8001a62:	3118      	adds	r1, #24
 8001a64:	428b      	cmp	r3, r1
 8001a66:	d007      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x200>
 8001a68:	3118      	adds	r1, #24
 8001a6a:	428b      	cmp	r3, r1
 8001a6c:	d004      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x200>
 8001a6e:	3118      	adds	r1, #24
 8001a70:	428b      	cmp	r3, r1
 8001a72:	d001      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x200>
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	e003      	b.n	8001a80 <HAL_DMA_IRQHandler+0x208>
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a7e:	d13b      	bne.n	8001af8 <HAL_DMA_IRQHandler+0x280>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a80:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	2204      	movs	r2, #4
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	4233      	tst	r3, r6
 8001a8e:	d051      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001a90:	6822      	ldr	r2, [r4, #0]
 8001a92:	4820      	ldr	r0, [pc, #128]	; (8001b14 <HAL_DMA_IRQHandler+0x29c>)
 8001a94:	4920      	ldr	r1, [pc, #128]	; (8001b18 <HAL_DMA_IRQHandler+0x2a0>)
 8001a96:	428a      	cmp	r2, r1
 8001a98:	bf18      	it	ne
 8001a9a:	4282      	cmpne	r2, r0
 8001a9c:	d046      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2b4>
 8001a9e:	3118      	adds	r1, #24
 8001aa0:	428a      	cmp	r2, r1
 8001aa2:	d043      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2b4>
 8001aa4:	3118      	adds	r1, #24
 8001aa6:	428a      	cmp	r2, r1
 8001aa8:	d040      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2b4>
 8001aaa:	3118      	adds	r1, #24
 8001aac:	428a      	cmp	r2, r1
 8001aae:	d03d      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2b4>
 8001ab0:	3118      	adds	r1, #24
 8001ab2:	428a      	cmp	r2, r1
 8001ab4:	d03a      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2b4>
 8001ab6:	3118      	adds	r1, #24
 8001ab8:	428a      	cmp	r2, r1
 8001aba:	d037      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2b4>
 8001abc:	3118      	adds	r1, #24
 8001abe:	428a      	cmp	r2, r1
 8001ac0:	d034      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2b4>
 8001ac2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001ac6:	428a      	cmp	r2, r1
 8001ac8:	d030      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2b4>
 8001aca:	3118      	adds	r1, #24
 8001acc:	428a      	cmp	r2, r1
 8001ace:	d02d      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2b4>
 8001ad0:	3118      	adds	r1, #24
 8001ad2:	428a      	cmp	r2, r1
 8001ad4:	d02a      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2b4>
 8001ad6:	3118      	adds	r1, #24
 8001ad8:	428a      	cmp	r2, r1
 8001ada:	d027      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2b4>
 8001adc:	3118      	adds	r1, #24
 8001ade:	428a      	cmp	r2, r1
 8001ae0:	d024      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2b4>
 8001ae2:	3118      	adds	r1, #24
 8001ae4:	428a      	cmp	r2, r1
 8001ae6:	d021      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2b4>
 8001ae8:	3118      	adds	r1, #24
 8001aea:	428a      	cmp	r2, r1
 8001aec:	d01e      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2b4>
 8001aee:	3118      	adds	r1, #24
 8001af0:	428a      	cmp	r2, r1
 8001af2:	d01b      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2b4>
 8001af4:	6813      	ldr	r3, [r2, #0]
 8001af6:	e01d      	b.n	8001b34 <HAL_DMA_IRQHandler+0x2bc>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001af8:	2301      	movs	r3, #1
 8001afa:	fa03 f202 	lsl.w	r2, r3, r2
 8001afe:	60ba      	str	r2, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b02:	f043 0302 	orr.w	r3, r3, #2
 8001b06:	6563      	str	r3, [r4, #84]	; 0x54
 8001b08:	e7ba      	b.n	8001a80 <HAL_DMA_IRQHandler+0x208>
 8001b0a:	bf00      	nop
 8001b0c:	20000190 	.word	0x20000190
 8001b10:	1b4e81b5 	.word	0x1b4e81b5
 8001b14:	40020010 	.word	0x40020010
 8001b18:	40020028 	.word	0x40020028
 8001b1c:	40020040 	.word	0x40020040
 8001b20:	58025408 	.word	0x58025408
 8001b24:	5802541c 	.word	0x5802541c
 8001b28:	58025430 	.word	0x58025430
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	f012 0f02 	tst.w	r2, #2
 8001b32:	d13d      	bne.n	8001bb0 <HAL_DMA_IRQHandler+0x338>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b34:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2210      	movs	r2, #16
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	4233      	tst	r3, r6
 8001b42:	d05f      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x38c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001b44:	6822      	ldr	r2, [r4, #0]
 8001b46:	489b      	ldr	r0, [pc, #620]	; (8001db4 <HAL_DMA_IRQHandler+0x53c>)
 8001b48:	499b      	ldr	r1, [pc, #620]	; (8001db8 <HAL_DMA_IRQHandler+0x540>)
 8001b4a:	428a      	cmp	r2, r1
 8001b4c:	bf18      	it	ne
 8001b4e:	4282      	cmpne	r2, r0
 8001b50:	d034      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x344>
 8001b52:	3118      	adds	r1, #24
 8001b54:	428a      	cmp	r2, r1
 8001b56:	d031      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x344>
 8001b58:	3118      	adds	r1, #24
 8001b5a:	428a      	cmp	r2, r1
 8001b5c:	d02e      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x344>
 8001b5e:	3118      	adds	r1, #24
 8001b60:	428a      	cmp	r2, r1
 8001b62:	d02b      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x344>
 8001b64:	3118      	adds	r1, #24
 8001b66:	428a      	cmp	r2, r1
 8001b68:	d028      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x344>
 8001b6a:	3118      	adds	r1, #24
 8001b6c:	428a      	cmp	r2, r1
 8001b6e:	d025      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x344>
 8001b70:	3118      	adds	r1, #24
 8001b72:	428a      	cmp	r2, r1
 8001b74:	d022      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x344>
 8001b76:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001b7a:	428a      	cmp	r2, r1
 8001b7c:	d01e      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x344>
 8001b7e:	3118      	adds	r1, #24
 8001b80:	428a      	cmp	r2, r1
 8001b82:	d01b      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x344>
 8001b84:	3118      	adds	r1, #24
 8001b86:	428a      	cmp	r2, r1
 8001b88:	d018      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x344>
 8001b8a:	3118      	adds	r1, #24
 8001b8c:	428a      	cmp	r2, r1
 8001b8e:	d015      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x344>
 8001b90:	3118      	adds	r1, #24
 8001b92:	428a      	cmp	r2, r1
 8001b94:	d012      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x344>
 8001b96:	3118      	adds	r1, #24
 8001b98:	428a      	cmp	r2, r1
 8001b9a:	d00f      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x344>
 8001b9c:	3118      	adds	r1, #24
 8001b9e:	428a      	cmp	r2, r1
 8001ba0:	d00c      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x344>
 8001ba2:	3118      	adds	r1, #24
 8001ba4:	428a      	cmp	r2, r1
 8001ba6:	d009      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x344>
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001bae:	e008      	b.n	8001bc2 <HAL_DMA_IRQHandler+0x34a>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001bb0:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bb2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	6563      	str	r3, [r4, #84]	; 0x54
 8001bba:	e7bb      	b.n	8001b34 <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8001bc2:	b1fa      	cbz	r2, 8001c04 <HAL_DMA_IRQHandler+0x38c>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001bc4:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001bc6:	6823      	ldr	r3, [r4, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001bce:	d00d      	beq.n	8001bec <HAL_DMA_IRQHandler+0x374>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001bd6:	d104      	bne.n	8001be2 <HAL_DMA_IRQHandler+0x36a>
            if(hdma->XferHalfCpltCallback != NULL)
 8001bd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bda:	b19b      	cbz	r3, 8001c04 <HAL_DMA_IRQHandler+0x38c>
              hdma->XferHalfCpltCallback(hdma);
 8001bdc:	4620      	mov	r0, r4
 8001bde:	4798      	blx	r3
 8001be0:	e010      	b.n	8001c04 <HAL_DMA_IRQHandler+0x38c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001be2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001be4:	b173      	cbz	r3, 8001c04 <HAL_DMA_IRQHandler+0x38c>
              hdma->XferM1HalfCpltCallback(hdma);
 8001be6:	4620      	mov	r0, r4
 8001be8:	4798      	blx	r3
 8001bea:	e00b      	b.n	8001c04 <HAL_DMA_IRQHandler+0x38c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001bf2:	d103      	bne.n	8001bfc <HAL_DMA_IRQHandler+0x384>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	f022 0208 	bic.w	r2, r2, #8
 8001bfa:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8001bfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bfe:	b10b      	cbz	r3, 8001c04 <HAL_DMA_IRQHandler+0x38c>
            hdma->XferHalfCpltCallback(hdma);
 8001c00:	4620      	mov	r0, r4
 8001c02:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001c04:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	4233      	tst	r3, r6
 8001c12:	f000 808e 	beq.w	8001d32 <HAL_DMA_IRQHandler+0x4ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001c16:	6822      	ldr	r2, [r4, #0]
 8001c18:	4866      	ldr	r0, [pc, #408]	; (8001db4 <HAL_DMA_IRQHandler+0x53c>)
 8001c1a:	4967      	ldr	r1, [pc, #412]	; (8001db8 <HAL_DMA_IRQHandler+0x540>)
 8001c1c:	428a      	cmp	r2, r1
 8001c1e:	bf18      	it	ne
 8001c20:	4282      	cmpne	r2, r0
 8001c22:	d02e      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x40a>
 8001c24:	3118      	adds	r1, #24
 8001c26:	428a      	cmp	r2, r1
 8001c28:	d02b      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x40a>
 8001c2a:	3118      	adds	r1, #24
 8001c2c:	428a      	cmp	r2, r1
 8001c2e:	d028      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x40a>
 8001c30:	3118      	adds	r1, #24
 8001c32:	428a      	cmp	r2, r1
 8001c34:	d025      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x40a>
 8001c36:	3118      	adds	r1, #24
 8001c38:	428a      	cmp	r2, r1
 8001c3a:	d022      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x40a>
 8001c3c:	3118      	adds	r1, #24
 8001c3e:	428a      	cmp	r2, r1
 8001c40:	d01f      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x40a>
 8001c42:	3118      	adds	r1, #24
 8001c44:	428a      	cmp	r2, r1
 8001c46:	d01c      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x40a>
 8001c48:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8001c4c:	428a      	cmp	r2, r1
 8001c4e:	d018      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x40a>
 8001c50:	3118      	adds	r1, #24
 8001c52:	428a      	cmp	r2, r1
 8001c54:	d015      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x40a>
 8001c56:	3118      	adds	r1, #24
 8001c58:	428a      	cmp	r2, r1
 8001c5a:	d012      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x40a>
 8001c5c:	3118      	adds	r1, #24
 8001c5e:	428a      	cmp	r2, r1
 8001c60:	d00f      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x40a>
 8001c62:	3118      	adds	r1, #24
 8001c64:	428a      	cmp	r2, r1
 8001c66:	d00c      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x40a>
 8001c68:	3118      	adds	r1, #24
 8001c6a:	428a      	cmp	r2, r1
 8001c6c:	d009      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x40a>
 8001c6e:	3118      	adds	r1, #24
 8001c70:	428a      	cmp	r2, r1
 8001c72:	d006      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x40a>
 8001c74:	3118      	adds	r1, #24
 8001c76:	428a      	cmp	r2, r1
 8001c78:	d003      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x40a>
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001c80:	e002      	b.n	8001c88 <HAL_DMA_IRQHandler+0x410>
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001c88:	2a00      	cmp	r2, #0
 8001c8a:	d052      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x4ba>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c8c:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c8e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d00e      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x43e>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001ca0:	d035      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x496>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001ca8:	d12c      	bne.n	8001d04 <HAL_DMA_IRQHandler+0x48c>
            if(hdma->XferM1CpltCallback != NULL)
 8001caa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d040      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferM1CpltCallback(hdma);
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	4798      	blx	r3
 8001cb4:	e03d      	b.n	8001d32 <HAL_DMA_IRQHandler+0x4ba>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cb6:	6822      	ldr	r2, [r4, #0]
 8001cb8:	6813      	ldr	r3, [r2, #0]
 8001cba:	f023 0316 	bic.w	r3, r3, #22
 8001cbe:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001cc0:	6822      	ldr	r2, [r4, #0]
 8001cc2:	6953      	ldr	r3, [r2, #20]
 8001cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cc8:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ccc:	b1b3      	cbz	r3, 8001cfc <HAL_DMA_IRQHandler+0x484>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001cce:	6822      	ldr	r2, [r4, #0]
 8001cd0:	6813      	ldr	r3, [r2, #0]
 8001cd2:	f023 0308 	bic.w	r3, r3, #8
 8001cd6:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cd8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001cda:	f003 021f 	and.w	r2, r3, #31
 8001cde:	233f      	movs	r3, #63	; 0x3f
 8001ce0:	4093      	lsls	r3, r2
 8001ce2:	60bb      	str	r3, [r7, #8]
          __HAL_UNLOCK(hdma);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001cea:	2301      	movs	r3, #1
 8001cec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8001cf0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d07f      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferAbortCallback(hdma);
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	4798      	blx	r3
 8001cfa:	e07c      	b.n	8001df6 <HAL_DMA_IRQHandler+0x57e>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cfc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1e5      	bne.n	8001cce <HAL_DMA_IRQHandler+0x456>
 8001d02:	e7e9      	b.n	8001cd8 <HAL_DMA_IRQHandler+0x460>
            if(hdma->XferCpltCallback != NULL)
 8001d04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d06:	b1a3      	cbz	r3, 8001d32 <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferCpltCallback(hdma);
 8001d08:	4620      	mov	r0, r4
 8001d0a:	4798      	blx	r3
 8001d0c:	e011      	b.n	8001d32 <HAL_DMA_IRQHandler+0x4ba>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001d14:	d109      	bne.n	8001d2a <HAL_DMA_IRQHandler+0x4b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	f022 0210 	bic.w	r2, r2, #16
 8001d1c:	601a      	str	r2, [r3, #0]
            __HAL_UNLOCK(hdma);
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8001d24:	2301      	movs	r3, #1
 8001d26:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 8001d2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d2c:	b10b      	cbz	r3, 8001d32 <HAL_DMA_IRQHandler+0x4ba>
            hdma->XferCpltCallback(hdma);
 8001d2e:	4620      	mov	r0, r4
 8001d30:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d32:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d05e      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x57e>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001d38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d3a:	f013 0f01 	tst.w	r3, #1
 8001d3e:	d056      	beq.n	8001dee <HAL_DMA_IRQHandler+0x576>
        hdma->State = HAL_DMA_STATE_ABORT;
 8001d40:	2304      	movs	r3, #4
 8001d42:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	491a      	ldr	r1, [pc, #104]	; (8001db4 <HAL_DMA_IRQHandler+0x53c>)
 8001d4a:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <HAL_DMA_IRQHandler+0x540>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	bf18      	it	ne
 8001d50:	428b      	cmpne	r3, r1
 8001d52:	d033      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x544>
 8001d54:	3218      	adds	r2, #24
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d030      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x544>
 8001d5a:	3218      	adds	r2, #24
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d02d      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x544>
 8001d60:	3218      	adds	r2, #24
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d02a      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x544>
 8001d66:	3218      	adds	r2, #24
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d027      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x544>
 8001d6c:	3218      	adds	r2, #24
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d024      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x544>
 8001d72:	3218      	adds	r2, #24
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d021      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x544>
 8001d78:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d01d      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x544>
 8001d80:	3218      	adds	r2, #24
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d01a      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x544>
 8001d86:	3218      	adds	r2, #24
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d017      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x544>
 8001d8c:	3218      	adds	r2, #24
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d014      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x544>
 8001d92:	3218      	adds	r2, #24
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d011      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x544>
 8001d98:	3218      	adds	r2, #24
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00e      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x544>
 8001d9e:	3218      	adds	r2, #24
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d00b      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x544>
 8001da4:	3218      	adds	r2, #24
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d008      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x544>
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	f022 0201 	bic.w	r2, r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	e007      	b.n	8001dc4 <HAL_DMA_IRQHandler+0x54c>
 8001db4:	40020010 	.word	0x40020010
 8001db8:	40020028 	.word	0x40020028
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8001dc4:	9b01      	ldr	r3, [sp, #4]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	42ab      	cmp	r3, r5
 8001dcc:	d804      	bhi.n	8001dd8 <HAL_DMA_IRQHandler+0x560>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f013 0f01 	tst.w	r3, #1
 8001dd6:	d1f5      	bne.n	8001dc4 <HAL_DMA_IRQHandler+0x54c>
        __HAL_UNLOCK(hdma);
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f013 0f01 	tst.w	r3, #1
 8001de6:	d008      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x582>
          hdma->State = HAL_DMA_STATE_ERROR;
 8001de8:	2303      	movs	r3, #3
 8001dea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8001dee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001df0:	b10b      	cbz	r3, 8001df6 <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 8001df2:	4620      	mov	r0, r4
 8001df4:	4798      	blx	r3
}
 8001df6:	b003      	add	sp, #12
 8001df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8001e00:	e7f5      	b.n	8001dee <HAL_DMA_IRQHandler+0x576>
          if(hdma->XferHalfCpltCallback != NULL)
 8001e02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f6      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferHalfCpltCallback(hdma);
 8001e08:	4620      	mov	r0, r4
 8001e0a:	4798      	blx	r3
 8001e0c:	e7f3      	b.n	8001df6 <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001e0e:	f012 0f20 	tst.w	r2, #32
 8001e12:	d135      	bne.n	8001e80 <HAL_DMA_IRQHandler+0x608>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	4964      	ldr	r1, [pc, #400]	; (8001fa8 <HAL_DMA_IRQHandler+0x730>)
 8001e18:	4a64      	ldr	r2, [pc, #400]	; (8001fac <HAL_DMA_IRQHandler+0x734>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	bf18      	it	ne
 8001e1e:	428b      	cmpne	r3, r1
 8001e20:	d02a      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x600>
 8001e22:	3218      	adds	r2, #24
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d027      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x600>
 8001e28:	3218      	adds	r2, #24
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d024      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x600>
 8001e2e:	3218      	adds	r2, #24
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d021      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x600>
 8001e34:	3218      	adds	r2, #24
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d01e      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x600>
 8001e3a:	3218      	adds	r2, #24
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d01b      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x600>
 8001e40:	3218      	adds	r2, #24
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d018      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x600>
 8001e46:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d014      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x600>
 8001e4e:	3218      	adds	r2, #24
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d011      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x600>
 8001e54:	3218      	adds	r2, #24
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00e      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x600>
 8001e5a:	3218      	adds	r2, #24
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00b      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x600>
 8001e60:	3218      	adds	r2, #24
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d008      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x600>
 8001e66:	3218      	adds	r2, #24
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d005      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x600>
 8001e6c:	3218      	adds	r2, #24
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d002      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x600>
 8001e72:	3218      	adds	r2, #24
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d109      	bne.n	8001e8c <HAL_DMA_IRQHandler+0x614>
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	f022 0208 	bic.w	r2, r2, #8
 8001e7e:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8001e80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0b7      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x57e>
          hdma->XferHalfCpltCallback(hdma);
 8001e86:	4620      	mov	r0, r4
 8001e88:	4798      	blx	r3
 8001e8a:	e7b4      	b.n	8001df6 <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	f022 0204 	bic.w	r2, r2, #4
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e7f4      	b.n	8001e80 <HAL_DMA_IRQHandler+0x608>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8001e96:	2002      	movs	r0, #2
 8001e98:	4088      	lsls	r0, r1
 8001e9a:	ea10 0f0c 	tst.w	r0, ip
 8001e9e:	d060      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x6ea>
 8001ea0:	f012 0f02 	tst.w	r2, #2
 8001ea4:	d05d      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x6ea>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8001ea6:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001ea8:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001eac:	d00e      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x654>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001eae:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001eb2:	d105      	bne.n	8001ec0 <HAL_DMA_IRQHandler+0x648>
          if(hdma->XferM1CpltCallback != NULL)
 8001eb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d09d      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1CpltCallback(hdma);
 8001eba:	4620      	mov	r0, r4
 8001ebc:	4798      	blx	r3
 8001ebe:	e79a      	b.n	8001df6 <HAL_DMA_IRQHandler+0x57e>
          if(hdma->XferCpltCallback != NULL)
 8001ec0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d097      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferCpltCallback(hdma);
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	4798      	blx	r3
 8001eca:	e794      	b.n	8001df6 <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001ecc:	f012 0f20 	tst.w	r2, #32
 8001ed0:	d13b      	bne.n	8001f4a <HAL_DMA_IRQHandler+0x6d2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	4934      	ldr	r1, [pc, #208]	; (8001fa8 <HAL_DMA_IRQHandler+0x730>)
 8001ed6:	4a35      	ldr	r2, [pc, #212]	; (8001fac <HAL_DMA_IRQHandler+0x734>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	bf18      	it	ne
 8001edc:	428b      	cmpne	r3, r1
 8001ede:	d02a      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x6be>
 8001ee0:	3218      	adds	r2, #24
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d027      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x6be>
 8001ee6:	3218      	adds	r2, #24
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d024      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x6be>
 8001eec:	3218      	adds	r2, #24
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d021      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x6be>
 8001ef2:	3218      	adds	r2, #24
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d01e      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x6be>
 8001ef8:	3218      	adds	r2, #24
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01b      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x6be>
 8001efe:	3218      	adds	r2, #24
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d018      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x6be>
 8001f04:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d014      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x6be>
 8001f0c:	3218      	adds	r2, #24
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d011      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x6be>
 8001f12:	3218      	adds	r2, #24
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d00e      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x6be>
 8001f18:	3218      	adds	r2, #24
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00b      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x6be>
 8001f1e:	3218      	adds	r2, #24
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d008      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x6be>
 8001f24:	3218      	adds	r2, #24
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d005      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x6be>
 8001f2a:	3218      	adds	r2, #24
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d002      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x6be>
 8001f30:	3218      	adds	r2, #24
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d110      	bne.n	8001f58 <HAL_DMA_IRQHandler+0x6e0>
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	f022 0214 	bic.w	r2, r2, #20
 8001f3c:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001f44:	2301      	movs	r3, #1
 8001f46:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001f4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f43f af52 	beq.w	8001df6 <HAL_DMA_IRQHandler+0x57e>
          hdma->XferCpltCallback(hdma);
 8001f52:	4620      	mov	r0, r4
 8001f54:	4798      	blx	r3
 8001f56:	e74e      	b.n	8001df6 <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	f022 020a 	bic.w	r2, r2, #10
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	e7ed      	b.n	8001f3e <HAL_DMA_IRQHandler+0x6c6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8001f62:	2008      	movs	r0, #8
 8001f64:	fa00 f101 	lsl.w	r1, r0, r1
 8001f68:	ea11 0f0c 	tst.w	r1, ip
 8001f6c:	f43f af43 	beq.w	8001df6 <HAL_DMA_IRQHandler+0x57e>
 8001f70:	f012 0f08 	tst.w	r2, #8
 8001f74:	f43f af3f 	beq.w	8001df6 <HAL_DMA_IRQHandler+0x57e>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	f022 020e 	bic.w	r2, r2, #14
 8001f7e:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001f80:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	2201      	movs	r2, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f8e:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8001f90:	2300      	movs	r3, #0
 8001f92:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001f96:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8001f9a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f43f af2a 	beq.w	8001df6 <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	4798      	blx	r3
 8001fa6:	e726      	b.n	8001df6 <HAL_DMA_IRQHandler+0x57e>
 8001fa8:	40020010 	.word	0x40020010
 8001fac:	40020028 	.word	0x40020028

08001fb0 <HAL_DMA_GetState>:
  return hdma->State;
 8001fb0:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001fb6:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8001fb8:	4770      	bx	lr

08001fba <HAL_FLASH_EndOfOperationCallback>:
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8001fba:	4770      	bx	lr

08001fbc <HAL_FLASH_OperationErrorCallback>:
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8001fbc:	4770      	bx	lr
	...

08001fc0 <HAL_FLASH_IRQHandler>:
{
 8001fc0:	b510      	push	{r4, lr}
  if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_SR_EOP) != RESET)
 8001fc2:	4b7b      	ldr	r3, [pc, #492]	; (80021b0 <HAL_FLASH_IRQHandler+0x1f0>)
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001fca:	d018      	beq.n	8001ffe <HAL_FLASH_IRQHandler+0x3e>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK1)
 8001fcc:	4b79      	ldr	r3, [pc, #484]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d04a      	beq.n	800206c <HAL_FLASH_IRQHandler+0xac>
      procedure = pFlash.ProcedureOnGoing;
 8001fd6:	4b77      	ldr	r3, [pc, #476]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 8001fd8:	781c      	ldrb	r4, [r3, #0]
 8001fda:	b2e4      	uxtb	r4, r4
      if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 8001fdc:	2c07      	cmp	r4, #7
 8001fde:	bf18      	it	ne
 8001fe0:	2c02      	cmpne	r4, #2
 8001fe2:	d068      	beq.n	80020b6 <HAL_FLASH_IRQHandler+0xf6>
      else if(procedure == FLASH_PROC_PROGRAM_BANK1)
 8001fe4:	2c03      	cmp	r4, #3
 8001fe6:	d06a      	beq.n	80020be <HAL_FLASH_IRQHandler+0xfe>
         (procedure != FLASH_PROC_MASSERASE_BANK2) && \
 8001fe8:	3c04      	subs	r4, #4
 8001fea:	b2e4      	uxtb	r4, r4
      if((procedure != FLASH_PROC_SECTERASE_BANK2) && \
 8001fec:	2c02      	cmp	r4, #2
 8001fee:	d906      	bls.n	8001ffe <HAL_FLASH_IRQHandler+0x3e>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001ff0:	4b70      	ldr	r3, [pc, #448]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8001ff6:	4b6e      	ldr	r3, [pc, #440]	; (80021b0 <HAL_FLASH_IRQHandler+0x1f0>)
 8001ff8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ffc:	615a      	str	r2, [r3, #20]
  if(__HAL_FLASH_GET_FLAG_BANK2(FLASH_SR_EOP) != RESET)
 8001ffe:	4b6c      	ldr	r3, [pc, #432]	; (80021b0 <HAL_FLASH_IRQHandler+0x1f0>)
 8002000:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002004:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002008:	d019      	beq.n	800203e <HAL_FLASH_IRQHandler+0x7e>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK2)
 800200a:	4b6a      	ldr	r3, [pc, #424]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b04      	cmp	r3, #4
 8002012:	d059      	beq.n	80020c8 <HAL_FLASH_IRQHandler+0x108>
      procedure = pFlash.ProcedureOnGoing;
 8002014:	4b67      	ldr	r3, [pc, #412]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 8002016:	781c      	ldrb	r4, [r3, #0]
 8002018:	b2e4      	uxtb	r4, r4
      if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800201a:	2c07      	cmp	r4, #7
 800201c:	bf18      	it	ne
 800201e:	2c05      	cmpne	r4, #5
 8002020:	d079      	beq.n	8002116 <HAL_FLASH_IRQHandler+0x156>
      else if(procedure == FLASH_PROC_PROGRAM_BANK2)
 8002022:	2c06      	cmp	r4, #6
 8002024:	d07b      	beq.n	800211e <HAL_FLASH_IRQHandler+0x15e>
         (procedure != FLASH_PROC_MASSERASE_BANK1) && \
 8002026:	3c01      	subs	r4, #1
 8002028:	b2e4      	uxtb	r4, r4
      if((procedure != FLASH_PROC_SECTERASE_BANK1) && \
 800202a:	2c02      	cmp	r4, #2
 800202c:	d907      	bls.n	800203e <HAL_FLASH_IRQHandler+0x7e>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800202e:	4b61      	ldr	r3, [pc, #388]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8002034:	4b5e      	ldr	r3, [pc, #376]	; (80021b0 <HAL_FLASH_IRQHandler+0x1f0>)
 8002036:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800203a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
 800203e:	4b5c      	ldr	r3, [pc, #368]	; (80021b0 <HAL_FLASH_IRQHandler+0x1f0>)
 8002040:	691b      	ldr	r3, [r3, #16]
  if(errorflag != 0U)
 8002042:	f413 03dc 	ands.w	r3, r3, #7208960	; 0x6e0000
 8002046:	d079      	beq.n	800213c <HAL_FLASH_IRQHandler+0x17c>
    pFlash.ErrorCode |= errorflag;
 8002048:	4a5a      	ldr	r2, [pc, #360]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 800204a:	6991      	ldr	r1, [r2, #24]
 800204c:	4319      	orrs	r1, r3
 800204e:	6191      	str	r1, [r2, #24]
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
 8002050:	4957      	ldr	r1, [pc, #348]	; (80021b0 <HAL_FLASH_IRQHandler+0x1f0>)
 8002052:	614b      	str	r3, [r1, #20]
    procedure = pFlash.ProcedureOnGoing;
 8002054:	7813      	ldrb	r3, [r2, #0]
 8002056:	b2db      	uxtb	r3, r3
    if(procedure == FLASH_PROC_SECTERASE_BANK1)
 8002058:	2b01      	cmp	r3, #1
 800205a:	d065      	beq.n	8002128 <HAL_FLASH_IRQHandler+0x168>
    else if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800205c:	2b07      	cmp	r3, #7
 800205e:	bf18      	it	ne
 8002060:	2b02      	cmpne	r3, #2
 8002062:	f000 8085 	beq.w	8002170 <HAL_FLASH_IRQHandler+0x1b0>
      temp = pFlash.Address;
 8002066:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 8002068:	6918      	ldr	r0, [r3, #16]
 800206a:	e062      	b.n	8002132 <HAL_FLASH_IRQHandler+0x172>
      pFlash.NbSectorsToErase--;
 800206c:	4b51      	ldr	r3, [pc, #324]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	3a01      	subs	r2, #1
 8002072:	605a      	str	r2, [r3, #4]
      if(pFlash.NbSectorsToErase != 0U)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	b183      	cbz	r3, 800209a <HAL_FLASH_IRQHandler+0xda>
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 8002078:	4c4e      	ldr	r4, [pc, #312]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 800207a:	68e0      	ldr	r0, [r4, #12]
 800207c:	f7ff ff9d 	bl	8001fba <HAL_FLASH_EndOfOperationCallback>
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8002080:	4b4b      	ldr	r3, [pc, #300]	; (80021b0 <HAL_FLASH_IRQHandler+0x1f0>)
 8002082:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002086:	615a      	str	r2, [r3, #20]
        pFlash.Sector++;
 8002088:	68e3      	ldr	r3, [r4, #12]
 800208a:	3301      	adds	r3, #1
 800208c:	60e3      	str	r3, [r4, #12]
        temp = pFlash.Sector;
 800208e:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_1, pFlash.VoltageForErase);
 8002090:	68a2      	ldr	r2, [r4, #8]
 8002092:	2101      	movs	r1, #1
 8002094:	f000 f890 	bl	80021b8 <FLASH_Erase_Sector>
 8002098:	e7b1      	b.n	8001ffe <HAL_FLASH_IRQHandler+0x3e>
        pFlash.Sector = 0xFFFFFFFFU;
 800209a:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 800209c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020a0:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 80020a6:	68d8      	ldr	r0, [r3, #12]
 80020a8:	f7ff ff87 	bl	8001fba <HAL_FLASH_EndOfOperationCallback>
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 80020ac:	4b40      	ldr	r3, [pc, #256]	; (80021b0 <HAL_FLASH_IRQHandler+0x1f0>)
 80020ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020b2:	615a      	str	r2, [r3, #20]
 80020b4:	e7a3      	b.n	8001ffe <HAL_FLASH_IRQHandler+0x3e>
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_1);
 80020b6:	2001      	movs	r0, #1
 80020b8:	f7ff ff7f 	bl	8001fba <HAL_FLASH_EndOfOperationCallback>
 80020bc:	e794      	b.n	8001fe8 <HAL_FLASH_IRQHandler+0x28>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80020be:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 80020c0:	6918      	ldr	r0, [r3, #16]
 80020c2:	f7ff ff7a 	bl	8001fba <HAL_FLASH_EndOfOperationCallback>
 80020c6:	e78f      	b.n	8001fe8 <HAL_FLASH_IRQHandler+0x28>
      pFlash.NbSectorsToErase--;
 80020c8:	4b3a      	ldr	r3, [pc, #232]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	3a01      	subs	r2, #1
 80020ce:	605a      	str	r2, [r3, #4]
      if(pFlash.NbSectorsToErase != 0U)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	b18b      	cbz	r3, 80020f8 <HAL_FLASH_IRQHandler+0x138>
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 80020d4:	4c37      	ldr	r4, [pc, #220]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 80020d6:	68e0      	ldr	r0, [r4, #12]
 80020d8:	f7ff ff6f 	bl	8001fba <HAL_FLASH_EndOfOperationCallback>
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 80020dc:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <HAL_FLASH_IRQHandler+0x1f0>)
 80020de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020e2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        pFlash.Sector++;
 80020e6:	68e3      	ldr	r3, [r4, #12]
 80020e8:	3301      	adds	r3, #1
 80020ea:	60e3      	str	r3, [r4, #12]
        temp = pFlash.Sector;
 80020ec:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_2, pFlash.VoltageForErase);
 80020ee:	68a2      	ldr	r2, [r4, #8]
 80020f0:	2102      	movs	r1, #2
 80020f2:	f000 f861 	bl	80021b8 <FLASH_Erase_Sector>
 80020f6:	e7a2      	b.n	800203e <HAL_FLASH_IRQHandler+0x7e>
        pFlash.Sector = 0xFFFFFFFFU;
 80020f8:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 80020fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020fe:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 8002104:	68d8      	ldr	r0, [r3, #12]
 8002106:	f7ff ff58 	bl	8001fba <HAL_FLASH_EndOfOperationCallback>
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800210a:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <HAL_FLASH_IRQHandler+0x1f0>)
 800210c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002110:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8002114:	e793      	b.n	800203e <HAL_FLASH_IRQHandler+0x7e>
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_2);
 8002116:	2002      	movs	r0, #2
 8002118:	f7ff ff4f 	bl	8001fba <HAL_FLASH_EndOfOperationCallback>
 800211c:	e783      	b.n	8002026 <HAL_FLASH_IRQHandler+0x66>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800211e:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 8002120:	6918      	ldr	r0, [r3, #16]
 8002122:	f7ff ff4a 	bl	8001fba <HAL_FLASH_EndOfOperationCallback>
 8002126:	e77e      	b.n	8002026 <HAL_FLASH_IRQHandler+0x66>
      temp = pFlash.Sector;
 8002128:	4613      	mov	r3, r2
 800212a:	68d0      	ldr	r0, [r2, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 800212c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002130:	60da      	str	r2, [r3, #12]
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
    HAL_FLASH_OperationErrorCallback(temp);
 8002138:	f7ff ff40 	bl	8001fbc <HAL_FLASH_OperationErrorCallback>
  errorflag = FLASH->SR2 & ((FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | FLASH_FLAG_STRBERR_BANK2 | \
 800213c:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <HAL_FLASH_IRQHandler+0x1f0>)
 800213e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
  if(errorflag != 0U)
 8002142:	f413 03dc 	ands.w	r3, r3, #7208960	; 0x6e0000
 8002146:	d01e      	beq.n	8002186 <HAL_FLASH_IRQHandler+0x1c6>
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
 8002148:	491a      	ldr	r1, [pc, #104]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 800214a:	698a      	ldr	r2, [r1, #24]
 800214c:	431a      	orrs	r2, r3
 800214e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002152:	618a      	str	r2, [r1, #24]
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
 8002154:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <HAL_FLASH_IRQHandler+0x1f0>)
 8002156:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
    procedure = pFlash.ProcedureOnGoing;
 800215a:	780b      	ldrb	r3, [r1, #0]
 800215c:	b2db      	uxtb	r3, r3
    if(procedure== FLASH_PROC_SECTERASE_BANK2)
 800215e:	2b04      	cmp	r3, #4
 8002160:	d008      	beq.n	8002174 <HAL_FLASH_IRQHandler+0x1b4>
    else if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 8002162:	2b07      	cmp	r3, #7
 8002164:	bf18      	it	ne
 8002166:	2b05      	cmpne	r3, #5
 8002168:	d01f      	beq.n	80021aa <HAL_FLASH_IRQHandler+0x1ea>
      temp = pFlash.Address;
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 800216c:	6918      	ldr	r0, [r3, #16]
 800216e:	e005      	b.n	800217c <HAL_FLASH_IRQHandler+0x1bc>
      temp = FLASH_BANK_1;
 8002170:	2001      	movs	r0, #1
 8002172:	e7de      	b.n	8002132 <HAL_FLASH_IRQHandler+0x172>
      temp = pFlash.Sector;
 8002174:	68c8      	ldr	r0, [r1, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 8002176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800217a:	60ca      	str	r2, [r1, #12]
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
    HAL_FLASH_OperationErrorCallback(temp);
 8002182:	f7ff ff1b 	bl	8001fbc <HAL_FLASH_OperationErrorCallback>
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	b96b      	cbnz	r3, 80021a8 <HAL_FLASH_IRQHandler+0x1e8>
    __HAL_FLASH_DISABLE_IT_BANK1(FLASH_IT_EOP_BANK1    | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_FLASH_IRQHandler+0x1f0>)
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	f422 02de 	bic.w	r2, r2, #7274496	; 0x6f0000
 8002194:	60da      	str	r2, [r3, #12]
    __HAL_FLASH_DISABLE_IT_BANK2(FLASH_IT_EOP_BANK2    | FLASH_IT_WRPERR_BANK2 | FLASH_IT_PGSERR_BANK2 | \
 8002196:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800219a:	f422 02de 	bic.w	r2, r2, #7274496	; 0x6f0000
 800219e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    __HAL_UNLOCK(&pFlash);
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <HAL_FLASH_IRQHandler+0x1f4>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	751a      	strb	r2, [r3, #20]
}
 80021a8:	bd10      	pop	{r4, pc}
      temp = FLASH_BANK_2;
 80021aa:	2002      	movs	r0, #2
 80021ac:	e7e6      	b.n	800217c <HAL_FLASH_IRQHandler+0x1bc>
 80021ae:	bf00      	nop
 80021b0:	52002000 	.word	0x52002000
 80021b4:	20000348 	.word	0x20000348

080021b8 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 80021b8:	b430      	push	{r4, r5}
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80021ba:	f011 0f01 	tst.w	r1, #1
 80021be:	d00b      	beq.n	80021d8 <FLASH_Erase_Sector+0x20>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80021c0:	4c10      	ldr	r4, [pc, #64]	; (8002204 <FLASH_Erase_Sector+0x4c>)
 80021c2:	68e3      	ldr	r3, [r4, #12]
 80021c4:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 80021c8:	60e3      	str	r3, [r4, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80021ca:	68e3      	ldr	r3, [r4, #12]
 80021cc:	ea42 2500 	orr.w	r5, r2, r0, lsl #8
 80021d0:	432b      	orrs	r3, r5
 80021d2:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80021d6:	60e3      	str	r3, [r4, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80021d8:	f011 0f02 	tst.w	r1, #2
 80021dc:	d00f      	beq.n	80021fe <FLASH_Erase_Sector+0x46>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80021de:	4909      	ldr	r1, [pc, #36]	; (8002204 <FLASH_Erase_Sector+0x4c>)
 80021e0:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 80021e4:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 80021e8:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80021ec:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 80021f0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80021f4:	431a      	orrs	r2, r3
 80021f6:	f042 0284 	orr.w	r2, r2, #132	; 0x84
 80021fa:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 80021fe:	bc30      	pop	{r4, r5}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	52002000 	.word	0x52002000

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220a:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 800220c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800220e:	e03a      	b.n	8002286 <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002210:	2409      	movs	r4, #9
 8002212:	e000      	b.n	8002216 <HAL_GPIO_Init+0xe>
 8002214:	2400      	movs	r4, #0
 8002216:	40b4      	lsls	r4, r6
 8002218:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800221a:	3502      	adds	r5, #2
 800221c:	4e6e      	ldr	r6, [pc, #440]	; (80023d8 <HAL_GPIO_Init+0x1d0>)
 800221e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002222:	4c6e      	ldr	r4, [pc, #440]	; (80023dc <HAL_GPIO_Init+0x1d4>)
 8002224:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002226:	43d4      	mvns	r4, r2
 8002228:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800222c:	684f      	ldr	r7, [r1, #4]
 800222e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002232:	d001      	beq.n	8002238 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8002234:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002238:	4d68      	ldr	r5, [pc, #416]	; (80023dc <HAL_GPIO_Init+0x1d4>)
 800223a:	602e      	str	r6, [r5, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800223c:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
 800223e:	ea04 0506 	and.w	r5, r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002242:	684f      	ldr	r7, [r1, #4]
 8002244:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002248:	d001      	beq.n	800224e <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 800224a:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800224e:	4e63      	ldr	r6, [pc, #396]	; (80023dc <HAL_GPIO_Init+0x1d4>)
 8002250:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002252:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8002256:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8002258:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800225c:	684f      	ldr	r7, [r1, #4]
 800225e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002262:	d001      	beq.n	8002268 <HAL_GPIO_Init+0x60>
        {
          temp |= iocurrent;
 8002264:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002268:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800226c:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800226e:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002270:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002272:	684e      	ldr	r6, [r1, #4]
 8002274:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002278:	d001      	beq.n	800227e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800227a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 800227e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002282:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 8002284:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002286:	680a      	ldr	r2, [r1, #0]
 8002288:	fa32 f403 	lsrs.w	r4, r2, r3
 800228c:	f000 80a2 	beq.w	80023d4 <HAL_GPIO_Init+0x1cc>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002290:	2401      	movs	r4, #1
 8002292:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 8002294:	4022      	ands	r2, r4
 8002296:	d0f5      	beq.n	8002284 <HAL_GPIO_Init+0x7c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002298:	684d      	ldr	r5, [r1, #4]
 800229a:	1e6e      	subs	r6, r5, #1
 800229c:	2d11      	cmp	r5, #17
 800229e:	bf18      	it	ne
 80022a0:	2e01      	cmpne	r6, #1
 80022a2:	d901      	bls.n	80022a8 <HAL_GPIO_Init+0xa0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a4:	2d12      	cmp	r5, #18
 80022a6:	d112      	bne.n	80022ce <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR;
 80022a8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022aa:	005f      	lsls	r7, r3, #1
 80022ac:	2503      	movs	r5, #3
 80022ae:	40bd      	lsls	r5, r7
 80022b0:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022b4:	68cd      	ldr	r5, [r1, #12]
 80022b6:	40bd      	lsls	r5, r7
 80022b8:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80022ba:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80022bc:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022be:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022c2:	684d      	ldr	r5, [r1, #4]
 80022c4:	f3c5 1400 	ubfx	r4, r5, #4, #1
 80022c8:	409c      	lsls	r4, r3
 80022ca:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 80022cc:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80022ce:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022d0:	005f      	lsls	r7, r3, #1
 80022d2:	2503      	movs	r5, #3
 80022d4:	40bd      	lsls	r5, r7
 80022d6:	43ec      	mvns	r4, r5
 80022d8:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022da:	688d      	ldr	r5, [r1, #8]
 80022dc:	40bd      	lsls	r5, r7
 80022de:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80022e0:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e2:	684d      	ldr	r5, [r1, #4]
 80022e4:	2d12      	cmp	r5, #18
 80022e6:	bf18      	it	ne
 80022e8:	2d02      	cmpne	r5, #2
 80022ea:	d113      	bne.n	8002314 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 80022ec:	08de      	lsrs	r6, r3, #3
 80022ee:	3608      	adds	r6, #8
 80022f0:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022f4:	f003 0507 	and.w	r5, r3, #7
 80022f8:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 80022fc:	250f      	movs	r5, #15
 80022fe:	fa05 f50c 	lsl.w	r5, r5, ip
 8002302:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002306:	690d      	ldr	r5, [r1, #16]
 8002308:	fa05 f50c 	lsl.w	r5, r5, ip
 800230c:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002310:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002314:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002316:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002318:	684c      	ldr	r4, [r1, #4]
 800231a:	f004 0403 	and.w	r4, r4, #3
 800231e:	40bc      	lsls	r4, r7
 8002320:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8002322:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002324:	684c      	ldr	r4, [r1, #4]
 8002326:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800232a:	d0ab      	beq.n	8002284 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232c:	4c2c      	ldr	r4, [pc, #176]	; (80023e0 <HAL_GPIO_Init+0x1d8>)
 800232e:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8002332:	f045 0502 	orr.w	r5, r5, #2
 8002336:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 800233a:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 800233e:	f004 0402 	and.w	r4, r4, #2
 8002342:	9401      	str	r4, [sp, #4]
 8002344:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002346:	089d      	lsrs	r5, r3, #2
 8002348:	1cae      	adds	r6, r5, #2
 800234a:	4c23      	ldr	r4, [pc, #140]	; (80023d8 <HAL_GPIO_Init+0x1d0>)
 800234c:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002350:	f003 0403 	and.w	r4, r3, #3
 8002354:	00a6      	lsls	r6, r4, #2
 8002356:	240f      	movs	r4, #15
 8002358:	40b4      	lsls	r4, r6
 800235a:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800235e:	4c21      	ldr	r4, [pc, #132]	; (80023e4 <HAL_GPIO_Init+0x1dc>)
 8002360:	42a0      	cmp	r0, r4
 8002362:	f43f af57 	beq.w	8002214 <HAL_GPIO_Init+0xc>
 8002366:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800236a:	42a0      	cmp	r0, r4
 800236c:	d022      	beq.n	80023b4 <HAL_GPIO_Init+0x1ac>
 800236e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002372:	42a0      	cmp	r0, r4
 8002374:	d020      	beq.n	80023b8 <HAL_GPIO_Init+0x1b0>
 8002376:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800237a:	42a0      	cmp	r0, r4
 800237c:	d01e      	beq.n	80023bc <HAL_GPIO_Init+0x1b4>
 800237e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002382:	42a0      	cmp	r0, r4
 8002384:	d01c      	beq.n	80023c0 <HAL_GPIO_Init+0x1b8>
 8002386:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800238a:	42a0      	cmp	r0, r4
 800238c:	d01a      	beq.n	80023c4 <HAL_GPIO_Init+0x1bc>
 800238e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002392:	42a0      	cmp	r0, r4
 8002394:	d018      	beq.n	80023c8 <HAL_GPIO_Init+0x1c0>
 8002396:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800239a:	42a0      	cmp	r0, r4
 800239c:	d016      	beq.n	80023cc <HAL_GPIO_Init+0x1c4>
 800239e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80023a2:	42a0      	cmp	r0, r4
 80023a4:	d014      	beq.n	80023d0 <HAL_GPIO_Init+0x1c8>
 80023a6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80023aa:	42a0      	cmp	r0, r4
 80023ac:	f43f af30 	beq.w	8002210 <HAL_GPIO_Init+0x8>
 80023b0:	240a      	movs	r4, #10
 80023b2:	e730      	b.n	8002216 <HAL_GPIO_Init+0xe>
 80023b4:	2401      	movs	r4, #1
 80023b6:	e72e      	b.n	8002216 <HAL_GPIO_Init+0xe>
 80023b8:	2402      	movs	r4, #2
 80023ba:	e72c      	b.n	8002216 <HAL_GPIO_Init+0xe>
 80023bc:	2403      	movs	r4, #3
 80023be:	e72a      	b.n	8002216 <HAL_GPIO_Init+0xe>
 80023c0:	2404      	movs	r4, #4
 80023c2:	e728      	b.n	8002216 <HAL_GPIO_Init+0xe>
 80023c4:	2405      	movs	r4, #5
 80023c6:	e726      	b.n	8002216 <HAL_GPIO_Init+0xe>
 80023c8:	2406      	movs	r4, #6
 80023ca:	e724      	b.n	8002216 <HAL_GPIO_Init+0xe>
 80023cc:	2407      	movs	r4, #7
 80023ce:	e722      	b.n	8002216 <HAL_GPIO_Init+0xe>
 80023d0:	2408      	movs	r4, #8
 80023d2:	e720      	b.n	8002216 <HAL_GPIO_Init+0xe>
  }
}
 80023d4:	b003      	add	sp, #12
 80023d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d8:	58000400 	.word	0x58000400
 80023dc:	58000080 	.word	0x58000080
 80023e0:	58024400 	.word	0x58024400
 80023e4:	58020000 	.word	0x58020000

080023e8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80023e8:	6903      	ldr	r3, [r0, #16]
 80023ea:	4219      	tst	r1, r3
 80023ec:	d101      	bne.n	80023f2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ee:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80023f0:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80023f2:	2001      	movs	r0, #1
 80023f4:	4770      	bx	lr

080023f6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023f6:	b912      	cbnz	r2, 80023fe <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023f8:	0409      	lsls	r1, r1, #16
 80023fa:	6181      	str	r1, [r0, #24]
  }
}
 80023fc:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80023fe:	6181      	str	r1, [r0, #24]
 8002400:	4770      	bx	lr

08002402 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002402:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240c:	4203      	tst	r3, r0
 800240e:	d100      	bne.n	8002412 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8002410:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002416:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800241a:	f00a fb71 	bl	800cb00 <HAL_GPIO_EXTI_Callback>
}
 800241e:	e7f7      	b.n	8002410 <HAL_GPIO_EXTI_IRQHandler+0xe>

08002420 <HAL_HSEM_FreeCallback>:
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002420:	4770      	bx	lr
	...

08002424 <HAL_HSEM_IRQHandler>:
{
 8002424:	b508      	push	{r3, lr}
  statusreg = HSEM_COMMON->MISR;
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_HSEM_IRQHandler+0x18>)
 8002428:	68d8      	ldr	r0, [r3, #12]
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	ea22 0200 	bic.w	r2, r2, r0
 8002430:	601a      	str	r2, [r3, #0]
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002432:	6058      	str	r0, [r3, #4]
  HAL_HSEM_FreeCallback(statusreg);
 8002434:	f7ff fff4 	bl	8002420 <HAL_HSEM_FreeCallback>
}
 8002438:	bd08      	pop	{r3, pc}
 800243a:	bf00      	nop
 800243c:	58026500 	.word	0x58026500

08002440 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002440:	6803      	ldr	r3, [r0, #0]
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	f012 0f02 	tst.w	r2, #2
 8002448:	d001      	beq.n	800244e <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800244a:	2200      	movs	r2, #0
 800244c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800244e:	6803      	ldr	r3, [r0, #0]
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	f012 0f01 	tst.w	r2, #1
 8002456:	d103      	bne.n	8002460 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	619a      	str	r2, [r3, #24]
  }
}
 8002460:	4770      	bx	lr

08002462 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002462:	f011 0f01 	tst.w	r1, #1
 8002466:	d009      	beq.n	800247c <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002468:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800246c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002470:	2b28      	cmp	r3, #40	; 0x28
 8002472:	d001      	beq.n	8002478 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002474:	23f2      	movs	r3, #242	; 0xf2
 8002476:	e002      	b.n	800247e <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002478:	2342      	movs	r3, #66	; 0x42
 800247a:	e000      	b.n	800247e <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 800247c:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800247e:	f011 0f02 	tst.w	r1, #2
 8002482:	d029      	beq.n	80024d8 <I2C_Disable_IRQ+0x76>
{
 8002484:	b410      	push	{r4}
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002486:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800248a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800248e:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002492:	2a28      	cmp	r2, #40	; 0x28
 8002494:	d012      	beq.n	80024bc <I2C_Disable_IRQ+0x5a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002496:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800249a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800249e:	d10f      	bne.n	80024c0 <I2C_Disable_IRQ+0x5e>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80024a0:	2910      	cmp	r1, #16
 80024a2:	d010      	beq.n	80024c6 <I2C_Disable_IRQ+0x64>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80024a4:	2920      	cmp	r1, #32
 80024a6:	d011      	beq.n	80024cc <I2C_Disable_IRQ+0x6a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80024a8:	2940      	cmp	r1, #64	; 0x40
 80024aa:	d012      	beq.n	80024d2 <I2C_Disable_IRQ+0x70>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80024ac:	6801      	ldr	r1, [r0, #0]
 80024ae:	680a      	ldr	r2, [r1, #0]
 80024b0:	ea22 0303 	bic.w	r3, r2, r3
 80024b4:	600b      	str	r3, [r1, #0]
}
 80024b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024ba:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80024bc:	4623      	mov	r3, r4
 80024be:	e7ec      	b.n	800249a <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80024c0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80024c4:	e7ec      	b.n	80024a0 <I2C_Disable_IRQ+0x3e>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80024c6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80024ca:	e7eb      	b.n	80024a4 <I2C_Disable_IRQ+0x42>
    tmpisr |= I2C_IT_STOPI;
 80024cc:	f043 0320 	orr.w	r3, r3, #32
 80024d0:	e7ea      	b.n	80024a8 <I2C_Disable_IRQ+0x46>
    tmpisr |= I2C_IT_TCI;
 80024d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024d6:	e7e9      	b.n	80024ac <I2C_Disable_IRQ+0x4a>
  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80024d8:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80024dc:	d10b      	bne.n	80024f6 <I2C_Disable_IRQ+0x94>
  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80024de:	2910      	cmp	r1, #16
 80024e0:	d00c      	beq.n	80024fc <I2C_Disable_IRQ+0x9a>
  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80024e2:	2920      	cmp	r1, #32
 80024e4:	d00d      	beq.n	8002502 <I2C_Disable_IRQ+0xa0>
  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80024e6:	2940      	cmp	r1, #64	; 0x40
 80024e8:	d00e      	beq.n	8002508 <I2C_Disable_IRQ+0xa6>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80024ea:	6801      	ldr	r1, [r0, #0]
 80024ec:	680a      	ldr	r2, [r1, #0]
 80024ee:	ea22 0303 	bic.w	r3, r2, r3
 80024f2:	600b      	str	r3, [r1, #0]
 80024f4:	4770      	bx	lr
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80024f6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80024fa:	e7f0      	b.n	80024de <I2C_Disable_IRQ+0x7c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80024fc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002500:	e7ef      	b.n	80024e2 <I2C_Disable_IRQ+0x80>
    tmpisr |= I2C_IT_STOPI;
 8002502:	f043 0320 	orr.w	r3, r3, #32
 8002506:	e7ee      	b.n	80024e6 <I2C_Disable_IRQ+0x84>
    tmpisr |= I2C_IT_TCI;
 8002508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800250c:	e7ed      	b.n	80024ea <I2C_Disable_IRQ+0x88>
	...

08002510 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002510:	2800      	cmp	r0, #0
 8002512:	d057      	beq.n	80025c4 <HAL_I2C_Init+0xb4>
{
 8002514:	b510      	push	{r4, lr}
 8002516:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002518:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800251c:	2b00      	cmp	r3, #0
 800251e:	d041      	beq.n	80025a4 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002520:	2324      	movs	r3, #36	; 0x24
 8002522:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002526:	6822      	ldr	r2, [r4, #0]
 8002528:	6813      	ldr	r3, [r2, #0]
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002530:	6863      	ldr	r3, [r4, #4]
 8002532:	6822      	ldr	r2, [r4, #0]
 8002534:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002538:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800253a:	6822      	ldr	r2, [r4, #0]
 800253c:	6893      	ldr	r3, [r2, #8]
 800253e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002542:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002544:	68e3      	ldr	r3, [r4, #12]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d031      	beq.n	80025ae <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800254a:	68a3      	ldr	r3, [r4, #8]
 800254c:	6822      	ldr	r2, [r4, #0]
 800254e:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002552:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002554:	68e3      	ldr	r3, [r4, #12]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d02f      	beq.n	80025ba <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800255a:	6822      	ldr	r2, [r4, #0]
 800255c:	6851      	ldr	r1, [r2, #4]
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <HAL_I2C_Init+0xb8>)
 8002560:	430b      	orrs	r3, r1
 8002562:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002564:	6822      	ldr	r2, [r4, #0]
 8002566:	68d3      	ldr	r3, [r2, #12]
 8002568:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800256c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800256e:	6923      	ldr	r3, [r4, #16]
 8002570:	6962      	ldr	r2, [r4, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	69a1      	ldr	r1, [r4, #24]
 8002576:	6822      	ldr	r2, [r4, #0]
 8002578:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800257c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800257e:	69e3      	ldr	r3, [r4, #28]
 8002580:	6a21      	ldr	r1, [r4, #32]
 8002582:	6822      	ldr	r2, [r4, #0]
 8002584:	430b      	orrs	r3, r1
 8002586:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002588:	6822      	ldr	r2, [r4, #0]
 800258a:	6813      	ldr	r3, [r2, #0]
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002592:	2000      	movs	r0, #0
 8002594:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002596:	2320      	movs	r3, #32
 8002598:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800259c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800259e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80025a2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80025a4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80025a8:	f00a fb88 	bl	800ccbc <HAL_I2C_MspInit>
 80025ac:	e7b8      	b.n	8002520 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025ae:	68a3      	ldr	r3, [r4, #8]
 80025b0:	6822      	ldr	r2, [r4, #0]
 80025b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b6:	6093      	str	r3, [r2, #8]
 80025b8:	e7cc      	b.n	8002554 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025ba:	6823      	ldr	r3, [r4, #0]
 80025bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	e7ca      	b.n	800255a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80025c4:	2001      	movs	r0, #1
}
 80025c6:	4770      	bx	lr
 80025c8:	02008000 	.word	0x02008000

080025cc <HAL_I2C_EV_IRQHandler>:
{
 80025cc:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80025ce:	6803      	ldr	r3, [r0, #0]
 80025d0:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80025d2:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80025d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80025d6:	b103      	cbz	r3, 80025da <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 80025d8:	4798      	blx	r3
}
 80025da:	bd08      	pop	{r3, pc}

080025dc <HAL_I2C_SlaveTxCpltCallback>:
}
 80025dc:	4770      	bx	lr

080025de <HAL_I2C_SlaveRxCpltCallback>:
}
 80025de:	4770      	bx	lr

080025e0 <I2C_ITSlaveSeqCplt>:
{
 80025e0:	b510      	push	{r4, lr}
 80025e2:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80025e4:	6803      	ldr	r3, [r0, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e8:	2100      	movs	r1, #0
 80025ea:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80025ee:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80025f2:	d00e      	beq.n	8002612 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80025fa:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80025fc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b29      	cmp	r3, #41	; 0x29
 8002604:	d00d      	beq.n	8002622 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002606:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b2a      	cmp	r3, #42	; 0x2a
 800260e:	d018      	beq.n	8002642 <I2C_ITSlaveSeqCplt+0x62>
}
 8002610:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002612:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002616:	d0f1      	beq.n	80025fc <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e7ec      	b.n	80025fc <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002622:	2328      	movs	r3, #40	; 0x28
 8002624:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002628:	2321      	movs	r3, #33	; 0x21
 800262a:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800262c:	2101      	movs	r1, #1
 800262e:	4620      	mov	r0, r4
 8002630:	f7ff ff17 	bl	8002462 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002634:	2300      	movs	r3, #0
 8002636:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800263a:	4620      	mov	r0, r4
 800263c:	f7ff ffce 	bl	80025dc <HAL_I2C_SlaveTxCpltCallback>
 8002640:	e7e6      	b.n	8002610 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002642:	2328      	movs	r3, #40	; 0x28
 8002644:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002648:	2322      	movs	r3, #34	; 0x22
 800264a:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800264c:	2102      	movs	r1, #2
 800264e:	4620      	mov	r0, r4
 8002650:	f7ff ff07 	bl	8002462 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002654:	2300      	movs	r3, #0
 8002656:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800265a:	4620      	mov	r0, r4
 800265c:	f7ff ffbf 	bl	80025de <HAL_I2C_SlaveRxCpltCallback>
}
 8002660:	e7d6      	b.n	8002610 <I2C_ITSlaveSeqCplt+0x30>

08002662 <HAL_I2C_AddrCallback>:
}
 8002662:	4770      	bx	lr

08002664 <I2C_ITAddrCplt>:
{
 8002664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002666:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800266a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800266e:	2b28      	cmp	r3, #40	; 0x28
 8002670:	d006      	beq.n	8002680 <I2C_ITAddrCplt+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002672:	6803      	ldr	r3, [r0, #0]
 8002674:	2208      	movs	r2, #8
 8002676:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002678:	2300      	movs	r3, #0
 800267a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 800267e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002680:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8002682:	6803      	ldr	r3, [r0, #0]
 8002684:	699e      	ldr	r6, [r3, #24]
 8002686:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800268a:	699a      	ldr	r2, [r3, #24]
 800268c:	0c12      	lsrs	r2, r2, #16
 800268e:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002698:	68df      	ldr	r7, [r3, #12]
 800269a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800269e:	68c1      	ldr	r1, [r0, #12]
 80026a0:	2902      	cmp	r1, #2
 80026a2:	d122      	bne.n	80026ea <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80026a4:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 80026a8:	f015 0f06 	tst.w	r5, #6
 80026ac:	d110      	bne.n	80026d0 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 80026ae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80026b0:	3101      	adds	r1, #1
 80026b2:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80026b4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80026b6:	2902      	cmp	r1, #2
 80026b8:	d1e1      	bne.n	800267e <I2C_ITAddrCplt+0x1a>
          hi2c->AddrEventCount = 0U;
 80026ba:	2100      	movs	r1, #0
 80026bc:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80026be:	2008      	movs	r0, #8
 80026c0:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80026c2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80026c6:	4631      	mov	r1, r6
 80026c8:	4620      	mov	r0, r4
 80026ca:	f7ff ffca 	bl	8002662 <HAL_I2C_AddrCallback>
 80026ce:	e7d6      	b.n	800267e <I2C_ITAddrCplt+0x1a>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80026d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026d4:	f7ff fec5 	bl	8002462 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80026d8:	2300      	movs	r3, #0
 80026da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80026de:	463a      	mov	r2, r7
 80026e0:	4631      	mov	r1, r6
 80026e2:	4620      	mov	r0, r4
 80026e4:	f7ff ffbd 	bl	8002662 <HAL_I2C_AddrCallback>
 80026e8:	e7c9      	b.n	800267e <I2C_ITAddrCplt+0x1a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80026ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026ee:	f7ff feb8 	bl	8002462 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80026f2:	2300      	movs	r3, #0
 80026f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80026f8:	462a      	mov	r2, r5
 80026fa:	4631      	mov	r1, r6
 80026fc:	4620      	mov	r0, r4
 80026fe:	f7ff ffb0 	bl	8002662 <HAL_I2C_AddrCallback>
 8002702:	e7bc      	b.n	800267e <I2C_ITAddrCplt+0x1a>

08002704 <HAL_I2C_ListenCpltCallback>:
}
 8002704:	4770      	bx	lr
	...

08002708 <I2C_ITListenCplt>:
{
 8002708:	b510      	push	{r4, lr}
 800270a:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800270c:	4b17      	ldr	r3, [pc, #92]	; (800276c <I2C_ITListenCplt+0x64>)
 800270e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002710:	2300      	movs	r3, #0
 8002712:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002714:	2220      	movs	r2, #32
 8002716:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800271a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 800271e:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002720:	f011 0f04 	tst.w	r1, #4
 8002724:	d012      	beq.n	800274c <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002726:	6803      	ldr	r3, [r0, #0]
 8002728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800272a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800272c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800272e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002730:	3301      	adds	r3, #1
 8002732:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002734:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8002736:	b14b      	cbz	r3, 800274c <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8002738:	3b01      	subs	r3, #1
 800273a:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 800273c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800273e:	3b01      	subs	r3, #1
 8002740:	b29b      	uxth	r3, r3
 8002742:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002744:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800274c:	f248 0103 	movw	r1, #32771	; 0x8003
 8002750:	4620      	mov	r0, r4
 8002752:	f7ff fe86 	bl	8002462 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	2210      	movs	r2, #16
 800275a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800275c:	2300      	movs	r3, #0
 800275e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8002762:	4620      	mov	r0, r4
 8002764:	f7ff ffce 	bl	8002704 <HAL_I2C_ListenCpltCallback>
}
 8002768:	bd10      	pop	{r4, pc}
 800276a:	bf00      	nop
 800276c:	ffff0000 	.word	0xffff0000

08002770 <HAL_I2C_ErrorCallback>:
}
 8002770:	4770      	bx	lr

08002772 <HAL_I2C_AbortCpltCallback>:
}
 8002772:	4770      	bx	lr

08002774 <I2C_TreatErrorCallback>:
{
 8002774:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002776:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b60      	cmp	r3, #96	; 0x60
 800277e:	d006      	beq.n	800278e <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002780:	2300      	movs	r3, #0
 8002782:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002784:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002788:	f7ff fff2 	bl	8002770 <HAL_I2C_ErrorCallback>
}
 800278c:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800278e:	2320      	movs	r3, #32
 8002790:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002794:	2300      	movs	r3, #0
 8002796:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002798:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800279c:	f7ff ffe9 	bl	8002772 <HAL_I2C_AbortCpltCallback>
 80027a0:	e7f4      	b.n	800278c <I2C_TreatErrorCallback+0x18>
	...

080027a4 <I2C_ITError>:
{
 80027a4:	b510      	push	{r4, lr}
 80027a6:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80027a8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80027ac:	2200      	movs	r2, #0
 80027ae:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80027b2:	483b      	ldr	r0, [pc, #236]	; (80028a0 <I2C_ITError+0xfc>)
 80027b4:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80027b6:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80027b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80027ba:	4311      	orrs	r1, r2
 80027bc:	6461      	str	r1, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80027be:	3b28      	subs	r3, #40	; 0x28
 80027c0:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d82d      	bhi.n	8002822 <I2C_ITError+0x7e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80027c6:	2103      	movs	r1, #3
 80027c8:	4620      	mov	r0, r4
 80027ca:	f7ff fe4a 	bl	8002462 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027ce:	2328      	movs	r3, #40	; 0x28
 80027d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80027d4:	4b33      	ldr	r3, [pc, #204]	; (80028a4 <I2C_ITError+0x100>)
 80027d6:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 80027d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 80027da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80027dc:	2a00      	cmp	r2, #0
 80027de:	d034      	beq.n	800284a <I2C_ITError+0xa6>
 80027e0:	2b21      	cmp	r3, #33	; 0x21
 80027e2:	bf18      	it	ne
 80027e4:	2b11      	cmpne	r3, #17
 80027e6:	d130      	bne.n	800284a <I2C_ITError+0xa6>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80027e8:	6823      	ldr	r3, [r4, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80027f0:	d003      	beq.n	80027fa <I2C_ITError+0x56>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027f8:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80027fc:	f7ff fbd8 	bl	8001fb0 <HAL_DMA_GetState>
 8002800:	2801      	cmp	r0, #1
 8002802:	d01e      	beq.n	8002842 <I2C_ITError+0x9e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002804:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002806:	4a28      	ldr	r2, [pc, #160]	; (80028a8 <I2C_ITError+0x104>)
 8002808:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800280a:	2300      	movs	r3, #0
 800280c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002810:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002812:	f7fe fee7 	bl	80015e4 <HAL_DMA_Abort_IT>
 8002816:	2800      	cmp	r0, #0
 8002818:	d040      	beq.n	800289c <I2C_ITError+0xf8>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800281a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800281c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800281e:	4798      	blx	r3
 8002820:	e03c      	b.n	800289c <I2C_ITError+0xf8>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002822:	f248 0103 	movw	r1, #32771	; 0x8003
 8002826:	4620      	mov	r0, r4
 8002828:	f7ff fe1b 	bl	8002462 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800282c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b60      	cmp	r3, #96	; 0x60
 8002834:	d002      	beq.n	800283c <I2C_ITError+0x98>
      hi2c->State         = HAL_I2C_STATE_READY;
 8002836:	2320      	movs	r3, #32
 8002838:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 800283c:	2300      	movs	r3, #0
 800283e:	6363      	str	r3, [r4, #52]	; 0x34
 8002840:	e7ca      	b.n	80027d8 <I2C_ITError+0x34>
      I2C_TreatErrorCallback(hi2c);
 8002842:	4620      	mov	r0, r4
 8002844:	f7ff ff96 	bl	8002774 <I2C_TreatErrorCallback>
 8002848:	e028      	b.n	800289c <I2C_ITError+0xf8>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 800284a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800284c:	b31a      	cbz	r2, 8002896 <I2C_ITError+0xf2>
 800284e:	2b22      	cmp	r3, #34	; 0x22
 8002850:	bf18      	it	ne
 8002852:	2b12      	cmpne	r3, #18
 8002854:	d11f      	bne.n	8002896 <I2C_ITError+0xf2>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800285e:	d003      	beq.n	8002868 <I2C_ITError+0xc4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002866:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002868:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800286a:	f7ff fba1 	bl	8001fb0 <HAL_DMA_GetState>
 800286e:	2801      	cmp	r0, #1
 8002870:	d00d      	beq.n	800288e <I2C_ITError+0xea>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002872:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002874:	4a0c      	ldr	r2, [pc, #48]	; (80028a8 <I2C_ITError+0x104>)
 8002876:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8002878:	2300      	movs	r3, #0
 800287a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800287e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002880:	f7fe feb0 	bl	80015e4 <HAL_DMA_Abort_IT>
 8002884:	b150      	cbz	r0, 800289c <I2C_ITError+0xf8>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002886:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002888:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800288a:	4798      	blx	r3
 800288c:	e006      	b.n	800289c <I2C_ITError+0xf8>
      I2C_TreatErrorCallback(hi2c);
 800288e:	4620      	mov	r0, r4
 8002890:	f7ff ff70 	bl	8002774 <I2C_TreatErrorCallback>
 8002894:	e002      	b.n	800289c <I2C_ITError+0xf8>
    I2C_TreatErrorCallback(hi2c);
 8002896:	4620      	mov	r0, r4
 8002898:	f7ff ff6c 	bl	8002774 <I2C_TreatErrorCallback>
}
 800289c:	bd10      	pop	{r4, pc}
 800289e:	bf00      	nop
 80028a0:	ffff0000 	.word	0xffff0000
 80028a4:	08002aed 	.word	0x08002aed
 80028a8:	08002caf 	.word	0x08002caf

080028ac <I2C_ITSlaveCplt>:
{
 80028ac:	b570      	push	{r4, r5, r6, lr}
 80028ae:	4604      	mov	r4, r0
 80028b0:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80028b2:	6802      	ldr	r2, [r0, #0]
 80028b4:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80028b6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80028ba:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028bc:	2120      	movs	r1, #32
 80028be:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80028c0:	2b29      	cmp	r3, #41	; 0x29
 80028c2:	bf18      	it	ne
 80028c4:	2b21      	cmpne	r3, #33	; 0x21
 80028c6:	d057      	beq.n	8002978 <I2C_ITSlaveCplt+0xcc>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028c8:	2b2a      	cmp	r3, #42	; 0x2a
 80028ca:	bf18      	it	ne
 80028cc:	2b22      	cmpne	r3, #34	; 0x22
 80028ce:	d05a      	beq.n	8002986 <I2C_ITSlaveCplt+0xda>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80028d0:	6822      	ldr	r2, [r4, #0]
 80028d2:	6853      	ldr	r3, [r2, #4]
 80028d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d8:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 80028da:	6822      	ldr	r2, [r4, #0]
 80028dc:	6853      	ldr	r3, [r2, #4]
 80028de:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80028e2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80028e6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7ff fda5 	bl	8002440 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80028f6:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80028fa:	f000 8084 	beq.w	8002a06 <I2C_ITSlaveCplt+0x15a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80028fe:	6822      	ldr	r2, [r4, #0]
 8002900:	6813      	ldr	r3, [r2, #0]
 8002902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002906:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8002908:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800290a:	2b00      	cmp	r3, #0
 800290c:	d045      	beq.n	800299a <I2C_ITSlaveCplt+0xee>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4973      	ldr	r1, [pc, #460]	; (8002ae0 <I2C_ITSlaveCplt+0x234>)
 8002912:	4a74      	ldr	r2, [pc, #464]	; (8002ae4 <I2C_ITSlaveCplt+0x238>)
 8002914:	4293      	cmp	r3, r2
 8002916:	bf18      	it	ne
 8002918:	428b      	cmpne	r3, r1
 800291a:	d03b      	beq.n	8002994 <I2C_ITSlaveCplt+0xe8>
 800291c:	3218      	adds	r2, #24
 800291e:	4293      	cmp	r3, r2
 8002920:	d038      	beq.n	8002994 <I2C_ITSlaveCplt+0xe8>
 8002922:	3218      	adds	r2, #24
 8002924:	4293      	cmp	r3, r2
 8002926:	d035      	beq.n	8002994 <I2C_ITSlaveCplt+0xe8>
 8002928:	3218      	adds	r2, #24
 800292a:	4293      	cmp	r3, r2
 800292c:	d032      	beq.n	8002994 <I2C_ITSlaveCplt+0xe8>
 800292e:	3218      	adds	r2, #24
 8002930:	4293      	cmp	r3, r2
 8002932:	d02f      	beq.n	8002994 <I2C_ITSlaveCplt+0xe8>
 8002934:	3218      	adds	r2, #24
 8002936:	4293      	cmp	r3, r2
 8002938:	d02c      	beq.n	8002994 <I2C_ITSlaveCplt+0xe8>
 800293a:	3218      	adds	r2, #24
 800293c:	4293      	cmp	r3, r2
 800293e:	d029      	beq.n	8002994 <I2C_ITSlaveCplt+0xe8>
 8002940:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002944:	4293      	cmp	r3, r2
 8002946:	d025      	beq.n	8002994 <I2C_ITSlaveCplt+0xe8>
 8002948:	3218      	adds	r2, #24
 800294a:	4293      	cmp	r3, r2
 800294c:	d022      	beq.n	8002994 <I2C_ITSlaveCplt+0xe8>
 800294e:	3218      	adds	r2, #24
 8002950:	4293      	cmp	r3, r2
 8002952:	d01f      	beq.n	8002994 <I2C_ITSlaveCplt+0xe8>
 8002954:	3218      	adds	r2, #24
 8002956:	4293      	cmp	r3, r2
 8002958:	d01c      	beq.n	8002994 <I2C_ITSlaveCplt+0xe8>
 800295a:	3218      	adds	r2, #24
 800295c:	4293      	cmp	r3, r2
 800295e:	d019      	beq.n	8002994 <I2C_ITSlaveCplt+0xe8>
 8002960:	3218      	adds	r2, #24
 8002962:	4293      	cmp	r3, r2
 8002964:	d016      	beq.n	8002994 <I2C_ITSlaveCplt+0xe8>
 8002966:	3218      	adds	r2, #24
 8002968:	4293      	cmp	r3, r2
 800296a:	d013      	beq.n	8002994 <I2C_ITSlaveCplt+0xe8>
 800296c:	3218      	adds	r2, #24
 800296e:	4293      	cmp	r3, r2
 8002970:	d010      	beq.n	8002994 <I2C_ITSlaveCplt+0xe8>
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	b29b      	uxth	r3, r3
 8002976:	e00f      	b.n	8002998 <I2C_ITSlaveCplt+0xec>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002978:	f248 0101 	movw	r1, #32769	; 0x8001
 800297c:	f7ff fd71 	bl	8002462 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002980:	2321      	movs	r3, #33	; 0x21
 8002982:	6323      	str	r3, [r4, #48]	; 0x30
 8002984:	e7a4      	b.n	80028d0 <I2C_ITSlaveCplt+0x24>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002986:	f248 0102 	movw	r1, #32770	; 0x8002
 800298a:	f7ff fd6a 	bl	8002462 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800298e:	2322      	movs	r3, #34	; 0x22
 8002990:	6323      	str	r3, [r4, #48]	; 0x30
 8002992:	e79d      	b.n	80028d0 <I2C_ITSlaveCplt+0x24>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	b29b      	uxth	r3, r3
 8002998:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800299a:	f015 0f04 	tst.w	r5, #4
 800299e:	d010      	beq.n	80029c2 <I2C_ITSlaveCplt+0x116>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80029a0:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029ae:	3301      	adds	r3, #1
 80029b0:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80029b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80029b4:	b12b      	cbz	r3, 80029c2 <I2C_ITSlaveCplt+0x116>
      hi2c->XferSize--;
 80029b6:	3b01      	subs	r3, #1
 80029b8:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80029ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29b      	uxth	r3, r3
 80029c0:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80029c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	b11b      	cbz	r3, 80029d0 <I2C_ITSlaveCplt+0x124>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 80029d6:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d157      	bne.n	8002a8e <I2C_ITSlaveCplt+0x1e2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80029de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029e4:	d161      	bne.n	8002aaa <I2C_ITSlaveCplt+0x1fe>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029e6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b22      	cmp	r3, #34	; 0x22
 80029ee:	d06c      	beq.n	8002aca <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 80029f0:	2320      	movs	r3, #32
 80029f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80029fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029fe:	4620      	mov	r0, r4
 8002a00:	f7ff fdec 	bl	80025dc <HAL_I2C_SlaveTxCpltCallback>
}
 8002a04:	e060      	b.n	8002ac8 <I2C_ITSlaveCplt+0x21c>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002a06:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8002a0a:	d0c6      	beq.n	800299a <I2C_ITSlaveCplt+0xee>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a0c:	6822      	ldr	r2, [r4, #0]
 8002a0e:	6813      	ldr	r3, [r2, #0]
 8002a10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a14:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8002a16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0be      	beq.n	800299a <I2C_ITSlaveCplt+0xee>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4930      	ldr	r1, [pc, #192]	; (8002ae0 <I2C_ITSlaveCplt+0x234>)
 8002a20:	4a30      	ldr	r2, [pc, #192]	; (8002ae4 <I2C_ITSlaveCplt+0x238>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	bf18      	it	ne
 8002a26:	428b      	cmpne	r3, r1
 8002a28:	d02d      	beq.n	8002a86 <I2C_ITSlaveCplt+0x1da>
 8002a2a:	3218      	adds	r2, #24
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d02a      	beq.n	8002a86 <I2C_ITSlaveCplt+0x1da>
 8002a30:	3218      	adds	r2, #24
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d027      	beq.n	8002a86 <I2C_ITSlaveCplt+0x1da>
 8002a36:	3218      	adds	r2, #24
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d024      	beq.n	8002a86 <I2C_ITSlaveCplt+0x1da>
 8002a3c:	3218      	adds	r2, #24
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d021      	beq.n	8002a86 <I2C_ITSlaveCplt+0x1da>
 8002a42:	3218      	adds	r2, #24
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d01e      	beq.n	8002a86 <I2C_ITSlaveCplt+0x1da>
 8002a48:	3218      	adds	r2, #24
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01b      	beq.n	8002a86 <I2C_ITSlaveCplt+0x1da>
 8002a4e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d017      	beq.n	8002a86 <I2C_ITSlaveCplt+0x1da>
 8002a56:	3218      	adds	r2, #24
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d014      	beq.n	8002a86 <I2C_ITSlaveCplt+0x1da>
 8002a5c:	3218      	adds	r2, #24
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d011      	beq.n	8002a86 <I2C_ITSlaveCplt+0x1da>
 8002a62:	3218      	adds	r2, #24
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00e      	beq.n	8002a86 <I2C_ITSlaveCplt+0x1da>
 8002a68:	3218      	adds	r2, #24
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00b      	beq.n	8002a86 <I2C_ITSlaveCplt+0x1da>
 8002a6e:	3218      	adds	r2, #24
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d008      	beq.n	8002a86 <I2C_ITSlaveCplt+0x1da>
 8002a74:	3218      	adds	r2, #24
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d005      	beq.n	8002a86 <I2C_ITSlaveCplt+0x1da>
 8002a7a:	3218      	adds	r2, #24
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d002      	beq.n	8002a86 <I2C_ITSlaveCplt+0x1da>
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	e001      	b.n	8002a8a <I2C_ITSlaveCplt+0x1de>
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002a8c:	e785      	b.n	800299a <I2C_ITSlaveCplt+0xee>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a8e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7ff fe87 	bl	80027a4 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002a96:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b28      	cmp	r3, #40	; 0x28
 8002a9e:	d113      	bne.n	8002ac8 <I2C_ITSlaveCplt+0x21c>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f7ff fe30 	bl	8002708 <I2C_ITListenCplt>
 8002aa8:	e00e      	b.n	8002ac8 <I2C_ITSlaveCplt+0x21c>
    I2C_ITSlaveSeqCplt(hi2c);
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f7ff fd98 	bl	80025e0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <I2C_ITSlaveCplt+0x23c>)
 8002ab2:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002ab4:	2320      	movs	r3, #32
 8002ab6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002abe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f7ff fe1e 	bl	8002704 <HAL_I2C_ListenCpltCallback>
}
 8002ac8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8002aca:	2320      	movs	r3, #32
 8002acc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002ad4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7ff fd80 	bl	80025de <HAL_I2C_SlaveRxCpltCallback>
 8002ade:	e7f3      	b.n	8002ac8 <I2C_ITSlaveCplt+0x21c>
 8002ae0:	40020010 	.word	0x40020010
 8002ae4:	40020028 	.word	0x40020028
 8002ae8:	ffff0000 	.word	0xffff0000

08002aec <I2C_Slave_ISR_IT>:
{
 8002aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8002aee:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8002af0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	f000 80a3 	beq.w	8002c40 <I2C_Slave_ISR_IT+0x154>
 8002afa:	4616      	mov	r6, r2
 8002afc:	460d      	mov	r5, r1
 8002afe:	4604      	mov	r4, r0
 8002b00:	2301      	movs	r3, #1
 8002b02:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b06:	f011 0f20 	tst.w	r1, #32
 8002b0a:	d002      	beq.n	8002b12 <I2C_Slave_ISR_IT+0x26>
 8002b0c:	f012 0f20 	tst.w	r2, #32
 8002b10:	d119      	bne.n	8002b46 <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b12:	f015 0f10 	tst.w	r5, #16
 8002b16:	d045      	beq.n	8002ba4 <I2C_Slave_ISR_IT+0xb8>
 8002b18:	f016 0f10 	tst.w	r6, #16
 8002b1c:	d042      	beq.n	8002ba4 <I2C_Slave_ISR_IT+0xb8>
    if (hi2c->XferCount == 0U)
 8002b1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	bb43      	cbnz	r3, 8002b76 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002b24:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b28      	cmp	r3, #40	; 0x28
 8002b2c:	d00e      	beq.n	8002b4c <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b2e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b29      	cmp	r3, #41	; 0x29
 8002b36:	d011      	beq.n	8002b5c <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	2210      	movs	r2, #16
 8002b3c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8002b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002b46:	f7ff feb1 	bl	80028ac <I2C_ITSlaveCplt>
 8002b4a:	e7e2      	b.n	8002b12 <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002b4c:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8002b50:	d1ed      	bne.n	8002b2e <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b52:	4629      	mov	r1, r5
 8002b54:	4620      	mov	r0, r4
 8002b56:	f7ff fdd7 	bl	8002708 <I2C_ITListenCplt>
 8002b5a:	e7f0      	b.n	8002b3e <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b5c:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8002b60:	d0ea      	beq.n	8002b38 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	2210      	movs	r2, #16
 8002b66:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f7ff fc69 	bl	8002440 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f7ff fd36 	bl	80025e0 <I2C_ITSlaveSeqCplt>
 8002b74:	e7e3      	b.n	8002b3e <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	2210      	movs	r2, #16
 8002b7a:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b7e:	f043 0304 	orr.w	r3, r3, #4
 8002b82:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002b84:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8002b88:	bf14      	ite	ne
 8002b8a:	2300      	movne	r3, #0
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2f00      	cmp	r7, #0
 8002b90:	bf14      	ite	ne
 8002b92:	461f      	movne	r7, r3
 8002b94:	2701      	moveq	r7, #1
 8002b96:	2f00      	cmp	r7, #0
 8002b98:	d0d1      	beq.n	8002b3e <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b9a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f7ff fe01 	bl	80027a4 <I2C_ITError>
 8002ba2:	e7cc      	b.n	8002b3e <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002ba4:	f015 0f04 	tst.w	r5, #4
 8002ba8:	d01e      	beq.n	8002be8 <I2C_Slave_ISR_IT+0xfc>
 8002baa:	f016 0f04 	tst.w	r6, #4
 8002bae:	d01b      	beq.n	8002be8 <I2C_Slave_ISR_IT+0xfc>
    if (hi2c->XferCount > 0U)
 8002bb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	b16b      	cbz	r3, 8002bd2 <I2C_Slave_ISR_IT+0xe6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bbc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002bc4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002bca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8002bd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1b1      	bne.n	8002b3e <I2C_Slave_ISR_IT+0x52>
 8002bda:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8002bde:	d0ae      	beq.n	8002b3e <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8002be0:	4620      	mov	r0, r4
 8002be2:	f7ff fcfd 	bl	80025e0 <I2C_ITSlaveSeqCplt>
 8002be6:	e7aa      	b.n	8002b3e <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002be8:	f015 0f08 	tst.w	r5, #8
 8002bec:	d002      	beq.n	8002bf4 <I2C_Slave_ISR_IT+0x108>
 8002bee:	f016 0f08 	tst.w	r6, #8
 8002bf2:	d117      	bne.n	8002c24 <I2C_Slave_ISR_IT+0x138>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002bf4:	f015 0f02 	tst.w	r5, #2
 8002bf8:	d0a1      	beq.n	8002b3e <I2C_Slave_ISR_IT+0x52>
 8002bfa:	f016 0f02 	tst.w	r6, #2
 8002bfe:	d09e      	beq.n	8002b3e <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8002c00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	b19b      	cbz	r3, 8002c2e <I2C_Slave_ISR_IT+0x142>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c06:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	7812      	ldrb	r2, [r2, #0]
 8002c0c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c10:	3301      	adds	r3, #1
 8002c12:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002c14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002c1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	8523      	strh	r3, [r4, #40]	; 0x28
 8002c22:	e78c      	b.n	8002b3e <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002c24:	4629      	mov	r1, r5
 8002c26:	4620      	mov	r0, r4
 8002c28:	f7ff fd1c 	bl	8002664 <I2C_ITAddrCplt>
 8002c2c:	e787      	b.n	8002b3e <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002c2e:	2f00      	cmp	r7, #0
 8002c30:	bf18      	it	ne
 8002c32:	f1b7 7f80 	cmpne.w	r7, #16777216	; 0x1000000
 8002c36:	d182      	bne.n	8002b3e <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f7ff fcd1 	bl	80025e0 <I2C_ITSlaveSeqCplt>
 8002c3e:	e77e      	b.n	8002b3e <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8002c40:	2002      	movs	r0, #2
 8002c42:	e77f      	b.n	8002b44 <I2C_Slave_ISR_IT+0x58>

08002c44 <HAL_I2C_ER_IRQHandler>:
{
 8002c44:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c46:	6802      	ldr	r2, [r0, #0]
 8002c48:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c4a:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c4c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c50:	d009      	beq.n	8002c66 <HAL_I2C_ER_IRQHandler+0x22>
 8002c52:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002c56:	d006      	beq.n	8002c66 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002c58:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002c5a:	f044 0401 	orr.w	r4, r4, #1
 8002c5e:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c60:	f44f 7480 	mov.w	r4, #256	; 0x100
 8002c64:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c66:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002c6a:	d00a      	beq.n	8002c82 <HAL_I2C_ER_IRQHandler+0x3e>
 8002c6c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002c70:	d007      	beq.n	8002c82 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002c72:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002c74:	f042 0208 	orr.w	r2, r2, #8
 8002c78:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c7a:	6802      	ldr	r2, [r0, #0]
 8002c7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002c80:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c82:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002c86:	d00a      	beq.n	8002c9e <HAL_I2C_ER_IRQHandler+0x5a>
 8002c88:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002c8c:	d007      	beq.n	8002c9e <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002c8e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c96:	6803      	ldr	r3, [r0, #0]
 8002c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c9c:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8002c9e:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002ca0:	f011 0f0b 	tst.w	r1, #11
 8002ca4:	d100      	bne.n	8002ca8 <HAL_I2C_ER_IRQHandler+0x64>
}
 8002ca6:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 8002ca8:	f7ff fd7c 	bl	80027a4 <I2C_ITError>
}
 8002cac:	e7fb      	b.n	8002ca6 <HAL_I2C_ER_IRQHandler+0x62>

08002cae <I2C_DMAAbort>:
{
 8002cae:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002cb0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8002cb2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002cb4:	b10b      	cbz	r3, 8002cba <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8002cba:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002cbc:	b10b      	cbz	r3, 8002cc2 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	651a      	str	r2, [r3, #80]	; 0x50
  I2C_TreatErrorCallback(hi2c);
 8002cc2:	f7ff fd57 	bl	8002774 <I2C_TreatErrorCallback>
}
 8002cc6:	bd08      	pop	{r3, pc}

08002cc8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d124      	bne.n	8002d1c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d022      	beq.n	8002d20 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce0:	2324      	movs	r3, #36	; 0x24
 8002ce2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ce6:	6802      	ldr	r2, [r0, #0]
 8002ce8:	6813      	ldr	r3, [r2, #0]
 8002cea:	f023 0301 	bic.w	r3, r3, #1
 8002cee:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cf0:	6802      	ldr	r2, [r0, #0]
 8002cf2:	6813      	ldr	r3, [r2, #0]
 8002cf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cf8:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cfa:	6802      	ldr	r2, [r0, #0]
 8002cfc:	6813      	ldr	r3, [r2, #0]
 8002cfe:	4319      	orrs	r1, r3
 8002d00:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d02:	6802      	ldr	r2, [r0, #0]
 8002d04:	6813      	ldr	r3, [r2, #0]
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d12:	2300      	movs	r3, #0
 8002d14:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002d18:	4618      	mov	r0, r3
 8002d1a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002d20:	2002      	movs	r0, #2
  }
}
 8002d22:	4770      	bx	lr

08002d24 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d24:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	d122      	bne.n	8002d74 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d2e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d020      	beq.n	8002d78 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002d36:	2301      	movs	r3, #1
 8002d38:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d3c:	2324      	movs	r3, #36	; 0x24
 8002d3e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d42:	6802      	ldr	r2, [r0, #0]
 8002d44:	6813      	ldr	r3, [r2, #0]
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d4c:	6802      	ldr	r2, [r0, #0]
 8002d4e:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d54:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d58:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d5a:	6802      	ldr	r2, [r0, #0]
 8002d5c:	6813      	ldr	r3, [r2, #0]
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d64:	2320      	movs	r3, #32
 8002d66:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002d70:	4618      	mov	r0, r3
 8002d72:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2002      	movs	r0, #2
 8002d76:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002d78:	2002      	movs	r0, #2
  }
}
 8002d7a:	4770      	bx	lr

08002d7c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d80:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d82:	6807      	ldr	r7, [r0, #0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8002d84:	00ca      	lsls	r2, r1, #3
 8002d86:	1a52      	subs	r2, r2, r1
 8002d88:	0093      	lsls	r3, r2, #2
 8002d8a:	4403      	add	r3, r0
 8002d8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d857      	bhi.n	8002e44 <PCD_WriteEmptyTxFifo+0xc8>
 8002d94:	46b8      	mov	r8, r7
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d96:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8002d98:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8002d9c:	00a2      	lsls	r2, r4, #2
 8002d9e:	4402      	add	r2, r0
 8002da0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d300      	bcc.n	8002da8 <PCD_WriteEmptyTxFifo+0x2c>
  len = ep->xfer_len - ep->xfer_count;
 8002da6:	461a      	mov	r2, r3
 8002da8:	460c      	mov	r4, r1
 8002daa:	4606      	mov	r6, r0
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8002dac:	f102 0a03 	add.w	sl, r2, #3
 8002db0:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002db4:	e016      	b.n	8002de4 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8002db6:	f109 0a03 	add.w	sl, r9, #3
 8002dba:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dbe:	00e3      	lsls	r3, r4, #3
 8002dc0:	1b1b      	subs	r3, r3, r4
 8002dc2:	009d      	lsls	r5, r3, #2
 8002dc4:	4435      	add	r5, r6
 8002dc6:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8002dc8:	7c33      	ldrb	r3, [r6, #16]
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	fa1f f389 	uxth.w	r3, r9
 8002dd0:	b2e2      	uxtb	r2, r4
 8002dd2:	4638      	mov	r0, r7
 8002dd4:	f007 fab2 	bl	800a33c <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8002dd8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8002dda:	444b      	add	r3, r9
 8002ddc:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8002dde:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8002de0:	444b      	add	r3, r9
 8002de2:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002de4:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8002de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	4553      	cmp	r3, sl
 8002df2:	d313      	bcc.n	8002e1c <PCD_WriteEmptyTxFifo+0xa0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002df4:	00e3      	lsls	r3, r4, #3
 8002df6:	1b1b      	subs	r3, r3, r4
 8002df8:	009a      	lsls	r2, r3, #2
 8002dfa:	4432      	add	r2, r6
 8002dfc:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002dfe:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e00:	4299      	cmp	r1, r3
 8002e02:	d20b      	bcs.n	8002e1c <PCD_WriteEmptyTxFifo+0xa0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e04:	b153      	cbz	r3, 8002e1c <PCD_WriteEmptyTxFifo+0xa0>
    len = ep->xfer_len - ep->xfer_count;
 8002e06:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 8002e08:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8002e0c:	008a      	lsls	r2, r1, #2
 8002e0e:	4432      	add	r2, r6
 8002e10:	f8d2 9044 	ldr.w	r9, [r2, #68]	; 0x44
 8002e14:	4599      	cmp	r9, r3
 8002e16:	d3ce      	bcc.n	8002db6 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8002e18:	4699      	mov	r9, r3
 8002e1a:	e7cc      	b.n	8002db6 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e1c:	00e3      	lsls	r3, r4, #3
 8002e1e:	1b1b      	subs	r3, r3, r4
 8002e20:	0098      	lsls	r0, r3, #2
 8002e22:	4406      	add	r6, r0
 8002e24:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8002e26:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d80f      	bhi.n	8002e4c <PCD_WriteEmptyTxFifo+0xd0>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e2c:	f004 040f 	and.w	r4, r4, #15
 8002e30:	2101      	movs	r1, #1
 8002e32:	40a1      	lsls	r1, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e34:	f8d7 4834 	ldr.w	r4, [r7, #2100]	; 0x834
 8002e38:	ea24 0401 	bic.w	r4, r4, r1
 8002e3c:	f8c7 4834 	str.w	r4, [r7, #2100]	; 0x834
  }

  return HAL_OK;
 8002e40:	2000      	movs	r0, #0
 8002e42:	e000      	b.n	8002e46 <PCD_WriteEmptyTxFifo+0xca>
    return HAL_ERROR;
 8002e44:	2001      	movs	r0, #1
}
 8002e46:	b002      	add	sp, #8
 8002e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	e7fa      	b.n	8002e46 <PCD_WriteEmptyTxFifo+0xca>

08002e50 <HAL_PCD_Init>:
{
 8002e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e52:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8002e54:	2800      	cmp	r0, #0
 8002e56:	f000 8091 	beq.w	8002f7c <HAL_PCD_Init+0x12c>
 8002e5a:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8002e5c:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e5e:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8002e62:	b323      	cbz	r3, 8002eae <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e64:	2303      	movs	r3, #3
 8002e66:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e6a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002e6c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e70:	d101      	bne.n	8002e76 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	6123      	str	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8002e76:	6820      	ldr	r0, [r4, #0]
 8002e78:	f006 fffe 	bl	8009e78 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e7c:	4625      	mov	r5, r4
 8002e7e:	f855 7b10 	ldr.w	r7, [r5], #16
 8002e82:	466e      	mov	r6, sp
 8002e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e86:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e8a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002e8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002e90:	e886 0003 	stmia.w	r6, {r0, r1}
 8002e94:	1d23      	adds	r3, r4, #4
 8002e96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e98:	4638      	mov	r0, r7
 8002e9a:	f006 ff2b 	bl	8009cf4 <USB_CoreInit>
 8002e9e:	b158      	cbz	r0, 8002eb8 <HAL_PCD_Init+0x68>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8002ea6:	2501      	movs	r5, #1
}
 8002ea8:	4628      	mov	r0, r5
 8002eaa:	b00b      	add	sp, #44	; 0x2c
 8002eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002eae:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8002eb2:	f00a ffad 	bl	800de10 <HAL_PCD_MspInit>
 8002eb6:	e7d5      	b.n	8002e64 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002eb8:	2100      	movs	r1, #0
 8002eba:	6820      	ldr	r0, [r4, #0]
 8002ebc:	f006 ffe2 	bl	8009e84 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e015      	b.n	8002ef0 <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[i].is_in = 1U;
 8002ec4:	00d9      	lsls	r1, r3, #3
 8002ec6:	1ac8      	subs	r0, r1, r3
 8002ec8:	0082      	lsls	r2, r0, #2
 8002eca:	4422      	add	r2, r4
 8002ecc:	2001      	movs	r0, #1
 8002ece:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8002ed2:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ed6:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002eda:	2000      	movs	r0, #0
 8002edc:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ee0:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ee2:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ee4:	1aca      	subs	r2, r1, r3
 8002ee6:	0091      	lsls	r1, r2, #2
 8002ee8:	4421      	add	r1, r4
 8002eea:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eec:	3301      	adds	r3, #1
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	6865      	ldr	r5, [r4, #4]
 8002ef2:	42ab      	cmp	r3, r5
 8002ef4:	d3e6      	bcc.n	8002ec4 <HAL_PCD_Init+0x74>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e015      	b.n	8002f26 <HAL_PCD_Init+0xd6>
    hpcd->OUT_ep[i].is_in = 0U;
 8002efa:	00d8      	lsls	r0, r3, #3
 8002efc:	1ac1      	subs	r1, r0, r3
 8002efe:	008a      	lsls	r2, r1, #2
 8002f00:	4422      	add	r2, r4
 8002f02:	2100      	movs	r1, #0
 8002f04:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8002f08:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f0c:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f10:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f14:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f18:	1ac2      	subs	r2, r0, r3
 8002f1a:	0090      	lsls	r0, r2, #2
 8002f1c:	4420      	add	r0, r4
 8002f1e:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f22:	3301      	adds	r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	429d      	cmp	r5, r3
 8002f28:	d8e7      	bhi.n	8002efa <HAL_PCD_Init+0xaa>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f2a:	4625      	mov	r5, r4
 8002f2c:	f855 7b10 	ldr.w	r7, [r5], #16
 8002f30:	466e      	mov	r6, sp
 8002f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f34:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002f36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002f3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f3e:	e886 0003 	stmia.w	r6, {r0, r1}
 8002f42:	1d23      	adds	r3, r4, #4
 8002f44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f46:	4638      	mov	r0, r7
 8002f48:	f006 ffe2 	bl	8009f10 <USB_DevInit>
 8002f4c:	4605      	mov	r5, r0
 8002f4e:	b960      	cbnz	r0, 8002f6a <HAL_PCD_Init+0x11a>
  hpcd->USB_Address = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8002f5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d008      	beq.n	8002f74 <HAL_PCD_Init+0x124>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f62:	6820      	ldr	r0, [r4, #0]
 8002f64:	f007 fb95 	bl	800a692 <USB_DevDisconnect>
  return HAL_OK;
 8002f68:	e79e      	b.n	8002ea8 <HAL_PCD_Init+0x58>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8002f70:	2501      	movs	r5, #1
 8002f72:	e799      	b.n	8002ea8 <HAL_PCD_Init+0x58>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f74:	4620      	mov	r0, r4
 8002f76:	f000 fccf 	bl	8003918 <HAL_PCDEx_ActivateLPM>
 8002f7a:	e7f2      	b.n	8002f62 <HAL_PCD_Init+0x112>
    return HAL_ERROR;
 8002f7c:	2501      	movs	r5, #1
 8002f7e:	e793      	b.n	8002ea8 <HAL_PCD_Init+0x58>

08002f80 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f80:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8002f82:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d019      	beq.n	8002fbe <HAL_PCD_Start+0x3e>
{
 8002f8a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f92:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d00a      	beq.n	8002fae <HAL_PCD_Start+0x2e>
 8002f98:	4604      	mov	r4, r0
  (void)USB_DevConnect(hpcd->Instance);
 8002f9a:	6800      	ldr	r0, [r0, #0]
 8002f9c:	f007 fb6d 	bl	800a67a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002fa0:	6820      	ldr	r0, [r4, #0]
 8002fa2:	f006 ff63 	bl	8009e6c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002fac:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002fae:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d0f1      	beq.n	8002f98 <HAL_PCD_Start+0x18>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002fb4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fba:	6393      	str	r3, [r2, #56]	; 0x38
 8002fbc:	e7ec      	b.n	8002f98 <HAL_PCD_Start+0x18>
  __HAL_LOCK(hpcd);
 8002fbe:	2002      	movs	r0, #2
}
 8002fc0:	4770      	bx	lr
	...

08002fc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fc4:	b570      	push	{r4, r5, r6, lr}
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fca:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fcc:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fce:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd6:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002fd8:	6921      	ldr	r1, [r4, #16]
 8002fda:	2901      	cmp	r1, #1
 8002fdc:	d011      	beq.n	8003002 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fde:	4937      	ldr	r1, [pc, #220]	; (80030bc <PCD_EP_OutXfrComplete_int+0xf8>)
 8002fe0:	428e      	cmp	r6, r1
 8002fe2:	d054      	beq.n	800308e <PCD_EP_OutXfrComplete_int+0xca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fe4:	b93d      	cbnz	r5, 8002ff6 <PCD_EP_OutXfrComplete_int+0x32>
 8002fe6:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8002fea:	0093      	lsls	r3, r2, #2
 8002fec:	4423      	add	r3, r4
 8002fee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d05c      	beq.n	80030b0 <PCD_EP_OutXfrComplete_int+0xec>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ff6:	b2e9      	uxtb	r1, r5
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f00a ff63 	bl	800dec4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8002ffe:	2000      	movs	r0, #0
 8003000:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003002:	f012 0f08 	tst.w	r2, #8
 8003006:	d009      	beq.n	800301c <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003008:	492d      	ldr	r1, [pc, #180]	; (80030c0 <PCD_EP_OutXfrComplete_int+0xfc>)
 800300a:	428e      	cmp	r6, r1
 800300c:	d9f7      	bls.n	8002ffe <PCD_EP_OutXfrComplete_int+0x3a>
 800300e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003012:	d0f4      	beq.n	8002ffe <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003014:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003018:	609a      	str	r2, [r3, #8]
 800301a:	e7f0      	b.n	8002ffe <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800301c:	f012 0f20 	tst.w	r2, #32
 8003020:	d128      	bne.n	8003074 <PCD_EP_OutXfrComplete_int+0xb0>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003022:	f012 0f28 	tst.w	r2, #40	; 0x28
 8003026:	d1ea      	bne.n	8002ffe <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003028:	4925      	ldr	r1, [pc, #148]	; (80030c0 <PCD_EP_OutXfrComplete_int+0xfc>)
 800302a:	428e      	cmp	r6, r1
 800302c:	d902      	bls.n	8003034 <PCD_EP_OutXfrComplete_int+0x70>
 800302e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003032:	d122      	bne.n	800307a <PCD_EP_OutXfrComplete_int+0xb6>
          hpcd->OUT_ep[epnum].maxpacket -
 8003034:	00e9      	lsls	r1, r5, #3
 8003036:	1b49      	subs	r1, r1, r5
 8003038:	008a      	lsls	r2, r1, #2
 800303a:	4422      	add	r2, r4
 800303c:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003046:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003048:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800304c:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8003050:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8003054:	440b      	add	r3, r1
 8003056:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800305a:	b935      	cbnz	r5, 800306a <PCD_EP_OutXfrComplete_int+0xa6>
 800305c:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8003060:	0093      	lsls	r3, r2, #2
 8003062:	4423      	add	r3, r4
 8003064:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003068:	b15b      	cbz	r3, 8003082 <PCD_EP_OutXfrComplete_int+0xbe>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800306a:	b2e9      	uxtb	r1, r5
 800306c:	4620      	mov	r0, r4
 800306e:	f00a ff29 	bl	800dec4 <HAL_PCD_DataOutStageCallback>
 8003072:	e7c4      	b.n	8002ffe <PCD_EP_OutXfrComplete_int+0x3a>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003074:	2220      	movs	r2, #32
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	e7c1      	b.n	8002ffe <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800307a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	e7bd      	b.n	8002ffe <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003082:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003086:	2101      	movs	r1, #1
 8003088:	f007 fb54 	bl	800a734 <USB_EP0_OutStart>
 800308c:	e7ed      	b.n	800306a <PCD_EP_OutXfrComplete_int+0xa6>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800308e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003092:	d109      	bne.n	80030a8 <PCD_EP_OutXfrComplete_int+0xe4>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003094:	f012 0f20 	tst.w	r2, #32
 8003098:	d001      	beq.n	800309e <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800309a:	2220      	movs	r2, #32
 800309c:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800309e:	b2e9      	uxtb	r1, r5
 80030a0:	4620      	mov	r0, r4
 80030a2:	f00a ff0f 	bl	800dec4 <HAL_PCD_DataOutStageCallback>
 80030a6:	e7aa      	b.n	8002ffe <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80030ac:	609a      	str	r2, [r3, #8]
 80030ae:	e7a6      	b.n	8002ffe <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80030b0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80030b4:	2100      	movs	r1, #0
 80030b6:	f007 fb3d 	bl	800a734 <USB_EP0_OutStart>
 80030ba:	e79c      	b.n	8002ff6 <PCD_EP_OutXfrComplete_int+0x32>
 80030bc:	4f54310a 	.word	0x4f54310a
 80030c0:	4f54300a 	.word	0x4f54300a

080030c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030c4:	b538      	push	{r3, r4, r5, lr}
 80030c6:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030c8:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030ca:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030cc:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 80030d0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030d4:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <PCD_EP_OutSetupPacket_int+0x4c>)
 80030d6:	429d      	cmp	r5, r3
 80030d8:	d907      	bls.n	80030ea <PCD_EP_OutSetupPacket_int+0x26>
 80030da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80030de:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80030e2:	d002      	beq.n	80030ea <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030e8:	608b      	str	r3, [r1, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030ea:	4620      	mov	r0, r4
 80030ec:	f00a fee2 	bl	800deb4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030f0:	4b07      	ldr	r3, [pc, #28]	; (8003110 <PCD_EP_OutSetupPacket_int+0x4c>)
 80030f2:	429d      	cmp	r5, r3
 80030f4:	d902      	bls.n	80030fc <PCD_EP_OutSetupPacket_int+0x38>
 80030f6:	6923      	ldr	r3, [r4, #16]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d001      	beq.n	8003100 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 80030fc:	2000      	movs	r0, #0
 80030fe:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003100:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003104:	2101      	movs	r1, #1
 8003106:	6820      	ldr	r0, [r4, #0]
 8003108:	f007 fb14 	bl	800a734 <USB_EP0_OutStart>
 800310c:	e7f6      	b.n	80030fc <PCD_EP_OutSetupPacket_int+0x38>
 800310e:	bf00      	nop
 8003110:	4f54300a 	.word	0x4f54300a

08003114 <HAL_PCD_IRQHandler>:
{
 8003114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003118:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800311a:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800311c:	4628      	mov	r0, r5
 800311e:	f007 faf5 	bl	800a70c <USB_GetMode>
 8003122:	b108      	cbz	r0, 8003128 <HAL_PCD_IRQHandler+0x14>
}
 8003124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003128:	462f      	mov	r7, r5
 800312a:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800312c:	6820      	ldr	r0, [r4, #0]
 800312e:	f007 fabc 	bl	800a6aa <USB_ReadInterrupts>
 8003132:	2800      	cmp	r0, #0
 8003134:	d0f6      	beq.n	8003124 <HAL_PCD_IRQHandler+0x10>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003136:	6820      	ldr	r0, [r4, #0]
 8003138:	f007 fab7 	bl	800a6aa <USB_ReadInterrupts>
 800313c:	f010 0f02 	tst.w	r0, #2
 8003140:	d004      	beq.n	800314c <HAL_PCD_IRQHandler+0x38>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003142:	6822      	ldr	r2, [r4, #0]
 8003144:	6953      	ldr	r3, [r2, #20]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800314c:	6820      	ldr	r0, [r4, #0]
 800314e:	f007 faac 	bl	800a6aa <USB_ReadInterrupts>
 8003152:	f010 0f10 	tst.w	r0, #16
 8003156:	d015      	beq.n	8003184 <HAL_PCD_IRQHandler+0x70>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003158:	6822      	ldr	r2, [r4, #0]
 800315a:	6993      	ldr	r3, [r2, #24]
 800315c:	f023 0310 	bic.w	r3, r3, #16
 8003160:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8003162:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003166:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800316a:	f3c8 4343 	ubfx	r3, r8, #17, #4
 800316e:	2b02      	cmp	r3, #2
 8003170:	f000 8085 	beq.w	800327e <HAL_PCD_IRQHandler+0x16a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003174:	2b06      	cmp	r3, #6
 8003176:	f000 80a5 	beq.w	80032c4 <HAL_PCD_IRQHandler+0x1b0>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800317a:	6822      	ldr	r2, [r4, #0]
 800317c:	6993      	ldr	r3, [r2, #24]
 800317e:	f043 0310 	orr.w	r3, r3, #16
 8003182:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003184:	6820      	ldr	r0, [r4, #0]
 8003186:	f007 fa90 	bl	800a6aa <USB_ReadInterrupts>
 800318a:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 800318e:	f040 80ad 	bne.w	80032ec <HAL_PCD_IRQHandler+0x1d8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003192:	6820      	ldr	r0, [r4, #0]
 8003194:	f007 fa89 	bl	800a6aa <USB_ReadInterrupts>
 8003198:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 800319c:	f040 80f1 	bne.w	8003382 <HAL_PCD_IRQHandler+0x26e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80031a0:	6820      	ldr	r0, [r4, #0]
 80031a2:	f007 fa82 	bl	800a6aa <USB_ReadInterrupts>
 80031a6:	2800      	cmp	r0, #0
 80031a8:	f2c0 815f 	blt.w	800346a <HAL_PCD_IRQHandler+0x356>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031ac:	6820      	ldr	r0, [r4, #0]
 80031ae:	f007 fa7c 	bl	800a6aa <USB_ReadInterrupts>
 80031b2:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80031b6:	d00a      	beq.n	80031ce <HAL_PCD_IRQHandler+0xba>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031b8:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 80031bc:	f013 0f01 	tst.w	r3, #1
 80031c0:	f040 816d 	bne.w	800349e <HAL_PCD_IRQHandler+0x38a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031c4:	6822      	ldr	r2, [r4, #0]
 80031c6:	6953      	ldr	r3, [r2, #20]
 80031c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031cc:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80031ce:	6820      	ldr	r0, [r4, #0]
 80031d0:	f007 fa6b 	bl	800a6aa <USB_ReadInterrupts>
 80031d4:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 80031d8:	d015      	beq.n	8003206 <HAL_PCD_IRQHandler+0xf2>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80031da:	6822      	ldr	r2, [r4, #0]
 80031dc:	6953      	ldr	r3, [r2, #20]
 80031de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031e2:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 80031e4:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f040 815c 	bne.w	80034a6 <HAL_PCD_IRQHandler+0x392>
        hpcd->LPM_State = LPM_L1;
 80031ee:	2101      	movs	r1, #1
 80031f0:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80031fc:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003200:	4620      	mov	r0, r4
 8003202:	f000 fb9d 	bl	8003940 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003206:	6820      	ldr	r0, [r4, #0]
 8003208:	f007 fa4f 	bl	800a6aa <USB_ReadInterrupts>
 800320c:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8003210:	f040 814d 	bne.w	80034ae <HAL_PCD_IRQHandler+0x39a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003214:	6820      	ldr	r0, [r4, #0]
 8003216:	f007 fa48 	bl	800a6aa <USB_ReadInterrupts>
 800321a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800321e:	f040 81ab 	bne.w	8003578 <HAL_PCD_IRQHandler+0x464>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003222:	6820      	ldr	r0, [r4, #0]
 8003224:	f007 fa41 	bl	800a6aa <USB_ReadInterrupts>
 8003228:	f010 0f08 	tst.w	r0, #8
 800322c:	f040 81bc 	bne.w	80035a8 <HAL_PCD_IRQHandler+0x494>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003230:	6820      	ldr	r0, [r4, #0]
 8003232:	f007 fa3a 	bl	800a6aa <USB_ReadInterrupts>
 8003236:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800323a:	f040 81be 	bne.w	80035ba <HAL_PCD_IRQHandler+0x4a6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800323e:	6820      	ldr	r0, [r4, #0]
 8003240:	f007 fa33 	bl	800a6aa <USB_ReadInterrupts>
 8003244:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8003248:	f040 81c1 	bne.w	80035ce <HAL_PCD_IRQHandler+0x4ba>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800324c:	6820      	ldr	r0, [r4, #0]
 800324e:	f007 fa2c 	bl	800a6aa <USB_ReadInterrupts>
 8003252:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003256:	f040 81c4 	bne.w	80035e2 <HAL_PCD_IRQHandler+0x4ce>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800325a:	6820      	ldr	r0, [r4, #0]
 800325c:	f007 fa25 	bl	800a6aa <USB_ReadInterrupts>
 8003260:	f010 0f04 	tst.w	r0, #4
 8003264:	f43f af5e 	beq.w	8003124 <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800326c:	f015 0f04 	tst.w	r5, #4
 8003270:	f040 81c0 	bne.w	80035f4 <HAL_PCD_IRQHandler+0x4e0>
      hpcd->Instance->GOTGINT |= temp;
 8003274:	6822      	ldr	r2, [r4, #0]
 8003276:	6853      	ldr	r3, [r2, #4]
 8003278:	432b      	orrs	r3, r5
 800327a:	6053      	str	r3, [r2, #4]
 800327c:	e752      	b.n	8003124 <HAL_PCD_IRQHandler+0x10>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800327e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003282:	ea18 0f03 	tst.w	r8, r3
 8003286:	f43f af78 	beq.w	800317a <HAL_PCD_IRQHandler+0x66>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800328a:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
 800328e:	ebab 0309 	sub.w	r3, fp, r9
 8003292:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8003296:	44a2      	add	sl, r4
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003298:	ea4f 1818 	mov.w	r8, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800329c:	f3c8 020a 	ubfx	r2, r8, #0, #11
 80032a0:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 80032a4:	4628      	mov	r0, r5
 80032a6:	f007 f969 	bl	800a57c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032aa:	f3c8 080a 	ubfx	r8, r8, #0, #11
 80032ae:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 80032b2:	4443      	add	r3, r8
 80032b4:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032b8:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
 80032bc:	4443      	add	r3, r8
 80032be:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 80032c2:	e75a      	b.n	800317a <HAL_PCD_IRQHandler+0x66>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032c4:	2208      	movs	r2, #8
 80032c6:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80032ca:	4628      	mov	r0, r5
 80032cc:	f007 f956 	bl	800a57c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032d0:	f3c8 180a 	ubfx	r8, r8, #4, #11
 80032d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032d8:	eba3 0109 	sub.w	r1, r3, r9
 80032dc:	008a      	lsls	r2, r1, #2
 80032de:	4422      	add	r2, r4
 80032e0:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80032e4:	4443      	add	r3, r8
 80032e6:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80032ea:	e746      	b.n	800317a <HAL_PCD_IRQHandler+0x66>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032ec:	6820      	ldr	r0, [r4, #0]
 80032ee:	f007 f9e0 	bl	800a6b2 <USB_ReadDevAllOutEpInterrupt>
 80032f2:	4680      	mov	r8, r0
      epnum = 0U;
 80032f4:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80032f6:	e017      	b.n	8003328 <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032f8:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80032fc:	2201      	movs	r2, #1
 80032fe:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003302:	4649      	mov	r1, r9
 8003304:	4620      	mov	r0, r4
 8003306:	f7ff fe5d 	bl	8002fc4 <PCD_EP_OutXfrComplete_int>
 800330a:	e01d      	b.n	8003348 <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800330c:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003310:	2208      	movs	r2, #8
 8003312:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003316:	4649      	mov	r1, r9
 8003318:	4620      	mov	r0, r4
 800331a:	f7ff fed3 	bl	80030c4 <PCD_EP_OutSetupPacket_int>
 800331e:	e016      	b.n	800334e <HAL_PCD_IRQHandler+0x23a>
        epnum++;
 8003320:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8003324:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8003328:	f1b8 0f00 	cmp.w	r8, #0
 800332c:	f43f af31 	beq.w	8003192 <HAL_PCD_IRQHandler+0x7e>
        if ((ep_intr & 0x1U) != 0U)
 8003330:	f018 0f01 	tst.w	r8, #1
 8003334:	d0f4      	beq.n	8003320 <HAL_PCD_IRQHandler+0x20c>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003336:	fa5f f189 	uxtb.w	r1, r9
 800333a:	6820      	ldr	r0, [r4, #0]
 800333c:	f007 f9c9 	bl	800a6d2 <USB_ReadDevOutEPInterrupt>
 8003340:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003342:	f010 0f01 	tst.w	r0, #1
 8003346:	d1d7      	bne.n	80032f8 <HAL_PCD_IRQHandler+0x1e4>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003348:	f01a 0f08 	tst.w	sl, #8
 800334c:	d1de      	bne.n	800330c <HAL_PCD_IRQHandler+0x1f8>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800334e:	f01a 0f10 	tst.w	sl, #16
 8003352:	d004      	beq.n	800335e <HAL_PCD_IRQHandler+0x24a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003354:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003358:	2210      	movs	r2, #16
 800335a:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800335e:	f01a 0f20 	tst.w	sl, #32
 8003362:	d004      	beq.n	800336e <HAL_PCD_IRQHandler+0x25a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003364:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003368:	2220      	movs	r2, #32
 800336a:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800336e:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8003372:	d0d5      	beq.n	8003320 <HAL_PCD_IRQHandler+0x20c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003374:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003378:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800337c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8003380:	e7ce      	b.n	8003320 <HAL_PCD_IRQHandler+0x20c>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003382:	6820      	ldr	r0, [r4, #0]
 8003384:	f007 f99d 	bl	800a6c2 <USB_ReadDevAllInEpInterrupt>
 8003388:	4680      	mov	r8, r0
      epnum = 0U;
 800338a:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800338c:	e02a      	b.n	80033e4 <HAL_PCD_IRQHandler+0x2d0>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800338e:	4659      	mov	r1, fp
 8003390:	4620      	mov	r0, r4
 8003392:	f00a fda3 	bl	800dedc <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003396:	f01a 0f08 	tst.w	sl, #8
 800339a:	d004      	beq.n	80033a6 <HAL_PCD_IRQHandler+0x292>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800339c:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80033a0:	2208      	movs	r2, #8
 80033a2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033a6:	f01a 0f10 	tst.w	sl, #16
 80033aa:	d004      	beq.n	80033b6 <HAL_PCD_IRQHandler+0x2a2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033ac:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80033b0:	2210      	movs	r2, #16
 80033b2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033b6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80033ba:	d004      	beq.n	80033c6 <HAL_PCD_IRQHandler+0x2b2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033bc:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80033c0:	2240      	movs	r2, #64	; 0x40
 80033c2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033c6:	f01a 0f02 	tst.w	sl, #2
 80033ca:	d004      	beq.n	80033d6 <HAL_PCD_IRQHandler+0x2c2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80033cc:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80033d0:	2202      	movs	r2, #2
 80033d2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80033d6:	f01a 0f80 	tst.w	sl, #128	; 0x80
 80033da:	d141      	bne.n	8003460 <HAL_PCD_IRQHandler+0x34c>
        epnum++;
 80033dc:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 80033e0:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80033e4:	f1b8 0f00 	cmp.w	r8, #0
 80033e8:	f43f aeda 	beq.w	80031a0 <HAL_PCD_IRQHandler+0x8c>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80033ec:	f018 0f01 	tst.w	r8, #1
 80033f0:	d0f4      	beq.n	80033dc <HAL_PCD_IRQHandler+0x2c8>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033f2:	fa5f fb89 	uxtb.w	fp, r9
 80033f6:	4659      	mov	r1, fp
 80033f8:	6820      	ldr	r0, [r4, #0]
 80033fa:	f007 f973 	bl	800a6e4 <USB_ReadDevInEPInterrupt>
 80033fe:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003400:	f010 0f01 	tst.w	r0, #1
 8003404:	d0c7      	beq.n	8003396 <HAL_PCD_IRQHandler+0x282>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003406:	f009 030f 	and.w	r3, r9, #15
 800340a:	2101      	movs	r1, #1
 800340c:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003410:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8003414:	ea23 0302 	bic.w	r3, r3, r2
 8003418:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800341c:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8003420:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 8003424:	6923      	ldr	r3, [r4, #16]
 8003426:	428b      	cmp	r3, r1
 8003428:	d1b1      	bne.n	800338e <HAL_PCD_IRQHandler+0x27a>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800342a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800342e:	eba2 0209 	sub.w	r2, r2, r9
 8003432:	0093      	lsls	r3, r2, #2
 8003434:	4423      	add	r3, r4
 8003436:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003438:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800343a:	440a      	add	r2, r1
 800343c:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800343e:	f1b9 0f00 	cmp.w	r9, #0
 8003442:	d1a4      	bne.n	800338e <HAL_PCD_IRQHandler+0x27a>
 8003444:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 8003448:	0093      	lsls	r3, r2, #2
 800344a:	4423      	add	r3, r4
 800344c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344e:	2b00      	cmp	r3, #0
 8003450:	d19d      	bne.n	800338e <HAL_PCD_IRQHandler+0x27a>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003452:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003456:	2101      	movs	r1, #1
 8003458:	6820      	ldr	r0, [r4, #0]
 800345a:	f007 f96b 	bl	800a734 <USB_EP0_OutStart>
 800345e:	e796      	b.n	800338e <HAL_PCD_IRQHandler+0x27a>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003460:	4649      	mov	r1, r9
 8003462:	4620      	mov	r0, r4
 8003464:	f7ff fc8a 	bl	8002d7c <PCD_WriteEmptyTxFifo>
 8003468:	e7b8      	b.n	80033dc <HAL_PCD_IRQHandler+0x2c8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800346a:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8003476:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800347a:	2b01      	cmp	r3, #1
 800347c:	d008      	beq.n	8003490 <HAL_PCD_IRQHandler+0x37c>
        HAL_PCD_ResumeCallback(hpcd);
 800347e:	4620      	mov	r0, r4
 8003480:	f00a fd6c 	bl	800df5c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003484:	6822      	ldr	r2, [r4, #0]
 8003486:	6953      	ldr	r3, [r2, #20]
 8003488:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800348c:	6153      	str	r3, [r2, #20]
 800348e:	e68d      	b.n	80031ac <HAL_PCD_IRQHandler+0x98>
        hpcd->LPM_State = LPM_L0;
 8003490:	2100      	movs	r1, #0
 8003492:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003496:	4620      	mov	r0, r4
 8003498:	f000 fa52 	bl	8003940 <HAL_PCDEx_LPM_Callback>
 800349c:	e7f2      	b.n	8003484 <HAL_PCD_IRQHandler+0x370>
        HAL_PCD_SuspendCallback(hpcd);
 800349e:	4620      	mov	r0, r4
 80034a0:	f00a fd44 	bl	800df2c <HAL_PCD_SuspendCallback>
 80034a4:	e68e      	b.n	80031c4 <HAL_PCD_IRQHandler+0xb0>
        HAL_PCD_SuspendCallback(hpcd);
 80034a6:	4620      	mov	r0, r4
 80034a8:	f00a fd40 	bl	800df2c <HAL_PCD_SuspendCallback>
 80034ac:	e6ab      	b.n	8003206 <HAL_PCD_IRQHandler+0xf2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034ae:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 80034b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80034b6:	f023 0301 	bic.w	r3, r3, #1
 80034ba:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80034be:	2110      	movs	r1, #16
 80034c0:	6820      	ldr	r0, [r4, #0]
 80034c2:	f006 fcf7 	bl	8009eb4 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c6:	e020      	b.n	800350a <HAL_PCD_IRQHandler+0x3f6>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80034c8:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 80034cc:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 80034d0:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80034d4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80034d8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80034dc:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80034e0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80034e4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80034e8:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80034ec:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80034f0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80034f4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80034f8:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034fc:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003500:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003504:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003508:	3601      	adds	r6, #1
 800350a:	6863      	ldr	r3, [r4, #4]
 800350c:	42b3      	cmp	r3, r6
 800350e:	d8db      	bhi.n	80034c8 <HAL_PCD_IRQHandler+0x3b4>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003510:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8003514:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003518:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800351c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800351e:	b1eb      	cbz	r3, 800355c <HAL_PCD_IRQHandler+0x448>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003520:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8003524:	f043 030b 	orr.w	r3, r3, #11
 8003528:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800352c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8003530:	f043 030b 	orr.w	r3, r3, #11
 8003534:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003538:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 800353c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003540:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003544:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003548:	7c21      	ldrb	r1, [r4, #16]
 800354a:	6820      	ldr	r0, [r4, #0]
 800354c:	f007 f8f2 	bl	800a734 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003550:	6822      	ldr	r2, [r4, #0]
 8003552:	6953      	ldr	r3, [r2, #20]
 8003554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003558:	6153      	str	r3, [r2, #20]
 800355a:	e65b      	b.n	8003214 <HAL_PCD_IRQHandler+0x100>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800355c:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8003560:	f242 032b 	movw	r3, #8235	; 0x202b
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800356a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800356e:	f043 030b 	orr.w	r3, r3, #11
 8003572:	f8c8 3010 	str.w	r3, [r8, #16]
 8003576:	e7df      	b.n	8003538 <HAL_PCD_IRQHandler+0x424>
      (void)USB_ActivateSetup(hpcd->Instance);
 8003578:	6820      	ldr	r0, [r4, #0]
 800357a:	f007 f8cb 	bl	800a714 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800357e:	6820      	ldr	r0, [r4, #0]
 8003580:	f006 fd8a 	bl	800a098 <USB_GetDevSpeed>
 8003584:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003586:	6825      	ldr	r5, [r4, #0]
 8003588:	f000 ffa6 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 800358c:	7b22      	ldrb	r2, [r4, #12]
 800358e:	4601      	mov	r1, r0
 8003590:	4628      	mov	r0, r5
 8003592:	f006 fbf5 	bl	8009d80 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8003596:	4620      	mov	r0, r4
 8003598:	f00a fcb1 	bl	800defe <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800359c:	6822      	ldr	r2, [r4, #0]
 800359e:	6953      	ldr	r3, [r2, #20]
 80035a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035a4:	6153      	str	r3, [r2, #20]
 80035a6:	e63c      	b.n	8003222 <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_SOFCallback(hpcd);
 80035a8:	4620      	mov	r0, r4
 80035aa:	f00a fca2 	bl	800def2 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035ae:	6822      	ldr	r2, [r4, #0]
 80035b0:	6953      	ldr	r3, [r2, #20]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	6153      	str	r3, [r2, #20]
 80035b8:	e63a      	b.n	8003230 <HAL_PCD_IRQHandler+0x11c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035ba:	2100      	movs	r1, #0
 80035bc:	4620      	mov	r0, r4
 80035be:	f00a fcd9 	bl	800df74 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035c2:	6822      	ldr	r2, [r4, #0]
 80035c4:	6953      	ldr	r3, [r2, #20]
 80035c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ca:	6153      	str	r3, [r2, #20]
 80035cc:	e637      	b.n	800323e <HAL_PCD_IRQHandler+0x12a>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035ce:	2100      	movs	r1, #0
 80035d0:	4620      	mov	r0, r4
 80035d2:	f00a fcc9 	bl	800df68 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035d6:	6822      	ldr	r2, [r4, #0]
 80035d8:	6953      	ldr	r3, [r2, #20]
 80035da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035de:	6153      	str	r3, [r2, #20]
 80035e0:	e634      	b.n	800324c <HAL_PCD_IRQHandler+0x138>
      HAL_PCD_ConnectCallback(hpcd);
 80035e2:	4620      	mov	r0, r4
 80035e4:	f00a fccc 	bl	800df80 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035e8:	6822      	ldr	r2, [r4, #0]
 80035ea:	6953      	ldr	r3, [r2, #20]
 80035ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035f0:	6153      	str	r3, [r2, #20]
 80035f2:	e632      	b.n	800325a <HAL_PCD_IRQHandler+0x146>
        HAL_PCD_DisconnectCallback(hpcd);
 80035f4:	4620      	mov	r0, r4
 80035f6:	f00a fcc9 	bl	800df8c <HAL_PCD_DisconnectCallback>
 80035fa:	e63b      	b.n	8003274 <HAL_PCD_IRQHandler+0x160>

080035fc <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80035fc:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003600:	2b01      	cmp	r3, #1
 8003602:	d00d      	beq.n	8003620 <HAL_PCD_SetAddress+0x24>
{
 8003604:	b510      	push	{r4, lr}
 8003606:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003608:	2301      	movs	r3, #1
 800360a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800360e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003612:	6800      	ldr	r0, [r0, #0]
 8003614:	f007 f821 	bl	800a65a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003618:	2000      	movs	r0, #0
 800361a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800361e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003620:	2002      	movs	r0, #2
}
 8003622:	4770      	bx	lr

08003624 <HAL_PCD_EP_Open>:
{
 8003624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8003626:	f011 0f80 	tst.w	r1, #128	; 0x80
 800362a:	d128      	bne.n	800367e <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800362c:	f001 060f 	and.w	r6, r1, #15
 8003630:	00f5      	lsls	r5, r6, #3
 8003632:	1baf      	subs	r7, r5, r6
 8003634:	00bc      	lsls	r4, r7, #2
 8003636:	4627      	mov	r7, r4
 8003638:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 800363c:	4404      	add	r4, r0
 800363e:	3404      	adds	r4, #4
    ep->is_in = 0U;
 8003640:	463e      	mov	r6, r7
 8003642:	4406      	add	r6, r0
 8003644:	2500      	movs	r5, #0
 8003646:	f886 51fd 	strb.w	r5, [r6, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800364a:	f001 010f 	and.w	r1, r1, #15
 800364e:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 8003650:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 8003652:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in != 0U)
 8003654:	7862      	ldrb	r2, [r4, #1]
 8003656:	b102      	cbz	r2, 800365a <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8003658:	80e1      	strh	r1, [r4, #6]
  if (ep_type == EP_TYPE_BULK)
 800365a:	2b02      	cmp	r3, #2
 800365c:	d01e      	beq.n	800369c <HAL_PCD_EP_Open+0x78>
  __HAL_LOCK(hpcd);
 800365e:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003662:	2b01      	cmp	r3, #1
 8003664:	d01d      	beq.n	80036a2 <HAL_PCD_EP_Open+0x7e>
 8003666:	4605      	mov	r5, r0
 8003668:	2301      	movs	r3, #1
 800366a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800366e:	4621      	mov	r1, r4
 8003670:	6800      	ldr	r0, [r0, #0]
 8003672:	f006 fd21 	bl	800a0b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003676:	2000      	movs	r0, #0
 8003678:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 800367c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800367e:	f001 060f 	and.w	r6, r1, #15
 8003682:	00f5      	lsls	r5, r6, #3
 8003684:	1baf      	subs	r7, r5, r6
 8003686:	00bc      	lsls	r4, r7, #2
 8003688:	4627      	mov	r7, r4
 800368a:	3438      	adds	r4, #56	; 0x38
 800368c:	4404      	add	r4, r0
 800368e:	3404      	adds	r4, #4
    ep->is_in = 1U;
 8003690:	463e      	mov	r6, r7
 8003692:	4406      	add	r6, r0
 8003694:	2501      	movs	r5, #1
 8003696:	f886 503d 	strb.w	r5, [r6, #61]	; 0x3d
 800369a:	e7d6      	b.n	800364a <HAL_PCD_EP_Open+0x26>
    ep->data_pid_start = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	7123      	strb	r3, [r4, #4]
 80036a0:	e7dd      	b.n	800365e <HAL_PCD_EP_Open+0x3a>
  __HAL_LOCK(hpcd);
 80036a2:	2002      	movs	r0, #2
 80036a4:	e7ea      	b.n	800367c <HAL_PCD_EP_Open+0x58>

080036a6 <HAL_PCD_EP_Close>:
{
 80036a6:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 80036a8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80036ac:	d121      	bne.n	80036f2 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036ae:	f001 050f 	and.w	r5, r1, #15
 80036b2:	00ea      	lsls	r2, r5, #3
 80036b4:	1b54      	subs	r4, r2, r5
 80036b6:	00a3      	lsls	r3, r4, #2
 80036b8:	461c      	mov	r4, r3
 80036ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036be:	4403      	add	r3, r0
 80036c0:	3304      	adds	r3, #4
    ep->is_in = 0U;
 80036c2:	4625      	mov	r5, r4
 80036c4:	4405      	add	r5, r0
 80036c6:	2200      	movs	r2, #0
 80036c8:	f885 21fd 	strb.w	r2, [r5, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 80036cc:	f001 010f 	and.w	r1, r1, #15
 80036d0:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd);
 80036d2:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80036d6:	2a01      	cmp	r2, #1
 80036d8:	d01a      	beq.n	8003710 <HAL_PCD_EP_Close+0x6a>
 80036da:	4604      	mov	r4, r0
 80036dc:	2201      	movs	r2, #1
 80036de:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80036e2:	4619      	mov	r1, r3
 80036e4:	6800      	ldr	r0, [r0, #0]
 80036e6:	f006 fd2f 	bl	800a148 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036ea:	2000      	movs	r0, #0
 80036ec:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80036f0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f2:	f001 040f 	and.w	r4, r1, #15
 80036f6:	00e2      	lsls	r2, r4, #3
 80036f8:	1b15      	subs	r5, r2, r4
 80036fa:	00ab      	lsls	r3, r5, #2
 80036fc:	461d      	mov	r5, r3
 80036fe:	3338      	adds	r3, #56	; 0x38
 8003700:	4403      	add	r3, r0
 8003702:	3304      	adds	r3, #4
    ep->is_in = 1U;
 8003704:	462c      	mov	r4, r5
 8003706:	4404      	add	r4, r0
 8003708:	2201      	movs	r2, #1
 800370a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 800370e:	e7dd      	b.n	80036cc <HAL_PCD_EP_Close+0x26>
  __HAL_LOCK(hpcd);
 8003710:	2002      	movs	r0, #2
 8003712:	e7ed      	b.n	80036f0 <HAL_PCD_EP_Close+0x4a>

08003714 <HAL_PCD_EP_Receive>:
{
 8003714:	b570      	push	{r4, r5, r6, lr}
 8003716:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800371a:	00ee      	lsls	r6, r5, #3
 800371c:	1b71      	subs	r1, r6, r5
 800371e:	008c      	lsls	r4, r1, #2
 8003720:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8003724:	4404      	add	r4, r0
 8003726:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 8003728:	1b76      	subs	r6, r6, r5
 800372a:	00b4      	lsls	r4, r6, #2
 800372c:	4404      	add	r4, r0
 800372e:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8003732:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 800373c:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8003740:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8003744:	6903      	ldr	r3, [r0, #16]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d006      	beq.n	8003758 <HAL_PCD_EP_Receive+0x44>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800374a:	b165      	cbz	r5, 8003766 <HAL_PCD_EP_Receive+0x52>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800374c:	b2da      	uxtb	r2, r3
 800374e:	6800      	ldr	r0, [r0, #0]
 8003750:	f006 fe08 	bl	800a364 <USB_EPStartXfer>
}
 8003754:	2000      	movs	r0, #0
 8003756:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8003758:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 800375c:	00b4      	lsls	r4, r6, #2
 800375e:	4404      	add	r4, r0
 8003760:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
 8003764:	e7f1      	b.n	800374a <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003766:	b2da      	uxtb	r2, r3
 8003768:	6800      	ldr	r0, [r0, #0]
 800376a:	f006 fd5b 	bl	800a224 <USB_EP0StartXfer>
 800376e:	e7f1      	b.n	8003754 <HAL_PCD_EP_Receive+0x40>

08003770 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003770:	f001 010f 	and.w	r1, r1, #15
 8003774:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003778:	008b      	lsls	r3, r1, #2
 800377a:	4418      	add	r0, r3
}
 800377c:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8003780:	4770      	bx	lr

08003782 <HAL_PCD_EP_Transmit>:
{
 8003782:	b570      	push	{r4, r5, r6, lr}
 8003784:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003788:	00ee      	lsls	r6, r5, #3
 800378a:	1b71      	subs	r1, r6, r5
 800378c:	008c      	lsls	r4, r1, #2
 800378e:	3438      	adds	r4, #56	; 0x38
 8003790:	4404      	add	r4, r0
 8003792:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 8003794:	1b76      	subs	r6, r6, r5
 8003796:	00b4      	lsls	r4, r6, #2
 8003798:	4404      	add	r4, r0
 800379a:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 800379c:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 80037a8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 80037ac:	6903      	ldr	r3, [r0, #16]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d006      	beq.n	80037c0 <HAL_PCD_EP_Transmit+0x3e>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037b2:	b15d      	cbz	r5, 80037cc <HAL_PCD_EP_Transmit+0x4a>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	6800      	ldr	r0, [r0, #0]
 80037b8:	f006 fdd4 	bl	800a364 <USB_EPStartXfer>
}
 80037bc:	2000      	movs	r0, #0
 80037be:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80037c0:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 80037c4:	00b4      	lsls	r4, r6, #2
 80037c6:	4404      	add	r4, r0
 80037c8:	64e2      	str	r2, [r4, #76]	; 0x4c
 80037ca:	e7f2      	b.n	80037b2 <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	6800      	ldr	r0, [r0, #0]
 80037d0:	f006 fd28 	bl	800a224 <USB_EP0StartXfer>
 80037d4:	e7f2      	b.n	80037bc <HAL_PCD_EP_Transmit+0x3a>

080037d6 <HAL_PCD_EP_SetStall>:
{
 80037d6:	b538      	push	{r3, r4, r5, lr}
 80037d8:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037dc:	6843      	ldr	r3, [r0, #4]
 80037de:	429d      	cmp	r5, r3
 80037e0:	d836      	bhi.n	8003850 <HAL_PCD_EP_SetStall+0x7a>
  if ((0x80U & ep_addr) == 0x80U)
 80037e2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80037e6:	d120      	bne.n	800382a <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 80037e8:	00ca      	lsls	r2, r1, #3
 80037ea:	1a54      	subs	r4, r2, r1
 80037ec:	00a3      	lsls	r3, r4, #2
 80037ee:	461c      	mov	r4, r3
 80037f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037f4:	4403      	add	r3, r0
 80037f6:	3304      	adds	r3, #4
    ep->is_in = 0U;
 80037f8:	4622      	mov	r2, r4
 80037fa:	4402      	add	r2, r0
 80037fc:	2100      	movs	r1, #0
 80037fe:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
  ep->is_stall = 1U;
 8003802:	2201      	movs	r2, #1
 8003804:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003806:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8003808:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800380c:	2a01      	cmp	r2, #1
 800380e:	d021      	beq.n	8003854 <HAL_PCD_EP_SetStall+0x7e>
 8003810:	4604      	mov	r4, r0
 8003812:	2201      	movs	r2, #1
 8003814:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003818:	4619      	mov	r1, r3
 800381a:	6800      	ldr	r0, [r0, #0]
 800381c:	f006 fec2 	bl	800a5a4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003820:	b17d      	cbz	r5, 8003842 <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 8003822:	2000      	movs	r0, #0
 8003824:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003828:	e013      	b.n	8003852 <HAL_PCD_EP_SetStall+0x7c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800382a:	00ea      	lsls	r2, r5, #3
 800382c:	1b51      	subs	r1, r2, r5
 800382e:	008b      	lsls	r3, r1, #2
 8003830:	4619      	mov	r1, r3
 8003832:	3338      	adds	r3, #56	; 0x38
 8003834:	4403      	add	r3, r0
 8003836:	3304      	adds	r3, #4
    ep->is_in = 1U;
 8003838:	4401      	add	r1, r0
 800383a:	2201      	movs	r2, #1
 800383c:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
 8003840:	e7df      	b.n	8003802 <HAL_PCD_EP_SetStall+0x2c>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003842:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003846:	7c21      	ldrb	r1, [r4, #16]
 8003848:	6820      	ldr	r0, [r4, #0]
 800384a:	f006 ff73 	bl	800a734 <USB_EP0_OutStart>
 800384e:	e7e8      	b.n	8003822 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8003850:	2001      	movs	r0, #1
}
 8003852:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003854:	2002      	movs	r0, #2
 8003856:	e7fc      	b.n	8003852 <HAL_PCD_EP_SetStall+0x7c>

08003858 <HAL_PCD_EP_ClrStall>:
{
 8003858:	b510      	push	{r4, lr}
 800385a:	f001 040f 	and.w	r4, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800385e:	6843      	ldr	r3, [r0, #4]
 8003860:	429c      	cmp	r4, r3
 8003862:	d82c      	bhi.n	80038be <HAL_PCD_EP_ClrStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 8003864:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003868:	d11d      	bne.n	80038a6 <HAL_PCD_EP_ClrStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800386a:	00e3      	lsls	r3, r4, #3
 800386c:	1b1a      	subs	r2, r3, r4
 800386e:	0091      	lsls	r1, r2, #2
 8003870:	460a      	mov	r2, r1
 8003872:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8003876:	4401      	add	r1, r0
 8003878:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800387a:	4402      	add	r2, r0
 800387c:	2300      	movs	r3, #0
 800387e:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003886:	700c      	strb	r4, [r1, #0]
  __HAL_LOCK(hpcd);
 8003888:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800388c:	2b01      	cmp	r3, #1
 800388e:	d018      	beq.n	80038c2 <HAL_PCD_EP_ClrStall+0x6a>
 8003890:	4604      	mov	r4, r0
 8003892:	2301      	movs	r3, #1
 8003894:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003898:	6800      	ldr	r0, [r0, #0]
 800389a:	f006 feb0 	bl	800a5fe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800389e:	2000      	movs	r0, #0
 80038a0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80038a4:	e00c      	b.n	80038c0 <HAL_PCD_EP_ClrStall+0x68>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038a6:	00e3      	lsls	r3, r4, #3
 80038a8:	1b1a      	subs	r2, r3, r4
 80038aa:	0091      	lsls	r1, r2, #2
 80038ac:	460a      	mov	r2, r1
 80038ae:	3138      	adds	r1, #56	; 0x38
 80038b0:	4401      	add	r1, r0
 80038b2:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80038b4:	4402      	add	r2, r0
 80038b6:	2301      	movs	r3, #1
 80038b8:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
 80038bc:	e7e1      	b.n	8003882 <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 80038be:	2001      	movs	r0, #1
}
 80038c0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80038c2:	2002      	movs	r0, #2
 80038c4:	e7fc      	b.n	80038c0 <HAL_PCD_EP_ClrStall+0x68>

080038c6 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038c6:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038c8:	6804      	ldr	r4, [r0, #0]
 80038ca:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 80038cc:	b129      	cbz	r1, 80038da <HAL_PCDEx_SetTxFiFo+0x14>
 80038ce:	460d      	mov	r5, r1
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80038d2:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	e00c      	b.n	80038f4 <HAL_PCDEx_SetTxFiFo+0x2e>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038da:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80038de:	62a0      	str	r0, [r4, #40]	; 0x28
 80038e0:	e012      	b.n	8003908 <HAL_PCDEx_SetTxFiFo+0x42>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038e2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80038e6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80038ea:	6849      	ldr	r1, [r1, #4]
 80038ec:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80038f0:	3301      	adds	r3, #1
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	1e69      	subs	r1, r5, #1
 80038f6:	428b      	cmp	r3, r1
 80038f8:	d3f3      	bcc.n	80038e2 <HAL_PCDEx_SetTxFiFo+0x1c>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80038fe:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 8003902:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003906:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 8003908:	2000      	movs	r0, #0
 800390a:	bc30      	pop	{r4, r5}
 800390c:	4770      	bx	lr

0800390e <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800390e:	6803      	ldr	r3, [r0, #0]
 8003910:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8003912:	2000      	movs	r0, #0
 8003914:	4770      	bx	lr
	...

08003918 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003918:	4602      	mov	r2, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800391a:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 800391c:	2101      	movs	r1, #1
 800391e:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003922:	2000      	movs	r0, #0
 8003924:	f882 03f4 	strb.w	r0, [r2, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800392e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003930:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003932:	4a02      	ldr	r2, [pc, #8]	; (800393c <HAL_PCDEx_ActivateLPM+0x24>)
 8003934:	430a      	orrs	r2, r1
 8003936:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
}
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	10000003 	.word	0x10000003

08003940 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003940:	4770      	bx	lr

08003942 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback (void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 8003942:	4770      	bx	lr

08003944 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003944:	4b13      	ldr	r3, [pc, #76]	; (8003994 <HAL_PWREx_ConfigSupply+0x50>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f013 0f04 	tst.w	r3, #4
 800394c:	d107      	bne.n	800395e <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800394e:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_PWREx_ConfigSupply+0x50>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	4283      	cmp	r3, r0
 8003958:	d01a      	beq.n	8003990 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800395a:	2001      	movs	r0, #1
 800395c:	4770      	bx	lr
{
 800395e:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003960:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <HAL_PWREx_ConfigSupply+0x50>)
 8003962:	68d3      	ldr	r3, [r2, #12]
 8003964:	f023 0307 	bic.w	r3, r3, #7
 8003968:	4318      	orrs	r0, r3
 800396a:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800396c:	f7fc fee8 	bl	8000740 <HAL_GetTick>
 8003970:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003972:	4b08      	ldr	r3, [pc, #32]	; (8003994 <HAL_PWREx_ConfigSupply+0x50>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800397a:	d107      	bne.n	800398c <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800397c:	f7fc fee0 	bl	8000740 <HAL_GetTick>
 8003980:	1b00      	subs	r0, r0, r4
 8003982:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003986:	d9f4      	bls.n	8003972 <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8003988:	2001      	movs	r0, #1
 800398a:	e000      	b.n	800398e <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800398c:	2000      	movs	r0, #0
}
 800398e:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8003990:	2000      	movs	r0, #0
}
 8003992:	4770      	bx	lr
 8003994:	58024800 	.word	0x58024800

08003998 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003998:	4a02      	ldr	r2, [pc, #8]	; (80039a4 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800399a:	68d3      	ldr	r3, [r2, #12]
 800399c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039a0:	60d3      	str	r3, [r2, #12]
}
 80039a2:	4770      	bx	lr
 80039a4:	58024800 	.word	0x58024800

080039a8 <HAL_PWREx_AVDCallback>:
__weak void HAL_PWREx_AVDCallback (void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 80039a8:	4770      	bx	lr
	...

080039ac <HAL_PWREx_PVD_AVD_IRQHandler>:
{
 80039ac:	b508      	push	{r3, lr}
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 80039ae:	4b17      	ldr	r3, [pc, #92]	; (8003a0c <HAL_PWREx_PVD_AVD_IRQHandler+0x60>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f013 0f10 	tst.w	r3, #16
 80039b6:	d006      	beq.n	80039c6 <HAL_PWREx_PVD_AVD_IRQHandler+0x1a>
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 80039b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80039c4:	d10c      	bne.n	80039e0 <HAL_PWREx_PVD_AVD_IRQHandler+0x34>
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 80039c6:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <HAL_PWREx_PVD_AVD_IRQHandler+0x60>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80039ce:	d006      	beq.n	80039de <HAL_PWREx_PVD_AVD_IRQHandler+0x32>
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 80039d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80039dc:	d10b      	bne.n	80039f6 <HAL_PWREx_PVD_AVD_IRQHandler+0x4a>
}
 80039de:	bd08      	pop	{r3, pc}
        HAL_PWR_PVDCallback ();
 80039e0:	f7ff ffaf 	bl	8003942 <HAL_PWR_PVDCallback>
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 80039e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80039f4:	e7e7      	b.n	80039c6 <HAL_PWREx_PVD_AVD_IRQHandler+0x1a>
        HAL_PWREx_AVDCallback ();
 80039f6:	f7ff ffd7 	bl	80039a8 <HAL_PWREx_AVDCallback>
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 80039fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003a0a:	e7e8      	b.n	80039de <HAL_PWREx_PVD_AVD_IRQHandler+0x32>
 8003a0c:	58024800 	.word	0x58024800

08003a10 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a10:	2800      	cmp	r0, #0
 8003a12:	f000 830c 	beq.w	800402e <HAL_RCC_OscConfig+0x61e>
{
 8003a16:	b538      	push	{r3, r4, r5, lr}
 8003a18:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1a:	6803      	ldr	r3, [r0, #0]
 8003a1c:	f013 0f01 	tst.w	r3, #1
 8003a20:	d025      	beq.n	8003a6e <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a22:	4a9d      	ldr	r2, [pc, #628]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003a24:	6913      	ldr	r3, [r2, #16]
 8003a26:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a2a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d015      	beq.n	8003a5c <HAL_RCC_OscConfig+0x4c>
 8003a30:	2b18      	cmp	r3, #24
 8003a32:	d00f      	beq.n	8003a54 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a34:	6863      	ldr	r3, [r4, #4]
 8003a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3a:	d03f      	beq.n	8003abc <HAL_RCC_OscConfig+0xac>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d153      	bne.n	8003ae8 <HAL_RCC_OscConfig+0xd8>
 8003a40:	4b95      	ldr	r3, [pc, #596]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e038      	b.n	8003ac6 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a54:	f002 0203 	and.w	r2, r2, #3
 8003a58:	2a02      	cmp	r2, #2
 8003a5a:	d1eb      	bne.n	8003a34 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	4b8e      	ldr	r3, [pc, #568]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_OscConfig+0x5e>
 8003a66:	6863      	ldr	r3, [r4, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 82e2 	beq.w	8004032 <HAL_RCC_OscConfig+0x622>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	f013 0f02 	tst.w	r3, #2
 8003a74:	f000 808b 	beq.w	8003b8e <HAL_RCC_OscConfig+0x17e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a78:	4a87      	ldr	r2, [pc, #540]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003a7a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a7e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8003a82:	d05a      	beq.n	8003b3a <HAL_RCC_OscConfig+0x12a>
 8003a84:	2b18      	cmp	r3, #24
 8003a86:	d055      	beq.n	8003b34 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a88:	68e3      	ldr	r3, [r4, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80c8 	beq.w	8003c20 <HAL_RCC_OscConfig+0x210>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a90:	4981      	ldr	r1, [pc, #516]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003a92:	680a      	ldr	r2, [r1, #0]
 8003a94:	f022 0219 	bic.w	r2, r2, #25
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fc fe50 	bl	8000740 <HAL_GetTick>
 8003aa0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aa2:	4b7d      	ldr	r3, [pc, #500]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f013 0f04 	tst.w	r3, #4
 8003aaa:	f040 8097 	bne.w	8003bdc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aae:	f7fc fe47 	bl	8000740 <HAL_GetTick>
 8003ab2:	1b40      	subs	r0, r0, r5
 8003ab4:	2802      	cmp	r0, #2
 8003ab6:	d9f4      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8003ab8:	2003      	movs	r0, #3
 8003aba:	e2bf      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003abc:	4a76      	ldr	r2, [pc, #472]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003abe:	6813      	ldr	r3, [r2, #0]
 8003ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac4:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ac6:	6863      	ldr	r3, [r4, #4]
 8003ac8:	b32b      	cbz	r3, 8003b16 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8003aca:	f7fc fe39 	bl	8000740 <HAL_GetTick>
 8003ace:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ad0:	4b71      	ldr	r3, [pc, #452]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ad8:	d1c9      	bne.n	8003a6e <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ada:	f7fc fe31 	bl	8000740 <HAL_GetTick>
 8003ade:	1b40      	subs	r0, r0, r5
 8003ae0:	2864      	cmp	r0, #100	; 0x64
 8003ae2:	d9f5      	bls.n	8003ad0 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8003ae4:	2003      	movs	r0, #3
 8003ae6:	e2a9      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aec:	d009      	beq.n	8003b02 <HAL_RCC_OscConfig+0xf2>
 8003aee:	4b6a      	ldr	r3, [pc, #424]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	e7e1      	b.n	8003ac6 <HAL_RCC_OscConfig+0xb6>
 8003b02:	4b65      	ldr	r3, [pc, #404]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	e7d7      	b.n	8003ac6 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8003b16:	f7fc fe13 	bl	8000740 <HAL_GetTick>
 8003b1a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b1c:	4b5e      	ldr	r3, [pc, #376]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003b24:	d0a3      	beq.n	8003a6e <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b26:	f7fc fe0b 	bl	8000740 <HAL_GetTick>
 8003b2a:	1b40      	subs	r0, r0, r5
 8003b2c:	2864      	cmp	r0, #100	; 0x64
 8003b2e:	d9f5      	bls.n	8003b1c <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8003b30:	2003      	movs	r0, #3
 8003b32:	e283      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b34:	f012 0f03 	tst.w	r2, #3
 8003b38:	d1a6      	bne.n	8003a88 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b3a:	4b57      	ldr	r3, [pc, #348]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f013 0f04 	tst.w	r3, #4
 8003b42:	d003      	beq.n	8003b4c <HAL_RCC_OscConfig+0x13c>
 8003b44:	68e3      	ldr	r3, [r4, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8275 	beq.w	8004036 <HAL_RCC_OscConfig+0x626>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4c:	f7fc fe12 	bl	8000774 <HAL_GetREVID>
 8003b50:	f241 0303 	movw	r3, #4099	; 0x1003
 8003b54:	4298      	cmp	r0, r3
 8003b56:	d812      	bhi.n	8003b7e <HAL_RCC_OscConfig+0x16e>
 8003b58:	6922      	ldr	r2, [r4, #16]
 8003b5a:	2a40      	cmp	r2, #64	; 0x40
 8003b5c:	d007      	beq.n	8003b6e <HAL_RCC_OscConfig+0x15e>
 8003b5e:	494e      	ldr	r1, [pc, #312]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003b60:	684b      	ldr	r3, [r1, #4]
 8003b62:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b66:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003b6a:	604b      	str	r3, [r1, #4]
 8003b6c:	e00f      	b.n	8003b8e <HAL_RCC_OscConfig+0x17e>
 8003b6e:	4a4a      	ldr	r2, [pc, #296]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003b70:	6853      	ldr	r3, [r2, #4]
 8003b72:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b7a:	6053      	str	r3, [r2, #4]
 8003b7c:	e007      	b.n	8003b8e <HAL_RCC_OscConfig+0x17e>
 8003b7e:	4a46      	ldr	r2, [pc, #280]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003b80:	6853      	ldr	r3, [r2, #4]
 8003b82:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003b86:	6921      	ldr	r1, [r4, #16]
 8003b88:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003b8c:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	f013 0f10 	tst.w	r3, #16
 8003b94:	f000 808a 	beq.w	8003cac <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b98:	4a3f      	ldr	r2, [pc, #252]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003b9a:	6913      	ldr	r3, [r2, #16]
 8003b9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ba0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d054      	beq.n	8003c50 <HAL_RCC_OscConfig+0x240>
 8003ba6:	2b18      	cmp	r3, #24
 8003ba8:	d04e      	beq.n	8003c48 <HAL_RCC_OscConfig+0x238>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003baa:	69e3      	ldr	r3, [r4, #28]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80ba 	beq.w	8003d26 <HAL_RCC_OscConfig+0x316>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003bb2:	4a39      	ldr	r2, [pc, #228]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003bb4:	6813      	ldr	r3, [r2, #0]
 8003bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fc fdc0 	bl	8000740 <HAL_GetTick>
 8003bc0:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bc2:	4b35      	ldr	r3, [pc, #212]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003bca:	f040 808a 	bne.w	8003ce2 <HAL_RCC_OscConfig+0x2d2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003bce:	f7fc fdb7 	bl	8000740 <HAL_GetTick>
 8003bd2:	1b40      	subs	r0, r0, r5
 8003bd4:	2802      	cmp	r0, #2
 8003bd6:	d9f4      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8003bd8:	2003      	movs	r0, #3
 8003bda:	e22f      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bdc:	f7fc fdca 	bl	8000774 <HAL_GetREVID>
 8003be0:	f241 0303 	movw	r3, #4099	; 0x1003
 8003be4:	4298      	cmp	r0, r3
 8003be6:	d812      	bhi.n	8003c0e <HAL_RCC_OscConfig+0x1fe>
 8003be8:	6922      	ldr	r2, [r4, #16]
 8003bea:	2a40      	cmp	r2, #64	; 0x40
 8003bec:	d007      	beq.n	8003bfe <HAL_RCC_OscConfig+0x1ee>
 8003bee:	492a      	ldr	r1, [pc, #168]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003bf0:	684b      	ldr	r3, [r1, #4]
 8003bf2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003bf6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003bfa:	604b      	str	r3, [r1, #4]
 8003bfc:	e7c7      	b.n	8003b8e <HAL_RCC_OscConfig+0x17e>
 8003bfe:	4a26      	ldr	r2, [pc, #152]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003c00:	6853      	ldr	r3, [r2, #4]
 8003c02:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c0a:	6053      	str	r3, [r2, #4]
 8003c0c:	e7bf      	b.n	8003b8e <HAL_RCC_OscConfig+0x17e>
 8003c0e:	4a22      	ldr	r2, [pc, #136]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003c10:	6853      	ldr	r3, [r2, #4]
 8003c12:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c16:	6921      	ldr	r1, [r4, #16]
 8003c18:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003c1c:	6053      	str	r3, [r2, #4]
 8003c1e:	e7b6      	b.n	8003b8e <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 8003c20:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003c22:	6813      	ldr	r3, [r2, #0]
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c2a:	f7fc fd89 	bl	8000740 <HAL_GetTick>
 8003c2e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f013 0f04 	tst.w	r3, #4
 8003c38:	d0a9      	beq.n	8003b8e <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c3a:	f7fc fd81 	bl	8000740 <HAL_GetTick>
 8003c3e:	1b40      	subs	r0, r0, r5
 8003c40:	2802      	cmp	r0, #2
 8003c42:	d9f5      	bls.n	8003c30 <HAL_RCC_OscConfig+0x220>
            return HAL_TIMEOUT;
 8003c44:	2003      	movs	r0, #3
 8003c46:	e1f9      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c48:	f002 0203 	and.w	r2, r2, #3
 8003c4c:	2a01      	cmp	r2, #1
 8003c4e:	d1ac      	bne.n	8003baa <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c50:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c58:	d004      	beq.n	8003c64 <HAL_RCC_OscConfig+0x254>
 8003c5a:	69e3      	ldr	r3, [r4, #28]
 8003c5c:	2b80      	cmp	r3, #128	; 0x80
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_OscConfig+0x254>
        return HAL_ERROR;
 8003c60:	2001      	movs	r0, #1
 8003c62:	e1eb      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c64:	f7fc fd86 	bl	8000774 <HAL_GetREVID>
 8003c68:	f241 0303 	movw	r3, #4099	; 0x1003
 8003c6c:	4298      	cmp	r0, r3
 8003c6e:	d815      	bhi.n	8003c9c <HAL_RCC_OscConfig+0x28c>
 8003c70:	6a22      	ldr	r2, [r4, #32]
 8003c72:	2a20      	cmp	r2, #32
 8003c74:	d007      	beq.n	8003c86 <HAL_RCC_OscConfig+0x276>
 8003c76:	4908      	ldr	r1, [pc, #32]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003c78:	684b      	ldr	r3, [r1, #4]
 8003c7a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c7e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8003c82:	604b      	str	r3, [r1, #4]
 8003c84:	e012      	b.n	8003cac <HAL_RCC_OscConfig+0x29c>
 8003c86:	4a04      	ldr	r2, [pc, #16]	; (8003c98 <HAL_RCC_OscConfig+0x288>)
 8003c88:	6853      	ldr	r3, [r2, #4]
 8003c8a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c92:	6053      	str	r3, [r2, #4]
 8003c94:	e00a      	b.n	8003cac <HAL_RCC_OscConfig+0x29c>
 8003c96:	bf00      	nop
 8003c98:	58024400 	.word	0x58024400
 8003c9c:	4a9a      	ldr	r2, [pc, #616]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003c9e:	68d3      	ldr	r3, [r2, #12]
 8003ca0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003ca4:	6a21      	ldr	r1, [r4, #32]
 8003ca6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003caa:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	f013 0f08 	tst.w	r3, #8
 8003cb2:	d060      	beq.n	8003d76 <HAL_RCC_OscConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cb4:	6963      	ldr	r3, [r4, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d049      	beq.n	8003d4e <HAL_RCC_OscConfig+0x33e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cba:	4a93      	ldr	r2, [pc, #588]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003cbc:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc4:	f7fc fd3c 	bl	8000740 <HAL_GetTick>
 8003cc8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cca:	4b8f      	ldr	r3, [pc, #572]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cce:	f013 0f02 	tst.w	r3, #2
 8003cd2:	d150      	bne.n	8003d76 <HAL_RCC_OscConfig+0x366>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cd4:	f7fc fd34 	bl	8000740 <HAL_GetTick>
 8003cd8:	1b40      	subs	r0, r0, r5
 8003cda:	2802      	cmp	r0, #2
 8003cdc:	d9f5      	bls.n	8003cca <HAL_RCC_OscConfig+0x2ba>
        {
          return HAL_TIMEOUT;
 8003cde:	2003      	movs	r0, #3
 8003ce0:	e1ac      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ce2:	f7fc fd47 	bl	8000774 <HAL_GetREVID>
 8003ce6:	f241 0303 	movw	r3, #4099	; 0x1003
 8003cea:	4298      	cmp	r0, r3
 8003cec:	d812      	bhi.n	8003d14 <HAL_RCC_OscConfig+0x304>
 8003cee:	6a22      	ldr	r2, [r4, #32]
 8003cf0:	2a20      	cmp	r2, #32
 8003cf2:	d007      	beq.n	8003d04 <HAL_RCC_OscConfig+0x2f4>
 8003cf4:	4984      	ldr	r1, [pc, #528]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003cf6:	684b      	ldr	r3, [r1, #4]
 8003cf8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003cfc:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8003d00:	604b      	str	r3, [r1, #4]
 8003d02:	e7d3      	b.n	8003cac <HAL_RCC_OscConfig+0x29c>
 8003d04:	4a80      	ldr	r2, [pc, #512]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003d06:	6853      	ldr	r3, [r2, #4]
 8003d08:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d10:	6053      	str	r3, [r2, #4]
 8003d12:	e7cb      	b.n	8003cac <HAL_RCC_OscConfig+0x29c>
 8003d14:	4a7c      	ldr	r2, [pc, #496]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003d16:	68d3      	ldr	r3, [r2, #12]
 8003d18:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003d1c:	6a21      	ldr	r1, [r4, #32]
 8003d1e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003d22:	60d3      	str	r3, [r2, #12]
 8003d24:	e7c2      	b.n	8003cac <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_CSI_DISABLE();
 8003d26:	4a78      	ldr	r2, [pc, #480]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003d28:	6813      	ldr	r3, [r2, #0]
 8003d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d2e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003d30:	f7fc fd06 	bl	8000740 <HAL_GetTick>
 8003d34:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d36:	4b74      	ldr	r3, [pc, #464]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003d3e:	d0b5      	beq.n	8003cac <HAL_RCC_OscConfig+0x29c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003d40:	f7fc fcfe 	bl	8000740 <HAL_GetTick>
 8003d44:	1b40      	subs	r0, r0, r5
 8003d46:	2802      	cmp	r0, #2
 8003d48:	d9f5      	bls.n	8003d36 <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 8003d4a:	2003      	movs	r0, #3
 8003d4c:	e176      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4e:	4a6e      	ldr	r2, [pc, #440]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003d50:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003d52:	f023 0301 	bic.w	r3, r3, #1
 8003d56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d58:	f7fc fcf2 	bl	8000740 <HAL_GetTick>
 8003d5c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d5e:	4b6a      	ldr	r3, [pc, #424]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d62:	f013 0f02 	tst.w	r3, #2
 8003d66:	d006      	beq.n	8003d76 <HAL_RCC_OscConfig+0x366>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d68:	f7fc fcea 	bl	8000740 <HAL_GetTick>
 8003d6c:	1b40      	subs	r0, r0, r5
 8003d6e:	2802      	cmp	r0, #2
 8003d70:	d9f5      	bls.n	8003d5e <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 8003d72:	2003      	movs	r0, #3
 8003d74:	e162      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	f013 0f20 	tst.w	r3, #32
 8003d7c:	d029      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003d7e:	69a3      	ldr	r3, [r4, #24]
 8003d80:	b19b      	cbz	r3, 8003daa <HAL_RCC_OscConfig+0x39a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d82:	4a61      	ldr	r2, [pc, #388]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003d84:	6813      	ldr	r3, [r2, #0]
 8003d86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d8c:	f7fc fcd8 	bl	8000740 <HAL_GetTick>
 8003d90:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d92:	4b5d      	ldr	r3, [pc, #372]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003d9a:	d11a      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d9c:	f7fc fcd0 	bl	8000740 <HAL_GetTick>
 8003da0:	1b40      	subs	r0, r0, r5
 8003da2:	2802      	cmp	r0, #2
 8003da4:	d9f5      	bls.n	8003d92 <HAL_RCC_OscConfig+0x382>
        {
          return HAL_TIMEOUT;
 8003da6:	2003      	movs	r0, #3
 8003da8:	e148      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003daa:	4a57      	ldr	r2, [pc, #348]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003dac:	6813      	ldr	r3, [r2, #0]
 8003dae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003db2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003db4:	f7fc fcc4 	bl	8000740 <HAL_GetTick>
 8003db8:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dba:	4b53      	ldr	r3, [pc, #332]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003dc2:	d006      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003dc4:	f7fc fcbc 	bl	8000740 <HAL_GetTick>
 8003dc8:	1b40      	subs	r0, r0, r5
 8003dca:	2802      	cmp	r0, #2
 8003dcc:	d9f5      	bls.n	8003dba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003dce:	2003      	movs	r0, #3
 8003dd0:	e134      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	f013 0f04 	tst.w	r3, #4
 8003dd8:	d121      	bne.n	8003e1e <HAL_RCC_OscConfig+0x40e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 812c 	beq.w	800403a <HAL_RCC_OscConfig+0x62a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003de2:	4a49      	ldr	r2, [pc, #292]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003de4:	6912      	ldr	r2, [r2, #16]
 8003de6:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003dea:	2a18      	cmp	r2, #24
 8003dec:	f000 80ee 	beq.w	8003fcc <HAL_RCC_OscConfig+0x5bc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d075      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x4d0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df4:	4a44      	ldr	r2, [pc, #272]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003df6:	6813      	ldr	r3, [r2, #0]
 8003df8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfe:	f7fc fc9f 	bl	8000740 <HAL_GetTick>
 8003e02:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e04:	4b40      	ldr	r3, [pc, #256]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003e0c:	f000 80dc 	beq.w	8003fc8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e10:	f7fc fc96 	bl	8000740 <HAL_GetTick>
 8003e14:	1b00      	subs	r0, r0, r4
 8003e16:	2802      	cmp	r0, #2
 8003e18:	d9f4      	bls.n	8003e04 <HAL_RCC_OscConfig+0x3f4>
          {
            return HAL_TIMEOUT;
 8003e1a:	2003      	movs	r0, #3
 8003e1c:	e10e      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
    PWR->CR1 |= PWR_CR1_DBP;
 8003e1e:	4a3b      	ldr	r2, [pc, #236]	; (8003f0c <HAL_RCC_OscConfig+0x4fc>)
 8003e20:	6813      	ldr	r3, [r2, #0]
 8003e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e26:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003e28:	f7fc fc8a 	bl	8000740 <HAL_GetTick>
 8003e2c:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e2e:	4b37      	ldr	r3, [pc, #220]	; (8003f0c <HAL_RCC_OscConfig+0x4fc>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e36:	d106      	bne.n	8003e46 <HAL_RCC_OscConfig+0x436>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e38:	f7fc fc82 	bl	8000740 <HAL_GetTick>
 8003e3c:	1b40      	subs	r0, r0, r5
 8003e3e:	2864      	cmp	r0, #100	; 0x64
 8003e40:	d9f5      	bls.n	8003e2e <HAL_RCC_OscConfig+0x41e>
        return HAL_TIMEOUT;
 8003e42:	2003      	movs	r0, #3
 8003e44:	e0fa      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e46:	68a3      	ldr	r3, [r4, #8]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d00a      	beq.n	8003e62 <HAL_RCC_OscConfig+0x452>
 8003e4c:	bb0b      	cbnz	r3, 8003e92 <HAL_RCC_OscConfig+0x482>
 8003e4e:	4b2e      	ldr	r3, [pc, #184]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003e50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	671a      	str	r2, [r3, #112]	; 0x70
 8003e58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e5a:	f022 0204 	bic.w	r2, r2, #4
 8003e5e:	671a      	str	r2, [r3, #112]	; 0x70
 8003e60:	e004      	b.n	8003e6c <HAL_RCC_OscConfig+0x45c>
 8003e62:	4a29      	ldr	r2, [pc, #164]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003e64:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e6c:	68a3      	ldr	r3, [r4, #8]
 8003e6e:	b333      	cbz	r3, 8003ebe <HAL_RCC_OscConfig+0x4ae>
      tickstart = HAL_GetTick();
 8003e70:	f7fc fc66 	bl	8000740 <HAL_GetTick>
 8003e74:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e76:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	f013 0f02 	tst.w	r3, #2
 8003e7e:	d1ac      	bne.n	8003dda <HAL_RCC_OscConfig+0x3ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e80:	f7fc fc5e 	bl	8000740 <HAL_GetTick>
 8003e84:	1b40      	subs	r0, r0, r5
 8003e86:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e8a:	4298      	cmp	r0, r3
 8003e8c:	d9f3      	bls.n	8003e76 <HAL_RCC_OscConfig+0x466>
          return HAL_TIMEOUT;
 8003e8e:	2003      	movs	r0, #3
 8003e90:	e0d4      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e92:	2b05      	cmp	r3, #5
 8003e94:	d009      	beq.n	8003eaa <HAL_RCC_OscConfig+0x49a>
 8003e96:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003e98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e9a:	f022 0201 	bic.w	r2, r2, #1
 8003e9e:	671a      	str	r2, [r3, #112]	; 0x70
 8003ea0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ea2:	f022 0204 	bic.w	r2, r2, #4
 8003ea6:	671a      	str	r2, [r3, #112]	; 0x70
 8003ea8:	e7e0      	b.n	8003e6c <HAL_RCC_OscConfig+0x45c>
 8003eaa:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003eac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eae:	f042 0204 	orr.w	r2, r2, #4
 8003eb2:	671a      	str	r2, [r3, #112]	; 0x70
 8003eb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	671a      	str	r2, [r3, #112]	; 0x70
 8003ebc:	e7d6      	b.n	8003e6c <HAL_RCC_OscConfig+0x45c>
      tickstart = HAL_GetTick();
 8003ebe:	f7fc fc3f 	bl	8000740 <HAL_GetTick>
 8003ec2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ec4:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	f013 0f02 	tst.w	r3, #2
 8003ecc:	d085      	beq.n	8003dda <HAL_RCC_OscConfig+0x3ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fc fc37 	bl	8000740 <HAL_GetTick>
 8003ed2:	1b40      	subs	r0, r0, r5
 8003ed4:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ed8:	4298      	cmp	r0, r3
 8003eda:	d9f3      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x4b4>
          return HAL_TIMEOUT;
 8003edc:	2003      	movs	r0, #3
 8003ede:	e0ad      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
        __HAL_RCC_PLL_DISABLE();
 8003ee0:	4a09      	ldr	r2, [pc, #36]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003ee2:	6813      	ldr	r3, [r2, #0]
 8003ee4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ee8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003eea:	f7fc fc29 	bl	8000740 <HAL_GetTick>
 8003eee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_RCC_OscConfig+0x4f8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCC_OscConfig+0x500>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fc fc21 	bl	8000740 <HAL_GetTick>
 8003efe:	1b40      	subs	r0, r0, r5
 8003f00:	2802      	cmp	r0, #2
 8003f02:	d9f5      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
            return HAL_TIMEOUT;
 8003f04:	2003      	movs	r0, #3
 8003f06:	e099      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
 8003f08:	58024400 	.word	0x58024400
 8003f0c:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f10:	4b4e      	ldr	r3, [pc, #312]	; (800404c <HAL_RCC_OscConfig+0x63c>)
 8003f12:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003f14:	4a4e      	ldr	r2, [pc, #312]	; (8004050 <HAL_RCC_OscConfig+0x640>)
 8003f16:	400a      	ands	r2, r1
 8003f18:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003f1a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003f1c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8003f20:	430a      	orrs	r2, r1
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28
 8003f24:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003f26:	3a01      	subs	r2, #1
 8003f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f2e:	3901      	subs	r1, #1
 8003f30:	0249      	lsls	r1, r1, #9
 8003f32:	b289      	uxth	r1, r1
 8003f34:	430a      	orrs	r2, r1
 8003f36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003f38:	3901      	subs	r1, #1
 8003f3a:	0409      	lsls	r1, r1, #16
 8003f3c:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003f40:	430a      	orrs	r2, r1
 8003f42:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003f44:	3901      	subs	r1, #1
 8003f46:	0609      	lsls	r1, r1, #24
 8003f48:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8003f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f5a:	4a3e      	ldr	r2, [pc, #248]	; (8004054 <HAL_RCC_OscConfig+0x644>)
 8003f5c:	400a      	ands	r2, r1
 8003f5e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003f60:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003f64:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f68:	f022 020c 	bic.w	r2, r2, #12
 8003f6c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f74:	f022 0202 	bic.w	r2, r2, #2
 8003f78:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f80:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f84:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f88:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003f8c:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f90:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003f94:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8003f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003fa4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003fa6:	f7fc fbcb 	bl	8000740 <HAL_GetTick>
 8003faa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fac:	4b27      	ldr	r3, [pc, #156]	; (800404c <HAL_RCC_OscConfig+0x63c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003fb4:	d106      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x5b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb6:	f7fc fbc3 	bl	8000740 <HAL_GetTick>
 8003fba:	1b00      	subs	r0, r0, r4
 8003fbc:	2802      	cmp	r0, #2
 8003fbe:	d9f5      	bls.n	8003fac <HAL_RCC_OscConfig+0x59c>
            return HAL_TIMEOUT;
 8003fc0:	2003      	movs	r0, #3
 8003fc2:	e03b      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	e039      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
 8003fc8:	2000      	movs	r0, #0
 8003fca:	e037      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003fcc:	4a1f      	ldr	r2, [pc, #124]	; (800404c <HAL_RCC_OscConfig+0x63c>)
 8003fce:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fd0:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d033      	beq.n	800403e <HAL_RCC_OscConfig+0x62e>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd6:	f001 0303 	and.w	r3, r1, #3
 8003fda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x5d4>
        return HAL_ERROR;
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	e02b      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fe4:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8003fe8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fea:	4299      	cmp	r1, r3
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x5e2>
        return HAL_ERROR;
 8003fee:	2001      	movs	r0, #1
 8003ff0:	e024      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ff2:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8003ff6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ff8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d001      	beq.n	8004002 <HAL_RCC_OscConfig+0x5f2>
        return HAL_ERROR;
 8003ffe:	2001      	movs	r0, #1
 8004000:	e01c      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004002:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8004006:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004008:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800400a:	429a      	cmp	r2, r3
 800400c:	d001      	beq.n	8004012 <HAL_RCC_OscConfig+0x602>
        return HAL_ERROR;
 800400e:	2001      	movs	r0, #1
 8004010:	e014      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004012:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8004016:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004018:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d111      	bne.n	8004042 <HAL_RCC_OscConfig+0x632>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800401e:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8004022:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004024:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004026:	4298      	cmp	r0, r3
 8004028:	d00d      	beq.n	8004046 <HAL_RCC_OscConfig+0x636>
        return HAL_ERROR;
 800402a:	2001      	movs	r0, #1
 800402c:	e006      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
    return HAL_ERROR;
 800402e:	2001      	movs	r0, #1
}
 8004030:	4770      	bx	lr
        return HAL_ERROR;
 8004032:	2001      	movs	r0, #1
 8004034:	e002      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
        return HAL_ERROR;
 8004036:	2001      	movs	r0, #1
 8004038:	e000      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
  return HAL_OK;
 800403a:	2000      	movs	r0, #0
}
 800403c:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800403e:	2001      	movs	r0, #1
 8004040:	e7fc      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
 8004042:	2001      	movs	r0, #1
 8004044:	e7fa      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
  return HAL_OK;
 8004046:	2000      	movs	r0, #0
 8004048:	e7f8      	b.n	800403c <HAL_RCC_OscConfig+0x62c>
 800404a:	bf00      	nop
 800404c:	58024400 	.word	0x58024400
 8004050:	fffffc0c 	.word	0xfffffc0c
 8004054:	ffff0007 	.word	0xffff0007

08004058 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004058:	4b72      	ldr	r3, [pc, #456]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004060:	2b10      	cmp	r3, #16
 8004062:	f000 80db 	beq.w	800421c <HAL_RCC_GetSysClockFreq+0x1c4>
 8004066:	2b18      	cmp	r3, #24
 8004068:	d010      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0x34>
 800406a:	b10b      	cbz	r3, 8004070 <HAL_RCC_GetSysClockFreq+0x18>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800406c:	486e      	ldr	r0, [pc, #440]	; (8004228 <HAL_RCC_GetSysClockFreq+0x1d0>)
 800406e:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004070:	4b6c      	ldr	r3, [pc, #432]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f013 0f20 	tst.w	r3, #32
 8004078:	f000 80d2 	beq.w	8004220 <HAL_RCC_GetSysClockFreq+0x1c8>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800407c:	4b69      	ldr	r3, [pc, #420]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8004084:	4b69      	ldr	r3, [pc, #420]	; (800422c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004086:	fa23 f000 	lsr.w	r0, r3, r0
 800408a:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800408c:	4a65      	ldr	r2, [pc, #404]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800408e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004090:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004094:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004096:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800409a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800409c:	f003 0301 	and.w	r3, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80040a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040a2:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 80040a6:	fb03 f302 	mul.w	r3, r3, r2
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 80040b2:	2800      	cmp	r0, #0
 80040b4:	f000 80b5 	beq.w	8004222 <HAL_RCC_GetSysClockFreq+0x1ca>
    {
      switch (pllsource)
 80040b8:	2901      	cmp	r1, #1
 80040ba:	d066      	beq.n	800418a <HAL_RCC_GetSysClockFreq+0x132>
 80040bc:	b1f9      	cbz	r1, 80040fe <HAL_RCC_GetSysClockFreq+0xa6>
 80040be:	2902      	cmp	r1, #2
 80040c0:	f000 808f 	beq.w	80041e2 <HAL_RCC_GetSysClockFreq+0x18a>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040c4:	ee07 0a10 	vmov	s14, r0
 80040c8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80040cc:	ed9f 6a58 	vldr	s12, [pc, #352]	; 8004230 <HAL_RCC_GetSysClockFreq+0x1d8>
 80040d0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80040d4:	4b53      	ldr	r3, [pc, #332]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040dc:	ee06 3a90 	vmov	s13, r3
 80040e0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80040e4:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8004234 <HAL_RCC_GetSysClockFreq+0x1dc>
 80040e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80040ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040f8:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80040fc:	e061      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x16a>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040fe:	4b49      	ldr	r3, [pc, #292]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f013 0f20 	tst.w	r3, #32
 8004106:	d023      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0xf8>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004108:	4946      	ldr	r1, [pc, #280]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800410a:	680a      	ldr	r2, [r1, #0]
 800410c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004110:	4b46      	ldr	r3, [pc, #280]	; (800422c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004112:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004114:	ee07 3a10 	vmov	s14, r3
 8004118:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800411c:	ee07 0a10 	vmov	s14, r0
 8004120:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8004124:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8004128:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800412a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412e:	ee06 3a90 	vmov	s13, r3
 8004132:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004136:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8004234 <HAL_RCC_GetSysClockFreq+0x1dc>
 800413a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800413e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800414a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800414e:	e038      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x16a>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004150:	ee07 0a10 	vmov	s14, r0
 8004154:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004158:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8004238 <HAL_RCC_GetSysClockFreq+0x1e0>
 800415c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004160:	4b30      	ldr	r3, [pc, #192]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004168:	ee06 3a90 	vmov	s13, r3
 800416c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004170:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8004234 <HAL_RCC_GetSysClockFreq+0x1dc>
 8004174:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004178:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800417c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004180:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004184:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004188:	e01b      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x16a>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800418a:	ee07 0a10 	vmov	s14, r0
 800418e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004192:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8004230 <HAL_RCC_GetSysClockFreq+0x1d8>
 8004196:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800419a:	4b22      	ldr	r3, [pc, #136]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a2:	ee06 3a90 	vmov	s13, r3
 80041a6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80041aa:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8004234 <HAL_RCC_GetSysClockFreq+0x1dc>
 80041ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80041b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041be:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80041c2:	4b18      	ldr	r3, [pc, #96]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80041ca:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80041cc:	ee07 3a90 	vmov	s15, r3
 80041d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80041d8:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80041dc:	ee17 0a90 	vmov	r0, s15
 80041e0:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041e2:	ee07 0a10 	vmov	s14, r0
 80041e6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80041ea:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800423c <HAL_RCC_GetSysClockFreq+0x1e4>
 80041ee:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80041f2:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fa:	ee06 3a90 	vmov	s13, r3
 80041fe:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004202:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8004234 <HAL_RCC_GetSysClockFreq+0x1dc>
 8004206:	ee67 7a86 	vmul.f32	s15, s15, s12
 800420a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800420e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004216:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800421a:	e7d2      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x16a>
    sysclockfreq = HSE_VALUE;
 800421c:	4808      	ldr	r0, [pc, #32]	; (8004240 <HAL_RCC_GetSysClockFreq+0x1e8>)
 800421e:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004220:	4802      	ldr	r0, [pc, #8]	; (800422c <HAL_RCC_GetSysClockFreq+0x1d4>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8004222:	4770      	bx	lr
 8004224:	58024400 	.word	0x58024400
 8004228:	003d0900 	.word	0x003d0900
 800422c:	03d09000 	.word	0x03d09000
 8004230:	4a742400 	.word	0x4a742400
 8004234:	39000000 	.word	0x39000000
 8004238:	4c742400 	.word	0x4c742400
 800423c:	4bf42400 	.word	0x4bf42400
 8004240:	01e84800 	.word	0x01e84800

08004244 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004244:	2800      	cmp	r0, #0
 8004246:	f000 8136 	beq.w	80044b6 <HAL_RCC_ClockConfig+0x272>
 800424a:	4603      	mov	r3, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800424c:	4a9c      	ldr	r2, [pc, #624]	; (80044c0 <HAL_RCC_ClockConfig+0x27c>)
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	f002 020f 	and.w	r2, r2, #15
 8004254:	428a      	cmp	r2, r1
 8004256:	d20c      	bcs.n	8004272 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004258:	4899      	ldr	r0, [pc, #612]	; (80044c0 <HAL_RCC_ClockConfig+0x27c>)
 800425a:	6802      	ldr	r2, [r0, #0]
 800425c:	f022 020f 	bic.w	r2, r2, #15
 8004260:	430a      	orrs	r2, r1
 8004262:	6002      	str	r2, [r0, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004264:	6802      	ldr	r2, [r0, #0]
 8004266:	f002 020f 	and.w	r2, r2, #15
 800426a:	428a      	cmp	r2, r1
 800426c:	d001      	beq.n	8004272 <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 800426e:	2001      	movs	r0, #1
}
 8004270:	4770      	bx	lr
{
 8004272:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	f012 0f04 	tst.w	r2, #4
 800427a:	d00c      	beq.n	8004296 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800427c:	6918      	ldr	r0, [r3, #16]
 800427e:	4a91      	ldr	r2, [pc, #580]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 8004280:	6992      	ldr	r2, [r2, #24]
 8004282:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004286:	4290      	cmp	r0, r2
 8004288:	d905      	bls.n	8004296 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800428a:	4c8e      	ldr	r4, [pc, #568]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 800428c:	69a2      	ldr	r2, [r4, #24]
 800428e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004292:	4310      	orrs	r0, r2
 8004294:	61a0      	str	r0, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	f012 0f08 	tst.w	r2, #8
 800429c:	d00c      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800429e:	6958      	ldr	r0, [r3, #20]
 80042a0:	4a88      	ldr	r2, [pc, #544]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 80042a2:	69d2      	ldr	r2, [r2, #28]
 80042a4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80042a8:	4290      	cmp	r0, r2
 80042aa:	d905      	bls.n	80042b8 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042ac:	4c85      	ldr	r4, [pc, #532]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 80042ae:	69e2      	ldr	r2, [r4, #28]
 80042b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80042b4:	4310      	orrs	r0, r2
 80042b6:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	f012 0f10 	tst.w	r2, #16
 80042be:	d00c      	beq.n	80042da <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042c0:	6998      	ldr	r0, [r3, #24]
 80042c2:	4a80      	ldr	r2, [pc, #512]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 80042c4:	69d2      	ldr	r2, [r2, #28]
 80042c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80042ca:	4290      	cmp	r0, r2
 80042cc:	d905      	bls.n	80042da <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042ce:	4c7d      	ldr	r4, [pc, #500]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 80042d0:	69e2      	ldr	r2, [r4, #28]
 80042d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042d6:	4310      	orrs	r0, r2
 80042d8:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	f012 0f20 	tst.w	r2, #32
 80042e0:	d00c      	beq.n	80042fc <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80042e2:	69d8      	ldr	r0, [r3, #28]
 80042e4:	4a77      	ldr	r2, [pc, #476]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 80042e6:	6a12      	ldr	r2, [r2, #32]
 80042e8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80042ec:	4290      	cmp	r0, r2
 80042ee:	d905      	bls.n	80042fc <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80042f0:	4c74      	ldr	r4, [pc, #464]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 80042f2:	6a22      	ldr	r2, [r4, #32]
 80042f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80042f8:	4310      	orrs	r0, r2
 80042fa:	6220      	str	r0, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	f012 0f02 	tst.w	r2, #2
 8004302:	d00c      	beq.n	800431e <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004304:	68d8      	ldr	r0, [r3, #12]
 8004306:	4a6f      	ldr	r2, [pc, #444]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 8004308:	6992      	ldr	r2, [r2, #24]
 800430a:	f002 020f 	and.w	r2, r2, #15
 800430e:	4290      	cmp	r0, r2
 8004310:	d905      	bls.n	800431e <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004312:	4c6c      	ldr	r4, [pc, #432]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 8004314:	69a2      	ldr	r2, [r4, #24]
 8004316:	f022 020f 	bic.w	r2, r2, #15
 800431a:	4310      	orrs	r0, r2
 800431c:	61a0      	str	r0, [r4, #24]
 800431e:	461c      	mov	r4, r3
 8004320:	460d      	mov	r5, r1
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f013 0f01 	tst.w	r3, #1
 8004328:	d041      	beq.n	80043ae <HAL_RCC_ClockConfig+0x16a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800432a:	4a66      	ldr	r2, [pc, #408]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 800432c:	6993      	ldr	r3, [r2, #24]
 800432e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004332:	68a1      	ldr	r1, [r4, #8]
 8004334:	430b      	orrs	r3, r1
 8004336:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004338:	6863      	ldr	r3, [r4, #4]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d00a      	beq.n	8004354 <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800433e:	2b03      	cmp	r3, #3
 8004340:	d027      	beq.n	8004392 <HAL_RCC_ClockConfig+0x14e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004342:	2b01      	cmp	r3, #1
 8004344:	d02c      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x15c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004346:	4a5f      	ldr	r2, [pc, #380]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	f012 0f04 	tst.w	r2, #4
 800434e:	d106      	bne.n	800435e <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 8004350:	2001      	movs	r0, #1
 8004352:	e0af      	b.n	80044b4 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800435a:	f000 80ae 	beq.w	80044ba <HAL_RCC_ClockConfig+0x276>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800435e:	4959      	ldr	r1, [pc, #356]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 8004360:	690a      	ldr	r2, [r1, #16]
 8004362:	f022 0207 	bic.w	r2, r2, #7
 8004366:	4313      	orrs	r3, r2
 8004368:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800436a:	f7fc f9e9 	bl	8000740 <HAL_GetTick>
 800436e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004370:	4b54      	ldr	r3, [pc, #336]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004378:	6862      	ldr	r2, [r4, #4]
 800437a:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800437e:	d016      	beq.n	80043ae <HAL_RCC_ClockConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004380:	f7fc f9de 	bl	8000740 <HAL_GetTick>
 8004384:	1b80      	subs	r0, r0, r6
 8004386:	f241 3388 	movw	r3, #5000	; 0x1388
 800438a:	4298      	cmp	r0, r3
 800438c:	d9f0      	bls.n	8004370 <HAL_RCC_ClockConfig+0x12c>
            return HAL_TIMEOUT;
 800438e:	2003      	movs	r0, #3
 8004390:	e090      	b.n	80044b4 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004392:	4a4c      	ldr	r2, [pc, #304]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800439a:	d1e0      	bne.n	800435e <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 800439c:	2001      	movs	r0, #1
 800439e:	e089      	b.n	80044b4 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043a0:	4a48      	ldr	r2, [pc, #288]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80043a8:	d1d9      	bne.n	800435e <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 80043aa:	2001      	movs	r0, #1
 80043ac:	e082      	b.n	80044b4 <HAL_RCC_ClockConfig+0x270>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	f013 0f02 	tst.w	r3, #2
 80043b4:	d00c      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x18c>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043b6:	68e2      	ldr	r2, [r4, #12]
 80043b8:	4b42      	ldr	r3, [pc, #264]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d205      	bcs.n	80043d0 <HAL_RCC_ClockConfig+0x18c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c4:	493f      	ldr	r1, [pc, #252]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 80043c6:	698b      	ldr	r3, [r1, #24]
 80043c8:	f023 030f 	bic.w	r3, r3, #15
 80043cc:	431a      	orrs	r2, r3
 80043ce:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b3b      	ldr	r3, [pc, #236]	; (80044c0 <HAL_RCC_ClockConfig+0x27c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	42ab      	cmp	r3, r5
 80043da:	d90c      	bls.n	80043f6 <HAL_RCC_ClockConfig+0x1b2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043dc:	4a38      	ldr	r2, [pc, #224]	; (80044c0 <HAL_RCC_ClockConfig+0x27c>)
 80043de:	6813      	ldr	r3, [r2, #0]
 80043e0:	f023 030f 	bic.w	r3, r3, #15
 80043e4:	432b      	orrs	r3, r5
 80043e6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e8:	6813      	ldr	r3, [r2, #0]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	42ab      	cmp	r3, r5
 80043f0:	d001      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x1b2>
      return HAL_ERROR;
 80043f2:	2001      	movs	r0, #1
 80043f4:	e05e      	b.n	80044b4 <HAL_RCC_ClockConfig+0x270>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	f013 0f04 	tst.w	r3, #4
 80043fc:	d00c      	beq.n	8004418 <HAL_RCC_ClockConfig+0x1d4>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043fe:	6922      	ldr	r2, [r4, #16]
 8004400:	4b30      	ldr	r3, [pc, #192]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004408:	429a      	cmp	r2, r3
 800440a:	d205      	bcs.n	8004418 <HAL_RCC_ClockConfig+0x1d4>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800440c:	492d      	ldr	r1, [pc, #180]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 800440e:	698b      	ldr	r3, [r1, #24]
 8004410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004414:	431a      	orrs	r2, r3
 8004416:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	f013 0f08 	tst.w	r3, #8
 800441e:	d00c      	beq.n	800443a <HAL_RCC_ClockConfig+0x1f6>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004420:	6962      	ldr	r2, [r4, #20]
 8004422:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800442a:	429a      	cmp	r2, r3
 800442c:	d205      	bcs.n	800443a <HAL_RCC_ClockConfig+0x1f6>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800442e:	4925      	ldr	r1, [pc, #148]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 8004430:	69cb      	ldr	r3, [r1, #28]
 8004432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004436:	431a      	orrs	r2, r3
 8004438:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	f013 0f10 	tst.w	r3, #16
 8004440:	d00c      	beq.n	800445c <HAL_RCC_ClockConfig+0x218>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004442:	69a2      	ldr	r2, [r4, #24]
 8004444:	4b1f      	ldr	r3, [pc, #124]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800444c:	429a      	cmp	r2, r3
 800444e:	d205      	bcs.n	800445c <HAL_RCC_ClockConfig+0x218>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004450:	491c      	ldr	r1, [pc, #112]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 8004452:	69cb      	ldr	r3, [r1, #28]
 8004454:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004458:	431a      	orrs	r2, r3
 800445a:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	f013 0f20 	tst.w	r3, #32
 8004462:	d00c      	beq.n	800447e <HAL_RCC_ClockConfig+0x23a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004464:	69e2      	ldr	r2, [r4, #28]
 8004466:	4b17      	ldr	r3, [pc, #92]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800446e:	429a      	cmp	r2, r3
 8004470:	d205      	bcs.n	800447e <HAL_RCC_ClockConfig+0x23a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004472:	4914      	ldr	r1, [pc, #80]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 8004474:	6a0b      	ldr	r3, [r1, #32]
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	431a      	orrs	r2, r3
 800447c:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800447e:	f7ff fdeb 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 8004482:	4910      	ldr	r1, [pc, #64]	; (80044c4 <HAL_RCC_ClockConfig+0x280>)
 8004484:	698b      	ldr	r3, [r1, #24]
 8004486:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800448a:	4a0f      	ldr	r2, [pc, #60]	; (80044c8 <HAL_RCC_ClockConfig+0x284>)
 800448c:	5cd3      	ldrb	r3, [r2, r3]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004494:	698b      	ldr	r3, [r1, #24]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	5cd3      	ldrb	r3, [r2, r3]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	fa20 f303 	lsr.w	r3, r0, r3
 80044a4:	4a09      	ldr	r2, [pc, #36]	; (80044cc <HAL_RCC_ClockConfig+0x288>)
 80044a6:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80044a8:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <HAL_RCC_ClockConfig+0x28c>)
 80044aa:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80044ac:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <HAL_RCC_ClockConfig+0x290>)
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	f7fc f8e6 	bl	8000680 <HAL_InitTick>
}
 80044b4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80044b6:	2001      	movs	r0, #1
 80044b8:	4770      	bx	lr
          return HAL_ERROR;
 80044ba:	2001      	movs	r0, #1
 80044bc:	e7fa      	b.n	80044b4 <HAL_RCC_ClockConfig+0x270>
 80044be:	bf00      	nop
 80044c0:	52002000 	.word	0x52002000
 80044c4:	58024400 	.word	0x58024400
 80044c8:	0800f2cc 	.word	0x0800f2cc
 80044cc:	20000194 	.word	0x20000194
 80044d0:	20000190 	.word	0x20000190
 80044d4:	20000004 	.word	0x20000004

080044d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d8:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80044da:	f7ff fdbd 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 80044de:	4a0b      	ldr	r2, [pc, #44]	; (800450c <HAL_RCC_GetHCLKFreq+0x34>)
 80044e0:	6993      	ldr	r3, [r2, #24]
 80044e2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80044e6:	490a      	ldr	r1, [pc, #40]	; (8004510 <HAL_RCC_GetHCLKFreq+0x38>)
 80044e8:	5ccb      	ldrb	r3, [r1, r3]
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044f2:	6992      	ldr	r2, [r2, #24]
 80044f4:	f002 020f 	and.w	r2, r2, #15
 80044f8:	5c88      	ldrb	r0, [r1, r2]
 80044fa:	f000 001f 	and.w	r0, r0, #31
 80044fe:	fa23 f000 	lsr.w	r0, r3, r0
 8004502:	4a04      	ldr	r2, [pc, #16]	; (8004514 <HAL_RCC_GetHCLKFreq+0x3c>)
 8004504:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004506:	4a04      	ldr	r2, [pc, #16]	; (8004518 <HAL_RCC_GetHCLKFreq+0x40>)
 8004508:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800450a:	bd08      	pop	{r3, pc}
 800450c:	58024400 	.word	0x58024400
 8004510:	0800f2cc 	.word	0x0800f2cc
 8004514:	20000194 	.word	0x20000194
 8004518:	20000190 	.word	0x20000190

0800451c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800451c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800451e:	f7ff ffdb 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 8004522:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800452a:	4a04      	ldr	r2, [pc, #16]	; (800453c <HAL_RCC_GetPCLK1Freq+0x20>)
 800452c:	5cd3      	ldrb	r3, [r2, r3]
 800452e:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004532:	40d8      	lsrs	r0, r3
 8004534:	bd08      	pop	{r3, pc}
 8004536:	bf00      	nop
 8004538:	58024400 	.word	0x58024400
 800453c:	0800f2cc 	.word	0x0800f2cc

08004540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004540:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004542:	f7ff ffc9 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800454e:	4a04      	ldr	r2, [pc, #16]	; (8004560 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004550:	5cd3      	ldrb	r3, [r2, r3]
 8004552:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004556:	40d8      	lsrs	r0, r3
 8004558:	bd08      	pop	{r3, pc}
 800455a:	bf00      	nop
 800455c:	58024400 	.word	0x58024400
 8004560:	0800f2cc 	.word	0x0800f2cc

08004564 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004564:	4b40      	ldr	r3, [pc, #256]	; (8004668 <RCCEx_PLL2_Config+0x104>)
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	f003 0303 	and.w	r3, r3, #3
 800456c:	2b03      	cmp	r3, #3
 800456e:	d079      	beq.n	8004664 <RCCEx_PLL2_Config+0x100>
{
 8004570:	b570      	push	{r4, r5, r6, lr}
 8004572:	460e      	mov	r6, r1
 8004574:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004576:	4a3c      	ldr	r2, [pc, #240]	; (8004668 <RCCEx_PLL2_Config+0x104>)
 8004578:	6813      	ldr	r3, [r2, #0]
 800457a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800457e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004580:	f7fc f8de 	bl	8000740 <HAL_GetTick>
 8004584:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004586:	4b38      	ldr	r3, [pc, #224]	; (8004668 <RCCEx_PLL2_Config+0x104>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800458e:	d006      	beq.n	800459e <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004590:	f7fc f8d6 	bl	8000740 <HAL_GetTick>
 8004594:	1b40      	subs	r0, r0, r5
 8004596:	2802      	cmp	r0, #2
 8004598:	d9f5      	bls.n	8004586 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 800459a:	2003      	movs	r0, #3

  }


  return status;
}
 800459c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800459e:	4b32      	ldr	r3, [pc, #200]	; (8004668 <RCCEx_PLL2_Config+0x104>)
 80045a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045a2:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 80045a6:	6821      	ldr	r1, [r4, #0]
 80045a8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80045ac:	629a      	str	r2, [r3, #40]	; 0x28
 80045ae:	6862      	ldr	r2, [r4, #4]
 80045b0:	3a01      	subs	r2, #1
 80045b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045b6:	68a1      	ldr	r1, [r4, #8]
 80045b8:	3901      	subs	r1, #1
 80045ba:	0249      	lsls	r1, r1, #9
 80045bc:	b289      	uxth	r1, r1
 80045be:	430a      	orrs	r2, r1
 80045c0:	68e1      	ldr	r1, [r4, #12]
 80045c2:	3901      	subs	r1, #1
 80045c4:	0409      	lsls	r1, r1, #16
 80045c6:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80045ca:	430a      	orrs	r2, r1
 80045cc:	6921      	ldr	r1, [r4, #16]
 80045ce:	3901      	subs	r1, #1
 80045d0:	0609      	lsls	r1, r1, #24
 80045d2:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80045d6:	430a      	orrs	r2, r1
 80045d8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80045da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045dc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80045e0:	6961      	ldr	r1, [r4, #20]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	f022 0220 	bic.w	r2, r2, #32
 80045ec:	69a1      	ldr	r1, [r4, #24]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80045f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f4:	f022 0210 	bic.w	r2, r2, #16
 80045f8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80045fa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80045fc:	4a1b      	ldr	r2, [pc, #108]	; (800466c <RCCEx_PLL2_Config+0x108>)
 80045fe:	400a      	ands	r2, r1
 8004600:	69e1      	ldr	r1, [r4, #28]
 8004602:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004606:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460a:	f042 0210 	orr.w	r2, r2, #16
 800460e:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8004610:	b9c6      	cbnz	r6, 8004644 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004612:	461a      	mov	r2, r3
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800461a:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 800461c:	4a12      	ldr	r2, [pc, #72]	; (8004668 <RCCEx_PLL2_Config+0x104>)
 800461e:	6813      	ldr	r3, [r2, #0]
 8004620:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004624:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004626:	f7fc f88b 	bl	8000740 <HAL_GetTick>
 800462a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800462c:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <RCCEx_PLL2_Config+0x104>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004634:	d114      	bne.n	8004660 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004636:	f7fc f883 	bl	8000740 <HAL_GetTick>
 800463a:	1b00      	subs	r0, r0, r4
 800463c:	2802      	cmp	r0, #2
 800463e:	d9f5      	bls.n	800462c <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8004640:	2003      	movs	r0, #3
 8004642:	e7ab      	b.n	800459c <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8004644:	2e01      	cmp	r6, #1
 8004646:	d005      	beq.n	8004654 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004648:	4a07      	ldr	r2, [pc, #28]	; (8004668 <RCCEx_PLL2_Config+0x104>)
 800464a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800464c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004650:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004652:	e7e3      	b.n	800461c <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004654:	4a04      	ldr	r2, [pc, #16]	; (8004668 <RCCEx_PLL2_Config+0x104>)
 8004656:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800465c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800465e:	e7dd      	b.n	800461c <RCCEx_PLL2_Config+0xb8>
  return status;
 8004660:	2000      	movs	r0, #0
 8004662:	e79b      	b.n	800459c <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8004664:	2001      	movs	r0, #1
}
 8004666:	4770      	bx	lr
 8004668:	58024400 	.word	0x58024400
 800466c:	ffff0007 	.word	0xffff0007

08004670 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004670:	4b40      	ldr	r3, [pc, #256]	; (8004774 <RCCEx_PLL3_Config+0x104>)
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	2b03      	cmp	r3, #3
 800467a:	d079      	beq.n	8004770 <RCCEx_PLL3_Config+0x100>
{
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	460e      	mov	r6, r1
 8004680:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004682:	4a3c      	ldr	r2, [pc, #240]	; (8004774 <RCCEx_PLL3_Config+0x104>)
 8004684:	6813      	ldr	r3, [r2, #0]
 8004686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800468a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800468c:	f7fc f858 	bl	8000740 <HAL_GetTick>
 8004690:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004692:	4b38      	ldr	r3, [pc, #224]	; (8004774 <RCCEx_PLL3_Config+0x104>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800469a:	d006      	beq.n	80046aa <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800469c:	f7fc f850 	bl	8000740 <HAL_GetTick>
 80046a0:	1b40      	subs	r0, r0, r5
 80046a2:	2802      	cmp	r0, #2
 80046a4:	d9f5      	bls.n	8004692 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 80046a6:	2003      	movs	r0, #3

  }


  return status;
}
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80046aa:	4b32      	ldr	r3, [pc, #200]	; (8004774 <RCCEx_PLL3_Config+0x104>)
 80046ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ae:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 80046b2:	6821      	ldr	r1, [r4, #0]
 80046b4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80046b8:	629a      	str	r2, [r3, #40]	; 0x28
 80046ba:	6862      	ldr	r2, [r4, #4]
 80046bc:	3a01      	subs	r2, #1
 80046be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c2:	68a1      	ldr	r1, [r4, #8]
 80046c4:	3901      	subs	r1, #1
 80046c6:	0249      	lsls	r1, r1, #9
 80046c8:	b289      	uxth	r1, r1
 80046ca:	430a      	orrs	r2, r1
 80046cc:	68e1      	ldr	r1, [r4, #12]
 80046ce:	3901      	subs	r1, #1
 80046d0:	0409      	lsls	r1, r1, #16
 80046d2:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80046d6:	430a      	orrs	r2, r1
 80046d8:	6921      	ldr	r1, [r4, #16]
 80046da:	3901      	subs	r1, #1
 80046dc:	0609      	lsls	r1, r1, #24
 80046de:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80046e2:	430a      	orrs	r2, r1
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80046e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046ec:	6961      	ldr	r1, [r4, #20]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80046f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046f8:	69a1      	ldr	r1, [r4, #24]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80046fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004704:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004706:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004708:	4a1b      	ldr	r2, [pc, #108]	; (8004778 <RCCEx_PLL3_Config+0x108>)
 800470a:	400a      	ands	r2, r1
 800470c:	69e1      	ldr	r1, [r4, #28]
 800470e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004712:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800471a:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800471c:	b9c6      	cbnz	r6, 8004750 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800471e:	461a      	mov	r2, r3
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004726:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8004728:	4a12      	ldr	r2, [pc, #72]	; (8004774 <RCCEx_PLL3_Config+0x104>)
 800472a:	6813      	ldr	r3, [r2, #0]
 800472c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004730:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004732:	f7fc f805 	bl	8000740 <HAL_GetTick>
 8004736:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004738:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <RCCEx_PLL3_Config+0x104>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004740:	d114      	bne.n	800476c <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004742:	f7fb fffd 	bl	8000740 <HAL_GetTick>
 8004746:	1b00      	subs	r0, r0, r4
 8004748:	2802      	cmp	r0, #2
 800474a:	d9f5      	bls.n	8004738 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 800474c:	2003      	movs	r0, #3
 800474e:	e7ab      	b.n	80046a8 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8004750:	2e01      	cmp	r6, #1
 8004752:	d005      	beq.n	8004760 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004754:	4a07      	ldr	r2, [pc, #28]	; (8004774 <RCCEx_PLL3_Config+0x104>)
 8004756:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800475c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800475e:	e7e3      	b.n	8004728 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004760:	4a04      	ldr	r2, [pc, #16]	; (8004774 <RCCEx_PLL3_Config+0x104>)
 8004762:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004764:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004768:	62d3      	str	r3, [r2, #44]	; 0x2c
 800476a:	e7dd      	b.n	8004728 <RCCEx_PLL3_Config+0xb8>
  return status;
 800476c:	2000      	movs	r0, #0
 800476e:	e79b      	b.n	80046a8 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8004770:	2001      	movs	r0, #1
}
 8004772:	4770      	bx	lr
 8004774:	58024400 	.word	0x58024400
 8004778:	ffff0007 	.word	0xffff0007

0800477c <HAL_RCCEx_PeriphCLKConfig>:
{
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004780:	6803      	ldr	r3, [r0, #0]
 8004782:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004786:	d02b      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004788:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800478a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800478e:	d018      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8004790:	d907      	bls.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004792:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004796:	d01d      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004798:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800479c:	d12e      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800479e:	2500      	movs	r5, #0
 80047a0:	e006      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80047a2:	bb5b      	cbnz	r3, 80047fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a4:	4a93      	ldr	r2, [pc, #588]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80047a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80047a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ac:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047ae:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80047b0:	4a90      	ldr	r2, [pc, #576]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80047b2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80047b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80047b8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80047ba:	430b      	orrs	r3, r1
 80047bc:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047be:	2600      	movs	r6, #0
 80047c0:	e010      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047c2:	2102      	movs	r1, #2
 80047c4:	3004      	adds	r0, #4
 80047c6:	f7ff fecd 	bl	8004564 <RCCEx_PLL2_Config>
 80047ca:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80047cc:	2d00      	cmp	r5, #0
 80047ce:	d0ef      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80047d0:	462e      	mov	r6, r5
 80047d2:	e007      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047d4:	2102      	movs	r1, #2
 80047d6:	3024      	adds	r0, #36	; 0x24
 80047d8:	f7ff ff4a 	bl	8004670 <RCCEx_PLL3_Config>
 80047dc:	4605      	mov	r5, r0
      break;
 80047de:	e7f5      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x50>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047e0:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047e2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80047ea:	d017      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai1ClockSelection)
 80047ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d832      	bhi.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80047f2:	e8df f003 	tbb	[pc, r3]
 80047f6:	2406      	.short	0x2406
 80047f8:	0b2a      	.short	0x0b2a
 80047fa:	0b          	.byte	0x0b
 80047fb:	00          	.byte	0x00
      ret = HAL_ERROR;
 80047fc:	2601      	movs	r6, #1
 80047fe:	4635      	mov	r5, r6
 8004800:	e7f0      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004802:	4a7c      	ldr	r2, [pc, #496]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004804:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800480a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800480c:	bb3d      	cbnz	r5, 800485e <HAL_RCCEx_PeriphCLKConfig+0xe2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800480e:	4a79      	ldr	r2, [pc, #484]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004810:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004812:	f023 0307 	bic.w	r3, r3, #7
 8004816:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004818:	430b      	orrs	r3, r1
 800481a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004822:	d033      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004824:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004826:	2b80      	cmp	r3, #128	; 0x80
 8004828:	d044      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800482a:	d81a      	bhi.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 800482c:	b30b      	cbz	r3, 8004872 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 800482e:	2b40      	cmp	r3, #64	; 0x40
 8004830:	d11c      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xf0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004832:	2100      	movs	r1, #0
 8004834:	1d20      	adds	r0, r4, #4
 8004836:	f7ff fe95 	bl	8004564 <RCCEx_PLL2_Config>
 800483a:	4605      	mov	r5, r0
      break;
 800483c:	e01e      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800483e:	2100      	movs	r1, #0
 8004840:	1d20      	adds	r0, r4, #4
 8004842:	f7ff fe8f 	bl	8004564 <RCCEx_PLL2_Config>
 8004846:	4605      	mov	r5, r0
      break;
 8004848:	e7e0      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800484a:	2100      	movs	r1, #0
 800484c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004850:	f7ff ff0e 	bl	8004670 <RCCEx_PLL3_Config>
 8004854:	4605      	mov	r5, r0
      break;
 8004856:	e7d9      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = HAL_ERROR;
 8004858:	2601      	movs	r6, #1
 800485a:	4635      	mov	r5, r6
 800485c:	e7de      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800485e:	462e      	mov	r6, r5
 8004860:	e7dc      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004862:	2bc0      	cmp	r3, #192	; 0xc0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8004866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800486a:	d007      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = HAL_ERROR;
 800486c:	2601      	movs	r6, #1
 800486e:	4635      	mov	r5, r6
 8004870:	e00c      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x110>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004872:	4a60      	ldr	r2, [pc, #384]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004874:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800487a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800487c:	bb0d      	cbnz	r5, 80048c2 <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800487e:	4a5d      	ldr	r2, [pc, #372]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004880:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004882:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8004886:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004888:	430b      	orrs	r3, r1
 800488a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004892:	d02f      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004894:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8004898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800489c:	d03e      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800489e:	d812      	bhi.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80048a0:	b1d3      	cbz	r3, 80048d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80048a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048a6:	d114      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048a8:	2100      	movs	r1, #0
 80048aa:	1d20      	adds	r0, r4, #4
 80048ac:	f7ff fe5a 	bl	8004564 <RCCEx_PLL2_Config>
 80048b0:	4605      	mov	r5, r0
      break;
 80048b2:	e016      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048b4:	2100      	movs	r1, #0
 80048b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80048ba:	f7ff fed9 	bl	8004670 <RCCEx_PLL3_Config>
 80048be:	4605      	mov	r5, r0
      break;
 80048c0:	e7dc      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x100>
 80048c2:	462e      	mov	r6, r5
 80048c4:	e7e2      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai4AClockSelection)
 80048c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80048cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048d0:	d007      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 80048d2:	2601      	movs	r6, #1
 80048d4:	4635      	mov	r5, r6
 80048d6:	e00d      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048d8:	4a46      	ldr	r2, [pc, #280]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80048da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80048dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80048e2:	bb15      	cbnz	r5, 800492a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80048e4:	4a43      	ldr	r2, [pc, #268]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80048e6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80048e8:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80048ec:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80048fa:	d02f      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai4BClockSelection)
 80048fc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8004900:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004904:	d037      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004906:	d812      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004908:	b1d3      	cbz	r3, 8004940 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 800490a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800490e:	d114      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x1be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004910:	2100      	movs	r1, #0
 8004912:	1d20      	adds	r0, r4, #4
 8004914:	f7ff fe26 	bl	8004564 <RCCEx_PLL2_Config>
 8004918:	4605      	mov	r5, r0
      break;
 800491a:	e016      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800491c:	2100      	movs	r1, #0
 800491e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004922:	f7ff fea5 	bl	8004670 <RCCEx_PLL3_Config>
 8004926:	4605      	mov	r5, r0
      break;
 8004928:	e7db      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800492a:	462e      	mov	r6, r5
 800492c:	e7e2      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4BClockSelection)
 800492e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004934:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004938:	d007      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = HAL_ERROR;
 800493a:	2601      	movs	r6, #1
 800493c:	4635      	mov	r5, r6
 800493e:	e00d      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004940:	4a2c      	ldr	r2, [pc, #176]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004942:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004948:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800494a:	b9dd      	cbnz	r5, 8004984 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800494c:	4a29      	ldr	r2, [pc, #164]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800494e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004950:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004954:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8004958:	430b      	orrs	r3, r1
 800495a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004962:	d02a      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x23e>
    switch(PeriphClkInit->QspiClockSelection)
 8004964:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004966:	2b10      	cmp	r3, #16
 8004968:	d012      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x214>
 800496a:	d90d      	bls.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800496c:	2b20      	cmp	r3, #32
 800496e:	d01d      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004970:	2b30      	cmp	r3, #48	; 0x30
 8004972:	d012      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004974:	e009      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004976:	2100      	movs	r1, #0
 8004978:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800497c:	f7ff fe78 	bl	8004670 <RCCEx_PLL3_Config>
 8004980:	4605      	mov	r5, r0
      break;
 8004982:	e7e2      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004984:	462e      	mov	r6, r5
 8004986:	e7e9      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->QspiClockSelection)
 8004988:	b13b      	cbz	r3, 800499a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      ret = HAL_ERROR;
 800498a:	2601      	movs	r6, #1
 800498c:	4635      	mov	r5, r6
 800498e:	e014      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004990:	4a18      	ldr	r2, [pc, #96]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004992:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004998:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800499a:	b96d      	cbnz	r5, 80049b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800499c:	4a15      	ldr	r2, [pc, #84]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800499e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80049a0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80049a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80049a6:	430b      	orrs	r3, r1
 80049a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049aa:	e006      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x23e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049ac:	2102      	movs	r1, #2
 80049ae:	1d20      	adds	r0, r4, #4
 80049b0:	f7ff fdd8 	bl	8004564 <RCCEx_PLL2_Config>
 80049b4:	4605      	mov	r5, r0
      break;
 80049b6:	e7f0      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80049b8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80049c0:	d027      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi123ClockSelection)
 80049c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80049c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c8:	d03e      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80049ca:	d809      	bhi.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80049cc:	b1a3      	cbz	r3, 80049f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80049ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d2:	d10b      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x270>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049d4:	2100      	movs	r1, #0
 80049d6:	1d20      	adds	r0, r4, #4
 80049d8:	f7ff fdc4 	bl	8004564 <RCCEx_PLL2_Config>
 80049dc:	4605      	mov	r5, r0
      break;
 80049de:	e010      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Spi123ClockSelection)
 80049e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049e4:	d00d      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80049e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049ea:	d00a      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = HAL_ERROR;
 80049ec:	2601      	movs	r6, #1
 80049ee:	4635      	mov	r5, r6
 80049f0:	e00f      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80049f2:	bf00      	nop
 80049f4:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f8:	4a93      	ldr	r2, [pc, #588]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80049fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a00:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004a02:	bb45      	cbnz	r5, 8004a56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a04:	4a90      	ldr	r2, [pc, #576]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004a06:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004a18:	d033      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004a1a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a20:	d027      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8004a22:	d81a      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004a24:	b13b      	cbz	r3, 8004a36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2a:	d11f      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	1d20      	adds	r0, r4, #4
 8004a30:	f7ff fd98 	bl	8004564 <RCCEx_PLL2_Config>
 8004a34:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004a36:	bb1d      	cbnz	r5, 8004a80 <HAL_RCCEx_PeriphCLKConfig+0x304>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a38:	4a83      	ldr	r2, [pc, #524]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004a3a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004a3c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004a40:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004a42:	430b      	orrs	r3, r1
 8004a44:	6513      	str	r3, [r2, #80]	; 0x50
 8004a46:	e01c      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a48:	2100      	movs	r1, #0
 8004a4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a4e:	f7ff fe0f 	bl	8004670 <RCCEx_PLL3_Config>
 8004a52:	4605      	mov	r5, r0
      break;
 8004a54:	e7d5      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004a56:	462e      	mov	r6, r5
 8004a58:	e7db      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004a5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a5e:	d0ea      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a64:	d0e7      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004a66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a6a:	d0e4      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      ret = HAL_ERROR;
 8004a6c:	2601      	movs	r6, #1
 8004a6e:	4635      	mov	r5, r6
 8004a70:	e007      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a72:	2101      	movs	r1, #1
 8004a74:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a78:	f7ff fdfa 	bl	8004670 <RCCEx_PLL3_Config>
 8004a7c:	4605      	mov	r5, r0
      break;
 8004a7e:	e7da      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004a80:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004a88:	d02c      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004a8a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a92:	d01f      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8004a94:	d812      	bhi.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x340>
 8004a96:	b13b      	cbz	r3, 8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8004a98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a9c:	d117      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x352>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	1d20      	adds	r0, r4, #4
 8004aa2:	f7ff fd5f 	bl	8004564 <RCCEx_PLL2_Config>
 8004aa6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004aa8:	b9dd      	cbnz	r5, 8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004aaa:	4a67      	ldr	r2, [pc, #412]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004aac:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004aae:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004ab2:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8004aba:	e013      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac0:	d0f2      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8004ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ac6:	d0ef      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8004ac8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004acc:	d0ec      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = HAL_ERROR;
 8004ace:	2601      	movs	r6, #1
 8004ad0:	4635      	mov	r5, r6
 8004ad2:	e007      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ada:	f7ff fdc9 	bl	8004670 <RCCEx_PLL3_Config>
 8004ade:	4605      	mov	r5, r0
      break;
 8004ae0:	e7e2      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8004ae2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004aea:	d01f      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FdcanClockSelection)
 8004aec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004af2:	d006      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004af8:	d011      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8004afa:	b13b      	cbz	r3, 8004b0c <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = HAL_ERROR;
 8004afc:	2601      	movs	r6, #1
 8004afe:	4635      	mov	r5, r6
 8004b00:	e014      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b02:	4a51      	ldr	r2, [pc, #324]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004b04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b0a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004b0c:	b96d      	cbnz	r5, 8004b2a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b0e:	4a4e      	ldr	r2, [pc, #312]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004b10:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004b12:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004b16:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6513      	str	r3, [r2, #80]	; 0x50
 8004b1c:	e006      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b1e:	2101      	movs	r1, #1
 8004b20:	1d20      	adds	r0, r4, #4
 8004b22:	f7ff fd1f 	bl	8004564 <RCCEx_PLL2_Config>
 8004b26:	4605      	mov	r5, r0
      break;
 8004b28:	e7f0      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x390>
 8004b2a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004b32:	d01e      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    switch(PeriphClkInit->FmcClockSelection)
 8004b34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d817      	bhi.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8004b3a:	e8df f003 	tbb	[pc, r3]
 8004b3e:	0207      	.short	0x0207
 8004b40:	0710      	.short	0x0710
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b42:	4a41      	ldr	r2, [pc, #260]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004b44:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b4a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004b4c:	b985      	cbnz	r5, 8004b70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004b4e:	4a3e      	ldr	r2, [pc, #248]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004b50:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004b52:	f023 0303 	bic.w	r3, r3, #3
 8004b56:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b5c:	e009      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b5e:	2102      	movs	r1, #2
 8004b60:	1d20      	adds	r0, r4, #4
 8004b62:	f7ff fcff 	bl	8004564 <RCCEx_PLL2_Config>
 8004b66:	4605      	mov	r5, r0
      break;
 8004b68:	e7f0      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
      ret = HAL_ERROR;
 8004b6a:	2601      	movs	r6, #1
 8004b6c:	4635      	mov	r5, r6
 8004b6e:	e000      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8004b70:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004b78:	d11f      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x43e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	f013 0f01 	tst.w	r3, #1
 8004b80:	f000 809e 	beq.w	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch(PeriphClkInit->Usart16ClockSelection)
 8004b84:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004b86:	2b28      	cmp	r3, #40	; 0x28
 8004b88:	f200 8096 	bhi.w	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8004b8c:	e8df f003 	tbb	[pc, r3]
 8004b90:	94949484 	.word	0x94949484
 8004b94:	94949494 	.word	0x94949494
 8004b98:	9494947f 	.word	0x9494947f
 8004b9c:	94949494 	.word	0x94949494
 8004ba0:	9494948d 	.word	0x9494948d
 8004ba4:	94949494 	.word	0x94949494
 8004ba8:	94949484 	.word	0x94949484
 8004bac:	94949494 	.word	0x94949494
 8004bb0:	94949484 	.word	0x94949484
 8004bb4:	94949494 	.word	0x94949494
 8004bb8:	84          	.byte	0x84
 8004bb9:	00          	.byte	0x00
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bba:	4a24      	ldr	r2, [pc, #144]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004bbc:	6813      	ldr	r3, [r2, #0]
 8004bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004bc4:	f7fb fdbc 	bl	8000740 <HAL_GetTick>
 8004bc8:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bca:	4b20      	ldr	r3, [pc, #128]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004bd2:	d105      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x464>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd4:	f7fb fdb4 	bl	8000740 <HAL_GetTick>
 8004bd8:	1bc0      	subs	r0, r0, r7
 8004bda:	2864      	cmp	r0, #100	; 0x64
 8004bdc:	d9f5      	bls.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x44e>
        ret = HAL_TIMEOUT;
 8004bde:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8004be0:	2d00      	cmp	r5, #0
 8004be2:	d150      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004be4:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004bec:	4053      	eors	r3, r2
 8004bee:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004bf2:	d00c      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x492>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bf4:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004bf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bf8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bfc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004bfe:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004c02:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c04:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004c06:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004c0a:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8004c0c:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c0e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c16:	d01b      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if(ret == HAL_OK)
 8004c18:	2d00      	cmp	r5, #0
 8004c1a:	d136      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x50e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c1c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004c20:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004c24:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004c28:	d023      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c2a:	4a07      	ldr	r2, [pc, #28]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004c2c:	6913      	ldr	r3, [r2, #16]
 8004c2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c32:	6113      	str	r3, [r2, #16]
 8004c34:	4904      	ldr	r1, [pc, #16]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8004c36:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8004c38:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004c3c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004c40:	4313      	orrs	r3, r2
 8004c42:	670b      	str	r3, [r1, #112]	; 0x70
 8004c44:	e799      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8004c46:	bf00      	nop
 8004c48:	58024400 	.word	0x58024400
 8004c4c:	58024800 	.word	0x58024800
        tickstart = HAL_GetTick();
 8004c50:	f7fb fd76 	bl	8000740 <HAL_GetTick>
 8004c54:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c56:	4bac      	ldr	r3, [pc, #688]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5a:	f013 0f02 	tst.w	r3, #2
 8004c5e:	d1db      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x49c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c60:	f7fb fd6e 	bl	8000740 <HAL_GetTick>
 8004c64:	1bc0      	subs	r0, r0, r7
 8004c66:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c6a:	4298      	cmp	r0, r3
 8004c6c:	d9f3      	bls.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x4da>
            ret = HAL_TIMEOUT;
 8004c6e:	2503      	movs	r5, #3
 8004c70:	e7d2      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x49c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c72:	48a5      	ldr	r0, [pc, #660]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004c74:	6902      	ldr	r2, [r0, #16]
 8004c76:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004c7a:	49a4      	ldr	r1, [pc, #656]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x790>)
 8004c7c:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8004c80:	4313      	orrs	r3, r2
 8004c82:	6103      	str	r3, [r0, #16]
 8004c84:	e7d6      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      status = ret;
 8004c86:	462e      	mov	r6, r5
 8004c88:	e777      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
        status = ret;
 8004c8a:	462e      	mov	r6, r5
 8004c8c:	e775      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c8e:	2101      	movs	r1, #1
 8004c90:	1d20      	adds	r0, r4, #4
 8004c92:	f7ff fc67 	bl	8004564 <RCCEx_PLL2_Config>
 8004c96:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004c98:	b98d      	cbnz	r5, 8004cbe <HAL_RCCEx_PeriphCLKConfig+0x542>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004c9a:	4a9b      	ldr	r2, [pc, #620]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004c9c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004c9e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004ca2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	6553      	str	r3, [r2, #84]	; 0x54
 8004ca8:	e00a      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004caa:	2101      	movs	r1, #1
 8004cac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004cb0:	f7ff fcde 	bl	8004670 <RCCEx_PLL3_Config>
 8004cb4:	4605      	mov	r5, r0
      break;
 8004cb6:	e7ef      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x51c>
      ret = HAL_ERROR;
 8004cb8:	2601      	movs	r6, #1
 8004cba:	4635      	mov	r5, r6
 8004cbc:	e000      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8004cbe:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	f013 0f02 	tst.w	r3, #2
 8004cc6:	d020      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x58e>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004cc8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004cca:	2b05      	cmp	r3, #5
 8004ccc:	d819      	bhi.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004cce:	e8df f003 	tbb	[pc, r3]
 8004cd2:	0308      	.short	0x0308
 8004cd4:	08080811 	.word	0x08080811
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cd8:	2101      	movs	r1, #1
 8004cda:	1d20      	adds	r0, r4, #4
 8004cdc:	f7ff fc42 	bl	8004564 <RCCEx_PLL2_Config>
 8004ce0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004ce2:	b98d      	cbnz	r5, 8004d08 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ce4:	4a88      	ldr	r2, [pc, #544]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004ce6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004ce8:	f023 0307 	bic.w	r3, r3, #7
 8004cec:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	6553      	str	r3, [r2, #84]	; 0x54
 8004cf2:	e00a      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x58e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004cfa:	f7ff fcb9 	bl	8004670 <RCCEx_PLL3_Config>
 8004cfe:	4605      	mov	r5, r0
      break;
 8004d00:	e7ef      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x566>
      ret = HAL_ERROR;
 8004d02:	2601      	movs	r6, #1
 8004d04:	4635      	mov	r5, r6
 8004d06:	e000      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8004d08:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	f013 0f04 	tst.w	r3, #4
 8004d10:	d022      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004d12:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004d16:	2b05      	cmp	r3, #5
 8004d18:	d81a      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004d1a:	e8df f003 	tbb	[pc, r3]
 8004d1e:	0308      	.short	0x0308
 8004d20:	08080812 	.word	0x08080812
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d24:	2101      	movs	r1, #1
 8004d26:	1d20      	adds	r0, r4, #4
 8004d28:	f7ff fc1c 	bl	8004564 <RCCEx_PLL2_Config>
 8004d2c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004d2e:	b995      	cbnz	r5, 8004d56 <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d30:	4a75      	ldr	r2, [pc, #468]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004d32:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004d34:	f023 0307 	bic.w	r3, r3, #7
 8004d38:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8004d40:	e00a      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d42:	2101      	movs	r1, #1
 8004d44:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d48:	f7ff fc92 	bl	8004670 <RCCEx_PLL3_Config>
 8004d4c:	4605      	mov	r5, r0
      break;
 8004d4e:	e7ee      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      ret = HAL_ERROR;
 8004d50:	2601      	movs	r6, #1
 8004d52:	4635      	mov	r5, r6
 8004d54:	e000      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
 8004d56:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	f013 0f20 	tst.w	r3, #32
 8004d5e:	d02c      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004d60:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d68:	d01f      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8004d6a:	d812      	bhi.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x616>
 8004d6c:	b13b      	cbz	r3, 8004d7e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004d6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d72:	d117      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x628>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d74:	2100      	movs	r1, #0
 8004d76:	1d20      	adds	r0, r4, #4
 8004d78:	f7ff fbf4 	bl	8004564 <RCCEx_PLL2_Config>
 8004d7c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004d7e:	b9dd      	cbnz	r5, 8004db8 <HAL_RCCEx_PeriphCLKConfig+0x63c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d80:	4a61      	ldr	r2, [pc, #388]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004d82:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004d84:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004d88:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6553      	str	r3, [r2, #84]	; 0x54
 8004d90:	e013      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d96:	d0f2      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d9c:	d0ef      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004d9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004da2:	d0ec      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = HAL_ERROR;
 8004da4:	2601      	movs	r6, #1
 8004da6:	4635      	mov	r5, r6
 8004da8:	e007      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x63e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004daa:	2102      	movs	r1, #2
 8004dac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004db0:	f7ff fc5e 	bl	8004670 <RCCEx_PLL3_Config>
 8004db4:	4605      	mov	r5, r0
      break;
 8004db6:	e7e2      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8004db8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004dc0:	d02c      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004dc2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dca:	d01f      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x690>
 8004dcc:	d812      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004dce:	b13b      	cbz	r3, 8004de0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd4:	d117      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x68a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	1d20      	adds	r0, r4, #4
 8004dda:	f7ff fbc3 	bl	8004564 <RCCEx_PLL2_Config>
 8004dde:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004de0:	b9dd      	cbnz	r5, 8004e1a <HAL_RCCEx_PeriphCLKConfig+0x69e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004de2:	4a49      	ldr	r2, [pc, #292]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004de4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004de6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004dea:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8004dee:	430b      	orrs	r3, r1
 8004df0:	6593      	str	r3, [r2, #88]	; 0x58
 8004df2:	e013      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df8:	d0f2      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004dfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004dfe:	d0ef      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004e00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e04:	d0ec      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      ret = HAL_ERROR;
 8004e06:	2601      	movs	r6, #1
 8004e08:	4635      	mov	r5, r6
 8004e0a:	e007      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e0c:	2102      	movs	r1, #2
 8004e0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e12:	f7ff fc2d 	bl	8004670 <RCCEx_PLL3_Config>
 8004e16:	4605      	mov	r5, r0
      break;
 8004e18:	e7e2      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004e1a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004e22:	d02c      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004e24:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8004e28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e2c:	d01f      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004e2e:	d812      	bhi.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8004e30:	b13b      	cbz	r3, 8004e42 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8004e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e36:	d117      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e38:	2100      	movs	r1, #0
 8004e3a:	1d20      	adds	r0, r4, #4
 8004e3c:	f7ff fb92 	bl	8004564 <RCCEx_PLL2_Config>
 8004e40:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004e42:	b9dd      	cbnz	r5, 8004e7c <HAL_RCCEx_PeriphCLKConfig+0x700>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e44:	4a30      	ldr	r2, [pc, #192]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004e46:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004e48:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e4c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8004e50:	430b      	orrs	r3, r1
 8004e52:	6593      	str	r3, [r2, #88]	; 0x58
 8004e54:	e013      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e5a:	d0f2      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8004e5c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e60:	d0ef      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8004e62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e66:	d0ec      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      ret = HAL_ERROR;
 8004e68:	2601      	movs	r6, #1
 8004e6a:	4635      	mov	r5, r6
 8004e6c:	e007      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x702>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e6e:	2102      	movs	r1, #2
 8004e70:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e74:	f7ff fbfc 	bl	8004670 <RCCEx_PLL3_Config>
 8004e78:	4605      	mov	r5, r0
      break;
 8004e7a:	e7e2      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8004e7c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	f013 0f08 	tst.w	r3, #8
 8004e84:	d00c      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x724>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004e86:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8e:	d028      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x766>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004e90:	4a1d      	ldr	r2, [pc, #116]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004e92:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004e94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e98:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	f013 0f10 	tst.w	r3, #16
 8004ea6:	d00c      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x746>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004ea8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eb0:	d020      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004eb2:	4a15      	ldr	r2, [pc, #84]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004eb4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eba:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004ec8:	d039      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch(PeriphClkInit->AdcClockSelection)
 8004eca:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8004ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed2:	d02c      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 8004ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ed8:	d01f      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x79e>
 8004eda:	b1cb      	cbz	r3, 8004f10 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = HAL_ERROR;
 8004edc:	2601      	movs	r6, #1
 8004ede:	4635      	mov	r5, r6
 8004ee0:	e02d      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004ee2:	2102      	movs	r1, #2
 8004ee4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ee8:	f7ff fbc2 	bl	8004670 <RCCEx_PLL3_Config>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d0cf      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x714>
          status = HAL_ERROR;
 8004ef0:	2601      	movs	r6, #1
 8004ef2:	e7cd      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x714>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004ef4:	2102      	movs	r1, #2
 8004ef6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004efa:	f7ff fbb9 	bl	8004670 <RCCEx_PLL3_Config>
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d0d7      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x736>
        status = HAL_ERROR;
 8004f02:	2601      	movs	r6, #1
 8004f04:	e7d5      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x736>
 8004f06:	bf00      	nop
 8004f08:	58024400 	.word	0x58024400
 8004f0c:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f10:	2100      	movs	r1, #0
 8004f12:	1d20      	adds	r0, r4, #4
 8004f14:	f7ff fb26 	bl	8004564 <RCCEx_PLL2_Config>
 8004f18:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004f1a:	b97d      	cbnz	r5, 8004f3c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f1c:	4a64      	ldr	r2, [pc, #400]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8004f1e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004f20:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004f24:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f2c:	e007      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f2e:	2102      	movs	r1, #2
 8004f30:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004f34:	f7ff fb9c 	bl	8004670 <RCCEx_PLL3_Config>
 8004f38:	4605      	mov	r5, r0
      break;
 8004f3a:	e7ee      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x79e>
 8004f3c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004f44:	d024      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x814>
    switch(PeriphClkInit->UsbClockSelection)
 8004f46:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004f4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f4e:	d017      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x804>
 8004f50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f54:	d00a      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 8004f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f5a:	d002      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
      ret = HAL_ERROR;
 8004f5c:	2601      	movs	r6, #1
 8004f5e:	4635      	mov	r5, r6
 8004f60:	e016      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x814>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f62:	4a53      	ldr	r2, [pc, #332]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8004f64:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f6a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004f6c:	b97d      	cbnz	r5, 8004f8e <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f6e:	4a50      	ldr	r2, [pc, #320]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8004f70:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004f72:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f76:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	6553      	str	r3, [r2, #84]	; 0x54
 8004f7e:	e007      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x814>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f80:	2101      	movs	r1, #1
 8004f82:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004f86:	f7ff fb73 	bl	8004670 <RCCEx_PLL3_Config>
 8004f8a:	4605      	mov	r5, r0
      break;
 8004f8c:	e7ee      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 8004f8e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004f96:	d014      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x846>
    switch(PeriphClkInit->SdmmcClockSelection)
 8004f98:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004f9a:	b12b      	cbz	r3, 8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa0:	d023      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x86e>
      ret = HAL_ERROR;
 8004fa2:	2601      	movs	r6, #1
 8004fa4:	4635      	mov	r5, r6
 8004fa6:	e00c      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fa8:	4a41      	ldr	r2, [pc, #260]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8004faa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004fb2:	bb05      	cbnz	r5, 8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004fb4:	4a3e      	ldr	r2, [pc, #248]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8004fb6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fbc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004fbe:	430b      	orrs	r3, r1
 8004fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8004fc8:	d117      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x87e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004fd0:	d02d      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
    switch(PeriphClkInit->RngClockSelection)
 8004fd2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fd8:	d01b      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x896>
 8004fda:	d917      	bls.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x890>
 8004fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fe0:	d01c      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8004fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fe6:	d112      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x892>
 8004fe8:	e018      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004fea:	2102      	movs	r1, #2
 8004fec:	1d20      	adds	r0, r4, #4
 8004fee:	f7ff fab9 	bl	8004564 <RCCEx_PLL2_Config>
 8004ff2:	4605      	mov	r5, r0
      break;
 8004ff4:	e7dd      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x836>
 8004ff6:	462e      	mov	r6, r5
 8004ff8:	e7e3      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x846>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004ffa:	2102      	movs	r1, #2
 8004ffc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005000:	f7ff fb36 	bl	8004670 <RCCEx_PLL3_Config>
 8005004:	2800      	cmp	r0, #0
 8005006:	d0e0      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x84e>
      status=HAL_ERROR;
 8005008:	2601      	movs	r6, #1
 800500a:	e7de      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x84e>
    switch(PeriphClkInit->RngClockSelection)
 800500c:	b133      	cbz	r3, 800501c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = HAL_ERROR;
 800500e:	2601      	movs	r6, #1
 8005010:	e00d      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005012:	4a27      	ldr	r2, [pc, #156]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8005014:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800501a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800501c:	2d00      	cmp	r5, #0
 800501e:	d13d      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x920>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005020:	4a23      	ldr	r2, [pc, #140]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8005022:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005028:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800502a:	430b      	orrs	r3, r1
 800502c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005034:	d006      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005036:	4a1e      	ldr	r2, [pc, #120]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8005038:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800503a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800503e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005040:	430b      	orrs	r3, r1
 8005042:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800504a:	d007      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x8e0>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800504c:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 800504e:	6913      	ldr	r3, [r2, #16]
 8005050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005054:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8005058:	430b      	orrs	r3, r1
 800505a:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005062:	d006      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005064:	4a12      	ldr	r2, [pc, #72]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 8005066:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005068:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800506c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800506e:	430b      	orrs	r3, r1
 8005070:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005078:	d009      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x912>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800507a:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005082:	611a      	str	r2, [r3, #16]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800508a:	430a      	orrs	r2, r1
 800508c:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	db05      	blt.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  if (status == HAL_OK)
 8005094:	b106      	cbz	r6, 8005098 <HAL_RCCEx_PeriphCLKConfig+0x91c>
  return HAL_ERROR;
 8005096:	2601      	movs	r6, #1
}
 8005098:	4630      	mov	r0, r6
 800509a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800509c:	462e      	mov	r6, r5
 800509e:	e7c6      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80050a0:	4a03      	ldr	r2, [pc, #12]	; (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x934>)
 80050a2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80050a4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80050a8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80050aa:	430b      	orrs	r3, r1
 80050ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050ae:	e7f1      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x918>
 80050b0:	58024400 	.word	0x58024400

080050b4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80050b4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80050b6:	f7ff fa0f 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 80050ba:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80050c2:	4a04      	ldr	r2, [pc, #16]	; (80050d4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80050c4:	5cd3      	ldrb	r3, [r2, r3]
 80050c6:	f003 031f 	and.w	r3, r3, #31
}
 80050ca:	40d8      	lsrs	r0, r3
 80050cc:	bd08      	pop	{r3, pc}
 80050ce:	bf00      	nop
 80050d0:	58024400 	.word	0x58024400
 80050d4:	0800f2cc 	.word	0x0800f2cc

080050d8 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 80050d8:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050da:	4978      	ldr	r1, [pc, #480]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80050dc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80050de:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80050e0:	f3c2 3205 	ubfx	r2, r2, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80050e4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80050e6:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80050ea:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80050ec:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 80050f0:	fb03 f301 	mul.w	r3, r3, r1
  if (pll2m != 0U)
 80050f4:	2a00      	cmp	r2, #0
 80050f6:	f000 80db 	beq.w	80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
 80050fa:	f004 0403 	and.w	r4, r4, #3
 80050fe:	ee07 3a90 	vmov	s15, r3
 8005102:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8005106:	2c01      	cmp	r4, #1
 8005108:	d066      	beq.n	80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800510a:	b1fc      	cbz	r4, 800514c <HAL_RCCEx_GetPLL2ClockFreq+0x74>
 800510c:	2c02      	cmp	r4, #2
 800510e:	f000 80b2 	beq.w	8005276 <HAL_RCCEx_GetPLL2ClockFreq+0x19e>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005112:	ee07 2a10 	vmov	s14, r2
 8005116:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800511a:	ed9f 6a69 	vldr	s12, [pc, #420]	; 80052c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800511e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005122:	4b66      	ldr	r3, [pc, #408]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512a:	ee07 3a10 	vmov	s14, r3
 800512e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005132:	ed9f 6a64 	vldr	s12, [pc, #400]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8005136:	ee67 7a86 	vmul.f32	s15, s15, s12
 800513a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800513e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005142:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005146:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 800514a:	e061      	b.n	8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800514c:	4b5b      	ldr	r3, [pc, #364]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f013 0f20 	tst.w	r3, #32
 8005154:	d023      	beq.n	800519e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005156:	4c59      	ldr	r4, [pc, #356]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005158:	6821      	ldr	r1, [r4, #0]
 800515a:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800515e:	4b5a      	ldr	r3, [pc, #360]	; (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8005160:	40cb      	lsrs	r3, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005162:	ee07 3a10 	vmov	s14, r3
 8005166:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800516a:	ee06 2a90 	vmov	s13, r2
 800516e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8005172:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8005176:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517c:	ee07 3a10 	vmov	s14, r3
 8005180:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005184:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8005188:	ee67 7a86 	vmul.f32	s15, s15, s12
 800518c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005190:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005194:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005198:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800519c:	e038      	b.n	8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800519e:	ee07 2a10 	vmov	s14, r2
 80051a2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80051a6:	ed9f 6a49 	vldr	s12, [pc, #292]	; 80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 80051aa:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80051ae:	4b43      	ldr	r3, [pc, #268]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b6:	ee07 3a10 	vmov	s14, r3
 80051ba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80051be:	ed9f 6a41 	vldr	s12, [pc, #260]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80051c2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80051c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80051d6:	e01b      	b.n	8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051d8:	ee07 2a10 	vmov	s14, r2
 80051dc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80051e0:	ed9f 6a37 	vldr	s12, [pc, #220]	; 80052c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80051e4:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80051e8:	4b34      	ldr	r3, [pc, #208]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f0:	ee07 3a10 	vmov	s14, r3
 80051f4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80051f8:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80051fc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005208:	ee77 7a87 	vadd.f32	s15, s15, s14
 800520c:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005210:	4a2a      	ldr	r2, [pc, #168]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005212:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005214:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005218:	ee07 3a10 	vmov	s14, r3
 800521c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005220:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005224:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800522c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005230:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005234:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005236:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800523a:	ee07 3a10 	vmov	s14, r3
 800523e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005242:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800524a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800524e:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005252:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005254:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005258:	ee07 3a90 	vmov	s15, r3
 800525c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005260:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005268:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800526c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005270:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005274:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005276:	ee07 2a10 	vmov	s14, r2
 800527a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800527e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8005282:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005286:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528e:	ee07 3a10 	vmov	s14, r3
 8005292:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005296:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800529a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800529e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80052ae:	e7af      	b.n	8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052b4:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80052b6:	6083      	str	r3, [r0, #8]
}
 80052b8:	e7da      	b.n	8005270 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 80052ba:	bf00      	nop
 80052bc:	58024400 	.word	0x58024400
 80052c0:	4a742400 	.word	0x4a742400
 80052c4:	39000000 	.word	0x39000000
 80052c8:	03d09000 	.word	0x03d09000
 80052cc:	4c742400 	.word	0x4c742400
 80052d0:	4bf42400 	.word	0x4bf42400

080052d4 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 80052d4:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052d6:	4978      	ldr	r1, [pc, #480]	; (80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80052d8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80052da:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80052dc:	f3c2 5205 	ubfx	r2, r2, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052e0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80052e2:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80052e6:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80052e8:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 80052ec:	fb03 f301 	mul.w	r3, r3, r1
  if (pll3m != 0U)
 80052f0:	2a00      	cmp	r2, #0
 80052f2:	f000 80db 	beq.w	80054ac <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
 80052f6:	f004 0403 	and.w	r4, r4, #3
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8005302:	2c01      	cmp	r4, #1
 8005304:	d066      	beq.n	80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8005306:	b1fc      	cbz	r4, 8005348 <HAL_RCCEx_GetPLL3ClockFreq+0x74>
 8005308:	2c02      	cmp	r4, #2
 800530a:	f000 80b2 	beq.w	8005472 <HAL_RCCEx_GetPLL3ClockFreq+0x19e>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800530e:	ee07 2a10 	vmov	s14, r2
 8005312:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005316:	ed9f 6a69 	vldr	s12, [pc, #420]	; 80054bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800531a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800531e:	4b66      	ldr	r3, [pc, #408]	; (80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005326:	ee07 3a10 	vmov	s14, r3
 800532a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800532e:	ed9f 6a64 	vldr	s12, [pc, #400]	; 80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8005332:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800533a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800533e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005342:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8005346:	e061      	b.n	800540c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005348:	4b5b      	ldr	r3, [pc, #364]	; (80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f013 0f20 	tst.w	r3, #32
 8005350:	d023      	beq.n	800539a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005352:	4c59      	ldr	r4, [pc, #356]	; (80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005354:	6821      	ldr	r1, [r4, #0]
 8005356:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800535a:	4b5a      	ldr	r3, [pc, #360]	; (80054c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 800535c:	40cb      	lsrs	r3, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800535e:	ee07 3a10 	vmov	s14, r3
 8005362:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005366:	ee06 2a90 	vmov	s13, r2
 800536a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800536e:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8005372:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005378:	ee07 3a10 	vmov	s14, r3
 800537c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005380:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8005384:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800538c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005390:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005394:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005398:	e038      	b.n	800540c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800539a:	ee07 2a10 	vmov	s14, r2
 800539e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80053a2:	ed9f 6a49 	vldr	s12, [pc, #292]	; 80054c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 80053a6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80053aa:	4b43      	ldr	r3, [pc, #268]	; (80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b2:	ee07 3a10 	vmov	s14, r3
 80053b6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80053ba:	ed9f 6a41 	vldr	s12, [pc, #260]	; 80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80053be:	ee67 7a86 	vmul.f32	s15, s15, s12
 80053c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80053d2:	e01b      	b.n	800540c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053d4:	ee07 2a10 	vmov	s14, r2
 80053d8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80053dc:	ed9f 6a37 	vldr	s12, [pc, #220]	; 80054bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80053e0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80053e4:	4b34      	ldr	r3, [pc, #208]	; (80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ec:	ee07 3a10 	vmov	s14, r3
 80053f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80053f4:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80053f8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80053fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005404:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005408:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800540c:	4a2a      	ldr	r2, [pc, #168]	; (80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800540e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005410:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005414:	ee07 3a10 	vmov	s14, r3
 8005418:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800541c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005420:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800542c:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005430:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005432:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005436:	ee07 3a10 	vmov	s14, r3
 800543a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800543e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800544a:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800544e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005450:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005454:	ee07 3a90 	vmov	s15, r3
 8005458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005464:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005468:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800546c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005470:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005472:	ee07 2a10 	vmov	s14, r2
 8005476:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800547a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80054cc <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 800547e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8005482:	4b0d      	ldr	r3, [pc, #52]	; (80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548a:	ee07 3a10 	vmov	s14, r3
 800548e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005492:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8005496:	ee67 7a86 	vmul.f32	s15, s15, s12
 800549a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800549e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80054aa:	e7af      	b.n	800540c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80054b0:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80054b2:	6083      	str	r3, [r0, #8]
}
 80054b4:	e7da      	b.n	800546c <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 80054b6:	bf00      	nop
 80054b8:	58024400 	.word	0x58024400
 80054bc:	4a742400 	.word	0x4a742400
 80054c0:	39000000 	.word	0x39000000
 80054c4:	03d09000 	.word	0x03d09000
 80054c8:	4c742400 	.word	0x4c742400
 80054cc:	4bf42400 	.word	0x4bf42400

080054d0 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 80054d0:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054d2:	4978      	ldr	r1, [pc, #480]	; (80056b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80054d4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80054d6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80054d8:	f3c2 1205 	ubfx	r2, r2, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80054dc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80054de:	f003 0301 	and.w	r3, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80054e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80054e4:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 80054e8:	fb03 f301 	mul.w	r3, r3, r1
  if (pll1m != 0U)
 80054ec:	2a00      	cmp	r2, #0
 80054ee:	f000 80db 	beq.w	80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
 80054f2:	f004 0403 	and.w	r4, r4, #3
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 80054fe:	2c01      	cmp	r4, #1
 8005500:	d066      	beq.n	80055d0 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 8005502:	b1fc      	cbz	r4, 8005544 <HAL_RCCEx_GetPLL1ClockFreq+0x74>
 8005504:	2c02      	cmp	r4, #2
 8005506:	f000 80b2 	beq.w	800566e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800550a:	ee07 2a10 	vmov	s14, r2
 800550e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005512:	ed9f 6a69 	vldr	s12, [pc, #420]	; 80056b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8005516:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800551a:	4b66      	ldr	r3, [pc, #408]	; (80056b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005522:	ee07 3a10 	vmov	s14, r3
 8005526:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800552a:	ed9f 6a64 	vldr	s12, [pc, #400]	; 80056bc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800552e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800553a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800553e:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8005542:	e061      	b.n	8005608 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005544:	4b5b      	ldr	r3, [pc, #364]	; (80056b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f013 0f20 	tst.w	r3, #32
 800554c:	d023      	beq.n	8005596 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800554e:	4c59      	ldr	r4, [pc, #356]	; (80056b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8005550:	6821      	ldr	r1, [r4, #0]
 8005552:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8005556:	4b5a      	ldr	r3, [pc, #360]	; (80056c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 8005558:	40cb      	lsrs	r3, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800555a:	ee07 3a10 	vmov	s14, r3
 800555e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005562:	ee06 2a90 	vmov	s13, r2
 8005566:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800556a:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800556e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005574:	ee07 3a10 	vmov	s14, r3
 8005578:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800557c:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 80056bc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8005580:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800558c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005590:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005594:	e038      	b.n	8005608 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005596:	ee07 2a10 	vmov	s14, r2
 800559a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800559e:	ed9f 6a49 	vldr	s12, [pc, #292]	; 80056c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 80055a2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80055a6:	4b43      	ldr	r3, [pc, #268]	; (80056b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ae:	ee07 3a10 	vmov	s14, r3
 80055b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80055b6:	ed9f 6a41 	vldr	s12, [pc, #260]	; 80056bc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80055ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80055be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80055ce:	e01b      	b.n	8005608 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055d0:	ee07 2a10 	vmov	s14, r2
 80055d4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80055d8:	ed9f 6a37 	vldr	s12, [pc, #220]	; 80056b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 80055dc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80055e0:	4b34      	ldr	r3, [pc, #208]	; (80056b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e8:	ee07 3a10 	vmov	s14, r3
 80055ec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80055f0:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80056bc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80055f4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80055f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005600:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005604:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005608:	4a2a      	ldr	r2, [pc, #168]	; (80056b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800560a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800560c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005610:	ee07 3a10 	vmov	s14, r3
 8005614:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005618:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800561c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005628:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800562c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800562e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005632:	ee07 3a10 	vmov	s14, r3
 8005636:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800563a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800563e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005646:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800564a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800564c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005650:	ee07 3a90 	vmov	s15, r3
 8005654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005658:	ee77 7a86 	vadd.f32	s15, s15, s12
 800565c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005660:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005664:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800566c:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800566e:	ee07 2a10 	vmov	s14, r2
 8005672:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005676:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80056c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 800567a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800567e:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8005680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005686:	ee07 3a10 	vmov	s14, r3
 800568a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800568e:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80056bc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8005692:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800569a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800569e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80056a6:	e7af      	b.n	8005608 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80056ac:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80056ae:	6083      	str	r3, [r0, #8]
}
 80056b0:	e7da      	b.n	8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x198>
 80056b2:	bf00      	nop
 80056b4:	58024400 	.word	0x58024400
 80056b8:	4a742400 	.word	0x4a742400
 80056bc:	39000000 	.word	0x39000000
 80056c0:	03d09000 	.word	0x03d09000
 80056c4:	4c742400 	.word	0x4c742400
 80056c8:	4bf42400 	.word	0x4bf42400

080056cc <HAL_RCCEx_GetPeriphCLKFreq>:
{
 80056cc:	b500      	push	{lr}
 80056ce:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80056d0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80056d4:	d01b      	beq.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80056d6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80056da:	d048      	beq.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80056dc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80056e0:	d078      	beq.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80056e2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80056e6:	f000 80ab 	beq.w	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80056ea:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80056ee:	f000 80dd 	beq.w	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80056f2:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80056f6:	f000 810f 	beq.w	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80056fa:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80056fe:	f000 8131 	beq.w	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005702:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8005706:	f000 8145 	beq.w	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
      frequency = 0;
 800570a:	2000      	movs	r0, #0
 800570c:	e00c      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800570e:	4b9e      	ldr	r3, [pc, #632]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005712:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8005716:	2b04      	cmp	r3, #4
 8005718:	f200 8164 	bhi.w	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800571c:	e8df f003 	tbb	[pc, r3]
 8005720:	03110c07 	.word	0x03110c07
 8005724:	16          	.byte	0x16
 8005725:	00          	.byte	0x00
          frequency = EXTERNAL_CLOCK_VALUE;
 8005726:	4899      	ldr	r0, [pc, #612]	; (800598c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 8005728:	b00b      	add	sp, #44	; 0x2c
 800572a:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800572e:	a807      	add	r0, sp, #28
 8005730:	f7ff fece 	bl	80054d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005734:	9808      	ldr	r0, [sp, #32]
          break;
 8005736:	e7f7      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005738:	a804      	add	r0, sp, #16
 800573a:	f7ff fccd 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800573e:	9804      	ldr	r0, [sp, #16]
          break;
 8005740:	e7f2      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005742:	a801      	add	r0, sp, #4
 8005744:	f7ff fdc6 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005748:	9801      	ldr	r0, [sp, #4]
          break;
 800574a:	e7ed      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800574c:	4b8e      	ldr	r3, [pc, #568]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800574e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005750:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8005754:	f000 8148 	beq.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005758:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800575c:	f000 8146 	beq.w	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x320>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005764:	d001      	beq.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = 0;
 8005766:	2000      	movs	r0, #0
 8005768:	e7de      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 800576a:	4889      	ldr	r0, [pc, #548]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800576c:	e7dc      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800576e:	4b86      	ldr	r3, [pc, #536]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005772:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8005776:	2b80      	cmp	r3, #128	; 0x80
 8005778:	d025      	beq.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800577a:	d808      	bhi.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 800577c:	b1f3      	cbz	r3, 80057bc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 800577e:	2b40      	cmp	r3, #64	; 0x40
 8005780:	f040 8136 	bne.w	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005784:	a804      	add	r0, sp, #16
 8005786:	f7ff fca7 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800578a:	9804      	ldr	r0, [sp, #16]
          break;
 800578c:	e7cc      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 800578e:	2bc0      	cmp	r3, #192	; 0xc0
 8005790:	d012      	beq.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005796:	f040 812b 	bne.w	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800579a:	4b7b      	ldr	r3, [pc, #492]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800579c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800579e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80057a2:	f000 8127 	beq.w	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80057a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057aa:	f000 8125 	beq.w	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80057ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057b2:	d00d      	beq.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            frequency = 0;
 80057b4:	2000      	movs	r0, #0
 80057b6:	e7b7      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 80057b8:	4874      	ldr	r0, [pc, #464]	; (800598c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80057ba:	e7b5      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057bc:	a807      	add	r0, sp, #28
 80057be:	f7ff fe87 	bl	80054d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057c2:	9808      	ldr	r0, [sp, #32]
          break;
 80057c4:	e7b0      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057c6:	a801      	add	r0, sp, #4
 80057c8:	f7ff fd84 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057cc:	9801      	ldr	r0, [sp, #4]
          break;
 80057ce:	e7ab      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 80057d0:	486f      	ldr	r0, [pc, #444]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80057d2:	e7a9      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80057d4:	4b6c      	ldr	r3, [pc, #432]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 80057dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057e0:	d027      	beq.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80057e2:	d809      	bhi.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80057e4:	b303      	cbz	r3, 8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 80057e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057ea:	f040 8107 	bne.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ee:	a804      	add	r0, sp, #16
 80057f0:	f7ff fc72 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057f4:	9804      	ldr	r0, [sp, #16]
          break;
 80057f6:	e797      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 80057f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057fc:	d012      	beq.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80057fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005802:	f040 80fb 	bne.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005806:	4b60      	ldr	r3, [pc, #384]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800580a:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 800580e:	f000 80f7 	beq.w	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005816:	f000 80f5 	beq.w	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800581a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800581e:	d00d      	beq.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
            frequency = 0;
 8005820:	2000      	movs	r0, #0
 8005822:	e781      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8005824:	4859      	ldr	r0, [pc, #356]	; (800598c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005826:	e77f      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005828:	a807      	add	r0, sp, #28
 800582a:	f7ff fe51 	bl	80054d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800582e:	9808      	ldr	r0, [sp, #32]
          break;
 8005830:	e77a      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005832:	a801      	add	r0, sp, #4
 8005834:	f7ff fd4e 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005838:	9801      	ldr	r0, [sp, #4]
          break;
 800583a:	e775      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 800583c:	4854      	ldr	r0, [pc, #336]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800583e:	e773      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005840:	4b51      	ldr	r3, [pc, #324]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005844:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8005848:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800584c:	d027      	beq.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 800584e:	d809      	bhi.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8005850:	b303      	cbz	r3, 8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8005852:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005856:	f040 80d7 	bne.w	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800585a:	a804      	add	r0, sp, #16
 800585c:	f7ff fc3c 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005860:	9804      	ldr	r0, [sp, #16]
          break;
 8005862:	e761      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (saiclocksource)
 8005864:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005868:	d012      	beq.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800586a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800586e:	f040 80cb 	bne.w	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005872:	4b45      	ldr	r3, [pc, #276]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005876:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 800587a:	f000 80c7 	beq.w	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x340>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800587e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005882:	f000 80c5 	beq.w	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800588a:	d00d      	beq.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
            frequency = 0;
 800588c:	2000      	movs	r0, #0
 800588e:	e74b      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 8005890:	483e      	ldr	r0, [pc, #248]	; (800598c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005892:	e749      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005894:	a807      	add	r0, sp, #28
 8005896:	f7ff fe1b 	bl	80054d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800589a:	9808      	ldr	r0, [sp, #32]
          break;
 800589c:	e744      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800589e:	a801      	add	r0, sp, #4
 80058a0:	f7ff fd18 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058a4:	9801      	ldr	r0, [sp, #4]
          break;
 80058a6:	e73f      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 80058a8:	4839      	ldr	r0, [pc, #228]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80058aa:	e73d      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80058ac:	4b36      	ldr	r3, [pc, #216]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80058ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 80058b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b8:	d027      	beq.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80058ba:	d809      	bhi.n	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 80058bc:	b303      	cbz	r3, 8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 80058be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c2:	f040 80a7 	bne.w	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058c6:	a804      	add	r0, sp, #16
 80058c8:	f7ff fc06 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058cc:	9804      	ldr	r0, [sp, #16]
          break;
 80058ce:	e72b      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (srcclk)
 80058d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058d4:	d012      	beq.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80058d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058da:	f040 809b 	bne.w	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80058de:	4b2a      	ldr	r3, [pc, #168]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80058e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80058e2:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80058e6:	f000 8097 	beq.w	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80058ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058ee:	f000 8095 	beq.w	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80058f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058f6:	d00d      	beq.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
            frequency = 0;
 80058f8:	2000      	movs	r0, #0
 80058fa:	e715      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = EXTERNAL_CLOCK_VALUE;
 80058fc:	4823      	ldr	r0, [pc, #140]	; (800598c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80058fe:	e713      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005900:	a807      	add	r0, sp, #28
 8005902:	f7ff fde5 	bl	80054d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005906:	9808      	ldr	r0, [sp, #32]
          break;
 8005908:	e70e      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800590a:	a801      	add	r0, sp, #4
 800590c:	f7ff fce2 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005910:	9801      	ldr	r0, [sp, #4]
          break;
 8005912:	e709      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8005914:	481e      	ldr	r0, [pc, #120]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005916:	e707      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005918:	4b1b      	ldr	r3, [pc, #108]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800591a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8005920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005924:	d00a      	beq.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 8005926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800592a:	d00c      	beq.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800592c:	b10b      	cbz	r3, 8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
          frequency = 0;
 800592e:	2000      	movs	r0, #0
 8005930:	e6fa      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005932:	a804      	add	r0, sp, #16
 8005934:	f7ff fbd0 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005938:	9804      	ldr	r0, [sp, #16]
          break;
 800593a:	e6f5      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800593c:	a801      	add	r0, sp, #4
 800593e:	f7ff fcc9 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005942:	9803      	ldr	r0, [sp, #12]
          break;
 8005944:	e6f0      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005946:	4b10      	ldr	r3, [pc, #64]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800594a:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 800594e:	d067      	beq.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005954:	d066      	beq.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005956:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800595a:	d001      	beq.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
            frequency = 0;
 800595c:	2000      	movs	r0, #0
 800595e:	e6e3      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSE_VALUE;
 8005960:	480b      	ldr	r0, [pc, #44]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005962:	e6e1      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005964:	4b08      	ldr	r3, [pc, #32]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8005968:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800596c:	d002      	beq.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 800596e:	b933      	cbnz	r3, 800597e <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
          frequency = 0;
 8005970:	2000      	movs	r0, #0
 8005972:	e6d9      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005974:	a807      	add	r0, sp, #28
 8005976:	f7ff fdab 	bl	80054d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800597a:	9808      	ldr	r0, [sp, #32]
          break;
 800597c:	e6d4      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800597e:	a804      	add	r0, sp, #16
 8005980:	f7ff fbaa 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005984:	9806      	ldr	r0, [sp, #24]
          break;
 8005986:	e6cf      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8005988:	58024400 	.word	0x58024400
 800598c:	00bb8000 	.word	0x00bb8000
 8005990:	01e84800 	.word	0x01e84800
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005994:	4b25      	ldr	r3, [pc, #148]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8005996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005998:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800599c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059a0:	d019      	beq.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
 80059a2:	d90a      	bls.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
 80059a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a8:	d03e      	beq.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 80059aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059ae:	d017      	beq.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80059b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059b4:	d00a      	beq.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x300>
          frequency = 0;
 80059b6:	2000      	movs	r0, #0
          break;
 80059b8:	e6b6      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
      switch (srcclk)
 80059ba:	b14b      	cbz	r3, 80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80059bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059c0:	d1f9      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c2:	a804      	add	r0, sp, #16
 80059c4:	f7ff fb88 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80059c8:	9805      	ldr	r0, [sp, #20]
          break;
 80059ca:	e6ad      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HSI_VALUE;
 80059cc:	4818      	ldr	r0, [pc, #96]	; (8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80059ce:	e6ab      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80059d0:	f7ff fb70 	bl	80050b4 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 80059d4:	e6a8      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059d6:	a801      	add	r0, sp, #4
 80059d8:	f7ff fc7c 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80059dc:	9802      	ldr	r0, [sp, #8]
          break;
 80059de:	e6a3      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = HSE_VALUE;
 80059e0:	4814      	ldr	r0, [pc, #80]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
          break;
 80059e2:	e6a1      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 80059e4:	2000      	movs	r0, #0
 80059e6:	e69f      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 80059e8:	4811      	ldr	r0, [pc, #68]	; (8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80059ea:	e69d      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 80059ec:	4812      	ldr	r0, [pc, #72]	; (8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80059ee:	e69b      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 80059f0:	2000      	movs	r0, #0
 80059f2:	e699      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 80059f4:	480e      	ldr	r0, [pc, #56]	; (8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80059f6:	e697      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 80059f8:	480f      	ldr	r0, [pc, #60]	; (8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80059fa:	e695      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 80059fc:	2000      	movs	r0, #0
 80059fe:	e693      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8005a00:	480b      	ldr	r0, [pc, #44]	; (8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8005a02:	e691      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8005a04:	480c      	ldr	r0, [pc, #48]	; (8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005a06:	e68f      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8005a08:	2000      	movs	r0, #0
 8005a0a:	e68d      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8005a0c:	4808      	ldr	r0, [pc, #32]	; (8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8005a0e:	e68b      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8005a10:	4809      	ldr	r0, [pc, #36]	; (8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005a12:	e689      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = 0;
 8005a14:	2000      	movs	r0, #0
 8005a16:	e687      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8005a18:	4805      	ldr	r0, [pc, #20]	; (8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8005a1a:	e685      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8005a1c:	4806      	ldr	r0, [pc, #24]	; (8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005a1e:	e683      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = HSI_VALUE;
 8005a20:	4803      	ldr	r0, [pc, #12]	; (8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8005a22:	e681      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
            frequency = CSI_VALUE;
 8005a24:	4804      	ldr	r0, [pc, #16]	; (8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005a26:	e67f      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          frequency = CSI_VALUE;
 8005a28:	4803      	ldr	r0, [pc, #12]	; (8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
  return frequency;
 8005a2a:	e67d      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8005a2c:	58024400 	.word	0x58024400
 8005a30:	03d09000 	.word	0x03d09000
 8005a34:	01e84800 	.word	0x01e84800
 8005a38:	003d0900 	.word	0x003d0900

08005a3c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005a3c:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005a3e:	2400      	movs	r4, #0
 8005a40:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005a42:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005a44:	6845      	ldr	r5, [r0, #4]
 8005a46:	2d02      	cmp	r5, #2
 8005a48:	bf14      	ite	ne
 8005a4a:	2400      	movne	r4, #0
 8005a4c:	2401      	moveq	r4, #1
 8005a4e:	2d00      	cmp	r5, #0
 8005a50:	bf08      	it	eq
 8005a52:	2401      	moveq	r4, #1
 8005a54:	b1c4      	cbz	r4, 8005a88 <SAI_InitI2S+0x4c>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005a56:	2400      	movs	r4, #0
 8005a58:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005a5a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8005a5e:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005a60:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8005a64:	6744      	str	r4, [r0, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8005a66:	2400      	movs	r4, #0
 8005a68:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8005a6a:	6703      	str	r3, [r0, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005a6c:	f013 0f01 	tst.w	r3, #1
 8005a70:	d14b      	bne.n	8005b0a <SAI_InitI2S+0xce>
  {
    return HAL_ERROR;
  }

  if (protocol == SAI_I2S_STANDARD)
 8005a72:	b961      	cbnz	r1, 8005a8e <SAI_InitI2S+0x52>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005a74:	6604      	str	r4, [r0, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005a76:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8005a7a:	6644      	str	r4, [r0, #100]	; 0x64
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
  }

  /* Frame definition */
  switch (datasize)
 8005a7c:	2a03      	cmp	r2, #3
 8005a7e:	d83f      	bhi.n	8005b00 <SAI_InitI2S+0xc4>
 8005a80:	e8df f002 	tbb	[pc, r2]
 8005a84:	33281e0b 	.word	0x33281e0b
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005a88:	2401      	movs	r4, #1
 8005a8a:	6504      	str	r4, [r0, #80]	; 0x50
 8005a8c:	e7e5      	b.n	8005a5a <SAI_InitI2S+0x1e>
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005a8e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8005a92:	6604      	str	r4, [r0, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005a94:	2400      	movs	r4, #0
 8005a96:	6644      	str	r4, [r0, #100]	; 0x64
 8005a98:	e7f0      	b.n	8005a7c <SAI_InitI2S+0x40>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005a9a:	2480      	movs	r4, #128	; 0x80
 8005a9c:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005a9e:	085b      	lsrs	r3, r3, #1
 8005aa0:	015c      	lsls	r4, r3, #5
 8005aa2:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005aa8:	2340      	movs	r3, #64	; 0x40
 8005aaa:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005aac:	2300      	movs	r3, #0
      break;
    default :
      status = HAL_ERROR;
      break;
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005aae:	2902      	cmp	r1, #2
 8005ab0:	d12c      	bne.n	8005b0c <SAI_InitI2S+0xd0>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005ab2:	2a01      	cmp	r2, #1
 8005ab4:	d026      	beq.n	8005b04 <SAI_InitI2S+0xc8>
    {
      hsai->SlotInit.FirstBitOffset = 16;
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005ab6:	2a02      	cmp	r2, #2
 8005ab8:	d128      	bne.n	8005b0c <SAI_InitI2S+0xd0>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8005aba:	2208      	movs	r2, #8
 8005abc:	6682      	str	r2, [r0, #104]	; 0x68
 8005abe:	e025      	b.n	8005b0c <SAI_InitI2S+0xd0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005ac0:	2480      	movs	r4, #128	; 0x80
 8005ac2:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005ac4:	085b      	lsrs	r3, r3, #1
 8005ac6:	019d      	lsls	r5, r3, #6
 8005ac8:	6545      	str	r5, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005aca:	015b      	lsls	r3, r3, #5
 8005acc:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005ace:	66c4      	str	r4, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005ad0:	2300      	movs	r3, #0
      break;
 8005ad2:	e7ec      	b.n	8005aae <SAI_InitI2S+0x72>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005ad4:	24c0      	movs	r4, #192	; 0xc0
 8005ad6:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	019c      	lsls	r4, r3, #6
 8005adc:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005ade:	015b      	lsls	r3, r3, #5
 8005ae0:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005ae2:	2380      	movs	r3, #128	; 0x80
 8005ae4:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005ae6:	2300      	movs	r3, #0
      break;
 8005ae8:	e7e1      	b.n	8005aae <SAI_InitI2S+0x72>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005aea:	24e0      	movs	r4, #224	; 0xe0
 8005aec:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005aee:	085b      	lsrs	r3, r3, #1
 8005af0:	019c      	lsls	r4, r3, #6
 8005af2:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005af4:	015b      	lsls	r3, r3, #5
 8005af6:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005af8:	2380      	movs	r3, #128	; 0x80
 8005afa:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005afc:	2300      	movs	r3, #0
      break;
 8005afe:	e7d6      	b.n	8005aae <SAI_InitI2S+0x72>
      status = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e7d4      	b.n	8005aae <SAI_InitI2S+0x72>
      hsai->SlotInit.FirstBitOffset = 16;
 8005b04:	2110      	movs	r1, #16
 8005b06:	6681      	str	r1, [r0, #104]	; 0x68
 8005b08:	e7d5      	b.n	8005ab6 <SAI_InitI2S+0x7a>
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
    }
  }
  return status;
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	bc30      	pop	{r4, r5}
 8005b10:	4770      	bx	lr

08005b12 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005b12:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005b14:	2400      	movs	r4, #0
 8005b16:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005b18:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005b1a:	6845      	ldr	r5, [r0, #4]
 8005b1c:	2d02      	cmp	r5, #2
 8005b1e:	bf14      	ite	ne
 8005b20:	2400      	movne	r4, #0
 8005b22:	2401      	moveq	r4, #1
 8005b24:	2d00      	cmp	r5, #0
 8005b26:	bf08      	it	eq
 8005b28:	2401      	moveq	r4, #1
 8005b2a:	b1c4      	cbz	r4, 8005b5e <SAI_InitPCM+0x4c>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005b2c:	2401      	movs	r4, #1
 8005b2e:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005b30:	2400      	movs	r4, #0
 8005b32:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005b34:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8005b38:	6605      	str	r5, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005b3a:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8005b3e:	6645      	str	r5, [r0, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8005b40:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8005b42:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005b44:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8005b48:	6744      	str	r4, [r0, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8005b4a:	2904      	cmp	r1, #4
 8005b4c:	d00a      	beq.n	8005b64 <SAI_InitPCM+0x52>
      hsai->FrameInit.ActiveFrameLength = 1;
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8005b4e:	210d      	movs	r1, #13
 8005b50:	6581      	str	r1, [r0, #88]	; 0x58
  }

  switch (datasize)
 8005b52:	2a03      	cmp	r2, #3
 8005b54:	d829      	bhi.n	8005baa <SAI_InitPCM+0x98>
 8005b56:	e8df f002 	tbb	[pc, r2]
 8005b5a:	1108      	.short	0x1108
 8005b5c:	2018      	.short	0x2018
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005b5e:	2400      	movs	r4, #0
 8005b60:	6504      	str	r4, [r0, #80]	; 0x50
 8005b62:	e7e5      	b.n	8005b30 <SAI_InitPCM+0x1e>
      hsai->FrameInit.ActiveFrameLength = 1;
 8005b64:	2101      	movs	r1, #1
 8005b66:	6581      	str	r1, [r0, #88]	; 0x58
 8005b68:	e7f3      	b.n	8005b52 <SAI_InitPCM+0x40>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005b6a:	2280      	movs	r2, #128	; 0x80
 8005b6c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005b72:	2340      	movs	r3, #64	; 0x40
 8005b74:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005b76:	2000      	movs	r0, #0
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8005b78:	bc30      	pop	{r4, r5}
 8005b7a:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005b7c:	2280      	movs	r2, #128	; 0x80
 8005b7e:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005b80:	015b      	lsls	r3, r3, #5
 8005b82:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005b84:	66c2      	str	r2, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005b86:	2000      	movs	r0, #0
      break;
 8005b88:	e7f6      	b.n	8005b78 <SAI_InitPCM+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005b8a:	22c0      	movs	r2, #192	; 0xc0
 8005b8c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005b8e:	015b      	lsls	r3, r3, #5
 8005b90:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005b92:	2380      	movs	r3, #128	; 0x80
 8005b94:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005b96:	2000      	movs	r0, #0
      break;
 8005b98:	e7ee      	b.n	8005b78 <SAI_InitPCM+0x66>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005b9a:	22e0      	movs	r2, #224	; 0xe0
 8005b9c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005b9e:	015b      	lsls	r3, r3, #5
 8005ba0:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005ba2:	2380      	movs	r3, #128	; 0x80
 8005ba4:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8005ba6:	2000      	movs	r0, #0
      break;
 8005ba8:	e7e6      	b.n	8005b78 <SAI_InitPCM+0x66>
      status = HAL_ERROR;
 8005baa:	2001      	movs	r0, #1
 8005bac:	e7e4      	b.n	8005b78 <SAI_InitPCM+0x66>

08005bae <SAI_InterruptFlag>:
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
 8005bae:	2901      	cmp	r1, #1
 8005bb0:	d00a      	beq.n	8005bc8 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005bb2:	2301      	movs	r3, #1
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005bb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005bb6:	2a08      	cmp	r2, #8
 8005bb8:	d008      	beq.n	8005bcc <SAI_InterruptFlag+0x1e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005bba:	6842      	ldr	r2, [r0, #4]
 8005bbc:	3a02      	subs	r2, #2
 8005bbe:	2a01      	cmp	r2, #1
 8005bc0:	d90c      	bls.n	8005bdc <SAI_InterruptFlag+0x2e>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005bc2:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8005bc6:	4770      	bx	lr
    tmpIT |= SAI_IT_FREQ;
 8005bc8:	2309      	movs	r3, #9
 8005bca:	e7f3      	b.n	8005bb4 <SAI_InterruptFlag+0x6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005bcc:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005bce:	2a01      	cmp	r2, #1
 8005bd0:	bf18      	it	ne
 8005bd2:	2a03      	cmpne	r2, #3
 8005bd4:	d1f1      	bne.n	8005bba <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_CNRDY;
 8005bd6:	f043 0310 	orr.w	r3, r3, #16
 8005bda:	e7ee      	b.n	8005bba <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005bdc:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 8005be0:	4770      	bx	lr
	...

08005be4 <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005be4:	4b0e      	ldr	r3, [pc, #56]	; (8005c20 <SAI_Disable+0x3c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a0e      	ldr	r2, [pc, #56]	; (8005c24 <SAI_Disable+0x40>)
 8005bea:	fba2 2303 	umull	r2, r3, r2, r3
 8005bee:	0b1b      	lsrs	r3, r3, #12
 8005bf0:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005bf2:	6801      	ldr	r1, [r0, #0]
 8005bf4:	680a      	ldr	r2, [r1, #0]
 8005bf6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005bfa:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005bfc:	b13b      	cbz	r3, 8005c0e <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
 8005bfe:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005c00:	6802      	ldr	r2, [r0, #0]
 8005c02:	6812      	ldr	r2, [r2, #0]
 8005c04:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005c08:	d1f8      	bne.n	8005bfc <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005c0a:	2000      	movs	r0, #0

  return status;
}
 8005c0c:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005c0e:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8005c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c16:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 8005c1a:	2003      	movs	r0, #3
      break;
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	20000190 	.word	0x20000190
 8005c24:	95cbec1b 	.word	0x95cbec1b

08005c28 <HAL_SAI_Init>:
{
 8005c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsai == NULL)
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	f000 81df 	beq.w	8005ff0 <HAL_SAI_Init+0x3c8>
 8005c32:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8005c34:	f7fa fd9e 	bl	8000774 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8005c38:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d025      	beq.n	8005c8c <HAL_SAI_Init+0x64>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	49b3      	ldr	r1, [pc, #716]	; (8005f10 <HAL_SAI_Init+0x2e8>)
 8005c44:	4ab3      	ldr	r2, [pc, #716]	; (8005f14 <HAL_SAI_Init+0x2ec>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	bf18      	it	ne
 8005c4a:	428b      	cmpne	r3, r1
 8005c4c:	d030      	beq.n	8005cb0 <HAL_SAI_Init+0x88>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005c4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c56:	4293      	cmp	r3, r2
 8005c58:	bf18      	it	ne
 8005c5a:	428b      	cmpne	r3, r1
 8005c5c:	d045      	beq.n	8005cea <HAL_SAI_Init+0xc2>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8005c5e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c66:	4293      	cmp	r3, r2
 8005c68:	bf18      	it	ne
 8005c6a:	428b      	cmpne	r3, r1
 8005c6c:	d03f      	beq.n	8005cee <HAL_SAI_Init+0xc6>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8005c6e:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 8005c72:	f5a1 3186 	sub.w	r1, r1, #68608	; 0x10c00
 8005c76:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8005c7a:	f5a2 3286 	sub.w	r2, r2, #68608	; 0x10c00
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	bf18      	it	ne
 8005c82:	428b      	cmpne	r3, r1
 8005c84:	f040 81ba 	bne.w	8005ffc <HAL_SAI_Init+0x3d4>
    SaiBaseAddress = SAI4;
 8005c88:	4ea3      	ldr	r6, [pc, #652]	; (8005f18 <HAL_SAI_Init+0x2f0>)
 8005c8a:	e012      	b.n	8005cb2 <HAL_SAI_Init+0x8a>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	49a0      	ldr	r1, [pc, #640]	; (8005f10 <HAL_SAI_Init+0x2e8>)
 8005c90:	4aa2      	ldr	r2, [pc, #648]	; (8005f1c <HAL_SAI_Init+0x2f4>)
 8005c92:	428b      	cmp	r3, r1
 8005c94:	bf18      	it	ne
 8005c96:	4293      	cmpne	r3, r2
 8005c98:	f040 81ae 	bne.w	8005ff8 <HAL_SAI_Init+0x3d0>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005c9c:	6863      	ldr	r3, [r4, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d001      	beq.n	8005ca6 <HAL_SAI_Init+0x7e>
      return HAL_ERROR;
 8005ca2:	2501      	movs	r5, #1
 8005ca4:	e1a5      	b.n	8005ff2 <HAL_SAI_Init+0x3ca>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8005ca6:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0c9      	beq.n	8005c40 <HAL_SAI_Init+0x18>
      return HAL_ERROR;
 8005cac:	2501      	movs	r5, #1
 8005cae:	e1a0      	b.n	8005ff2 <HAL_SAI_Init+0x3ca>
    SaiBaseAddress = SAI1;
 8005cb0:	4e9b      	ldr	r6, [pc, #620]	; (8005f20 <HAL_SAI_Init+0x2f8>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8005cb2:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8005cb6:	b1e3      	cbz	r3, 8005cf2 <HAL_SAI_Init+0xca>
  if(SAI_Disable(hsai) != HAL_OK)
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f7ff ff93 	bl	8005be4 <SAI_Disable>
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	f040 819d 	bne.w	8006000 <HAL_SAI_Init+0x3d8>
  hsai->State = HAL_SAI_STATE_BUSY;
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8005ccc:	68e3      	ldr	r3, [r4, #12]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d017      	beq.n	8005d02 <HAL_SAI_Init+0xda>
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d013      	beq.n	8005cfe <HAL_SAI_Init+0xd6>
      tmpregisterGCR = 0;
 8005cd6:	2200      	movs	r2, #0
  switch (hsai->Init.Synchro)
 8005cd8:	68a3      	ldr	r3, [r4, #8]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d812      	bhi.n	8005d06 <HAL_SAI_Init+0xde>
 8005ce0:	e8df f003 	tbb	[pc, r3]
 8005ce4:	1b161325 	.word	0x1b161325
 8005ce8:	20          	.byte	0x20
 8005ce9:	00          	.byte	0x00
    SaiBaseAddress = SAI2;
 8005cea:	4e8e      	ldr	r6, [pc, #568]	; (8005f24 <HAL_SAI_Init+0x2fc>)
 8005cec:	e7e1      	b.n	8005cb2 <HAL_SAI_Init+0x8a>
    SaiBaseAddress = SAI3;
 8005cee:	4e8e      	ldr	r6, [pc, #568]	; (8005f28 <HAL_SAI_Init+0x300>)
 8005cf0:	e7df      	b.n	8005cb2 <HAL_SAI_Init+0x8a>
    hsai->Lock = HAL_UNLOCKED;
 8005cf2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f007 fbe0 	bl	800d4bc <HAL_SAI_MspInit>
 8005cfc:	e7dc      	b.n	8005cb8 <HAL_SAI_Init+0x90>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005cfe:	2220      	movs	r2, #32
      break;
 8005d00:	e7ea      	b.n	8005cd8 <HAL_SAI_Init+0xb0>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005d02:	2210      	movs	r2, #16
 8005d04:	e7e8      	b.n	8005cd8 <HAL_SAI_Init+0xb0>
      syncen_bits = 0;
 8005d06:	2700      	movs	r7, #0
 8005d08:	e013      	b.n	8005d32 <HAL_SAI_Init+0x10a>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005d0a:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005d0e:	e010      	b.n	8005d32 <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005d10:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005d14:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005d18:	e00b      	b.n	8005d32 <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8005d1a:	f042 0202 	orr.w	r2, r2, #2
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005d1e:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005d22:	e006      	b.n	8005d32 <HAL_SAI_Init+0x10a>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8005d24:	f042 0203 	orr.w	r2, r2, #3
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005d28:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8005d2c:	e001      	b.n	8005d32 <HAL_SAI_Init+0x10a>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005d2e:	f44f 6780 	mov.w	r7, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
 8005d32:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005d34:	6a23      	ldr	r3, [r4, #32]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d047      	beq.n	8005dca <HAL_SAI_Init+0x1a2>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	4974      	ldr	r1, [pc, #464]	; (8005f10 <HAL_SAI_Init+0x2e8>)
 8005d3e:	4a75      	ldr	r2, [pc, #468]	; (8005f14 <HAL_SAI_Init+0x2ec>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	bf18      	it	ne
 8005d44:	428b      	cmpne	r3, r1
 8005d46:	f000 80ca 	beq.w	8005ede <HAL_SAI_Init+0x2b6>
    uint32_t freq = 0;
 8005d4a:	2000      	movs	r0, #0
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	4977      	ldr	r1, [pc, #476]	; (8005f2c <HAL_SAI_Init+0x304>)
 8005d50:	4a77      	ldr	r2, [pc, #476]	; (8005f30 <HAL_SAI_Init+0x308>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	bf18      	it	ne
 8005d56:	428b      	cmpne	r3, r1
 8005d58:	f000 80c6 	beq.w	8005ee8 <HAL_SAI_Init+0x2c0>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	4975      	ldr	r1, [pc, #468]	; (8005f34 <HAL_SAI_Init+0x30c>)
 8005d60:	4a75      	ldr	r2, [pc, #468]	; (8005f38 <HAL_SAI_Init+0x310>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	bf18      	it	ne
 8005d66:	428b      	cmpne	r3, r1
 8005d68:	f000 80c3 	beq.w	8005ef2 <HAL_SAI_Init+0x2ca>
    if (hsai->Instance == SAI4_Block_A)
 8005d6c:	6822      	ldr	r2, [r4, #0]
 8005d6e:	4b6b      	ldr	r3, [pc, #428]	; (8005f1c <HAL_SAI_Init+0x2f4>)
 8005d70:	429a      	cmp	r2, r3
 8005d72:	f000 80c3 	beq.w	8005efc <HAL_SAI_Init+0x2d4>
    if (hsai->Instance == SAI4_Block_B)
 8005d76:	6822      	ldr	r2, [r4, #0]
 8005d78:	4b70      	ldr	r3, [pc, #448]	; (8005f3c <HAL_SAI_Init+0x314>)
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	f000 80c3 	beq.w	8005f06 <HAL_SAI_Init+0x2de>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8005d80:	69a3      	ldr	r3, [r4, #24]
 8005d82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d86:	f000 80e3 	beq.w	8005f50 <HAL_SAI_Init+0x328>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8005d8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d90:	f000 80f2 	beq.w	8005f78 <HAL_SAI_Init+0x350>
 8005d94:	2301      	movs	r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8005d96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d9a:	0041      	lsls	r1, r0, #1
 8005d9c:	6a22      	ldr	r2, [r4, #32]
 8005d9e:	fb03 f302 	mul.w	r3, r3, r2
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	fbb1 f1f3 	udiv	r1, r1, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8005da8:	4b65      	ldr	r3, [pc, #404]	; (8005f40 <HAL_SAI_Init+0x318>)
 8005daa:	fba3 2301 	umull	r2, r3, r3, r1
 8005dae:	08db      	lsrs	r3, r3, #3
 8005db0:	6263      	str	r3, [r4, #36]	; 0x24
    if ((tmpval % 10U) > 8U)
 8005db2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005db6:	0042      	lsls	r2, r0, #1
 8005db8:	1a8a      	subs	r2, r1, r2
 8005dba:	2a08      	cmp	r2, #8
 8005dbc:	d901      	bls.n	8005dc2 <HAL_SAI_Init+0x19a>
      hsai->Init.Mckdiv += 1U;
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	6263      	str	r3, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005dc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	f000 80d9 	beq.w	8005f7c <HAL_SAI_Init+0x354>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005dca:	6862      	ldr	r2, [r4, #4]
 8005dcc:	2a02      	cmp	r2, #2
 8005dce:	bf14      	ite	ne
 8005dd0:	2300      	movne	r3, #0
 8005dd2:	2301      	moveq	r3, #1
 8005dd4:	2a00      	cmp	r2, #0
 8005dd6:	bf08      	it	eq
 8005dd8:	2301      	moveq	r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 80d5 	beq.w	8005f8a <HAL_SAI_Init+0x362>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005de0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	f000 80ce 	beq.w	8005f84 <HAL_SAI_Init+0x35c>
 8005de8:	f44f 7800 	mov.w	r8, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8005dec:	f7fa fcc2 	bl	8000774 <HAL_GetREVID>
 8005df0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005df4:	f0c0 80d2 	bcc.w	8005f9c <HAL_SAI_Init+0x374>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005df8:	6822      	ldr	r2, [r4, #0]
 8005dfa:	6811      	ldr	r1, [r2, #0]
 8005dfc:	4b51      	ldr	r3, [pc, #324]	; (8005f44 <HAL_SAI_Init+0x31c>)
 8005dfe:	400b      	ands	r3, r1
 8005e00:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005e02:	6821      	ldr	r1, [r4, #0]
 8005e04:	680a      	ldr	r2, [r1, #0]
 8005e06:	6863      	ldr	r3, [r4, #4]
 8005e08:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005e0a:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005e0c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005e0e:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005e10:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005e12:	4303      	orrs	r3, r0
 8005e14:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8005e18:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005e1a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8005e1c:	4303      	orrs	r3, r0
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005e1e:	6960      	ldr	r0, [r4, #20]
 8005e20:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005e22:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005e24:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005e26:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005e28:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005e2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005e2e:	4303      	orrs	r3, r0
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005e30:	6920      	ldr	r0, [r4, #16]
 8005e32:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005e34:	4313      	orrs	r3, r2
 8005e36:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005e38:	6822      	ldr	r2, [r4, #0]
 8005e3a:	6851      	ldr	r1, [r2, #4]
 8005e3c:	4b42      	ldr	r3, [pc, #264]	; (8005f48 <HAL_SAI_Init+0x320>)
 8005e3e:	400b      	ands	r3, r1
 8005e40:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005e42:	6821      	ldr	r1, [r4, #0]
 8005e44:	684a      	ldr	r2, [r1, #4]
 8005e46:	69e3      	ldr	r3, [r4, #28]
 8005e48:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005e4a:	4303      	orrs	r3, r0
 8005e4c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005e4e:	4303      	orrs	r3, r0
 8005e50:	4313      	orrs	r3, r2
 8005e52:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005e54:	6822      	ldr	r2, [r4, #0]
 8005e56:	6891      	ldr	r1, [r2, #8]
 8005e58:	4b3c      	ldr	r3, [pc, #240]	; (8005f4c <HAL_SAI_Init+0x324>)
 8005e5a:	400b      	ands	r3, r1
 8005e5c:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005e5e:	6820      	ldr	r0, [r4, #0]
 8005e60:	6882      	ldr	r2, [r0, #8]
 8005e62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e64:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
 8005e66:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005e68:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 8005e6a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8005e6c:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 8005e6e:	6e21      	ldr	r1, [r4, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8005e70:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005e72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005e74:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 8005e76:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005e7e:	6822      	ldr	r2, [r4, #0]
 8005e80:	68d3      	ldr	r3, [r2, #12]
 8005e82:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8005e86:	f023 030f 	bic.w	r3, r3, #15
 8005e8a:	041b      	lsls	r3, r3, #16
 8005e8c:	0c1b      	lsrs	r3, r3, #16
 8005e8e:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005e90:	6820      	ldr	r0, [r4, #0]
 8005e92:	68c2      	ldr	r2, [r0, #12]
 8005e94:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005e96:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005e98:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005e9a:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005ea0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005ea2:	3901      	subs	r1, #1
 8005ea4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	4918      	ldr	r1, [pc, #96]	; (8005f10 <HAL_SAI_Init+0x2e8>)
 8005eb0:	4a1a      	ldr	r2, [pc, #104]	; (8005f1c <HAL_SAI_Init+0x2f4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	bf18      	it	ne
 8005eb6:	428b      	cmpne	r3, r1
 8005eb8:	d108      	bne.n	8005ecc <HAL_SAI_Init+0x2a4>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8005eba:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005ebc:	f023 0301 	bic.w	r3, r3, #1
 8005ec0:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8005ec2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	f000 8087 	beq.w	8005fda <HAL_SAI_Init+0x3b2>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->State = HAL_SAI_STATE_READY;
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 8005ed8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  return HAL_OK;
 8005edc:	e089      	b.n	8005ff2 <HAL_SAI_Init+0x3ca>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005ede:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005ee2:	f7ff fbf3 	bl	80056cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005ee6:	e731      	b.n	8005d4c <HAL_SAI_Init+0x124>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005ee8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005eec:	f7ff fbee 	bl	80056cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005ef0:	e734      	b.n	8005d5c <HAL_SAI_Init+0x134>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8005ef2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005ef6:	f7ff fbe9 	bl	80056cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005efa:	e737      	b.n	8005d6c <HAL_SAI_Init+0x144>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8005efc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005f00:	f7ff fbe4 	bl	80056cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005f04:	e737      	b.n	8005d76 <HAL_SAI_Init+0x14e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8005f06:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005f0a:	f7ff fbdf 	bl	80056cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005f0e:	e737      	b.n	8005d80 <HAL_SAI_Init+0x158>
 8005f10:	40015804 	.word	0x40015804
 8005f14:	40015824 	.word	0x40015824
 8005f18:	58005400 	.word	0x58005400
 8005f1c:	58005404 	.word	0x58005404
 8005f20:	40015800 	.word	0x40015800
 8005f24:	40015c00 	.word	0x40015c00
 8005f28:	40016000 	.word	0x40016000
 8005f2c:	40015c04 	.word	0x40015c04
 8005f30:	40015c24 	.word	0x40015c24
 8005f34:	40016004 	.word	0x40016004
 8005f38:	40016024 	.word	0x40016024
 8005f3c:	58005424 	.word	0x58005424
 8005f40:	cccccccd 	.word	0xcccccccd
 8005f44:	f005c010 	.word	0xf005c010
 8005f48:	ffff1ff0 	.word	0xffff1ff0
 8005f4c:	fff88000 	.word	0xfff88000
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005f50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d00b      	beq.n	8005f6e <HAL_SAI_Init+0x346>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8005f56:	2b08      	cmp	r3, #8
 8005f58:	d00b      	beq.n	8005f72 <HAL_SAI_Init+0x34a>
        tmpframelength = hsai->FrameInit.FrameLength;
 8005f5a:	6d63      	ldr	r3, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8005f5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f60:	0041      	lsls	r1, r0, #1
 8005f62:	6a22      	ldr	r2, [r4, #32]
 8005f64:	fb03 f302 	mul.w	r3, r3, r2
 8005f68:	fbb1 f1f3 	udiv	r1, r1, r3
 8005f6c:	e71c      	b.n	8005da8 <HAL_SAI_Init+0x180>
        tmpframelength = 64U;
 8005f6e:	2340      	movs	r3, #64	; 0x40
 8005f70:	e7f4      	b.n	8005f5c <HAL_SAI_Init+0x334>
        tmpframelength = 256U;
 8005f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f76:	e7f1      	b.n	8005f5c <HAL_SAI_Init+0x334>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e70c      	b.n	8005d96 <HAL_SAI_Init+0x16e>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005f7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f7e:	085b      	lsrs	r3, r3, #1
 8005f80:	6263      	str	r3, [r4, #36]	; 0x24
 8005f82:	e722      	b.n	8005dca <HAL_SAI_Init+0x1a2>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005f84:	f04f 0800 	mov.w	r8, #0
 8005f88:	e730      	b.n	8005dec <HAL_SAI_Init+0x1c4>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005f8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d002      	beq.n	8005f96 <HAL_SAI_Init+0x36e>
 8005f90:	f04f 0800 	mov.w	r8, #0
 8005f94:	e72a      	b.n	8005dec <HAL_SAI_Init+0x1c4>
 8005f96:	f44f 7800 	mov.w	r8, #512	; 0x200
 8005f9a:	e727      	b.n	8005dec <HAL_SAI_Init+0x1c4>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005f9c:	6822      	ldr	r2, [r4, #0]
 8005f9e:	6811      	ldr	r1, [r2, #0]
 8005fa0:	4b18      	ldr	r3, [pc, #96]	; (8006004 <HAL_SAI_Init+0x3dc>)
 8005fa2:	400b      	ands	r3, r1
 8005fa4:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005fa6:	6821      	ldr	r1, [r4, #0]
 8005fa8:	680a      	ldr	r2, [r1, #0]
 8005faa:	6863      	ldr	r3, [r4, #4]
 8005fac:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005fae:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005fb0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005fb2:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005fb4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005fb6:	4303      	orrs	r3, r0
 8005fb8:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8005fbc:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005fbe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8005fc0:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005fc2:	6967      	ldr	r7, [r4, #20]
 8005fc4:	433b      	orrs	r3, r7
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005fc6:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005fc8:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005fca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005fcc:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling);
 8005fd0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005fd2:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	600b      	str	r3, [r1, #0]
 8005fd8:	e72e      	b.n	8005e38 <HAL_SAI_Init+0x210>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005fda:	6c23      	ldr	r3, [r4, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8005fdc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005fde:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005fe0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005fe4:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8005fe6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005fe8:	f043 0301 	orr.w	r3, r3, #1
 8005fec:	6473      	str	r3, [r6, #68]	; 0x44
 8005fee:	e76d      	b.n	8005ecc <HAL_SAI_Init+0x2a4>
    return HAL_ERROR;
 8005ff0:	2501      	movs	r5, #1
}
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8005ff8:	2501      	movs	r5, #1
 8005ffa:	e7fa      	b.n	8005ff2 <HAL_SAI_Init+0x3ca>
    return HAL_ERROR;
 8005ffc:	2501      	movs	r5, #1
 8005ffe:	e7f8      	b.n	8005ff2 <HAL_SAI_Init+0x3ca>
    return HAL_ERROR;
 8006000:	2501      	movs	r5, #1
 8006002:	e7f6      	b.n	8005ff2 <HAL_SAI_Init+0x3ca>
 8006004:	f805c010 	.word	0xf805c010

08006008 <HAL_SAI_InitProtocol>:
{
 8006008:	b510      	push	{r4, lr}
 800600a:	4604      	mov	r4, r0
  switch (protocol)
 800600c:	2904      	cmp	r1, #4
 800600e:	d811      	bhi.n	8006034 <HAL_SAI_InitProtocol+0x2c>
 8006010:	e8df f001 	tbb	[pc, r1]
 8006014:	08030303 	.word	0x08030303
 8006018:	08          	.byte	0x08
 8006019:	00          	.byte	0x00
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800601a:	4620      	mov	r0, r4
 800601c:	f7ff fd0e 	bl	8005a3c <SAI_InitI2S>
  if (status == HAL_OK)
 8006020:	b120      	cbz	r0, 800602c <HAL_SAI_InitProtocol+0x24>
}
 8006022:	bd10      	pop	{r4, pc}
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006024:	4620      	mov	r0, r4
 8006026:	f7ff fd74 	bl	8005b12 <SAI_InitPCM>
      break;
 800602a:	e7f9      	b.n	8006020 <HAL_SAI_InitProtocol+0x18>
    status = HAL_SAI_Init(hsai);
 800602c:	4620      	mov	r0, r4
 800602e:	f7ff fdfb 	bl	8005c28 <HAL_SAI_Init>
 8006032:	e7f6      	b.n	8006022 <HAL_SAI_InitProtocol+0x1a>
      status = HAL_ERROR;
 8006034:	2001      	movs	r0, #1
 8006036:	e7f4      	b.n	8006022 <HAL_SAI_InitProtocol+0x1a>

08006038 <HAL_SAI_Abort>:
{
 8006038:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 800603a:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 800603e:	2b01      	cmp	r3, #1
 8006040:	d05d      	beq.n	80060fe <HAL_SAI_Abort+0xc6>
 8006042:	4604      	mov	r4, r0
 8006044:	2301      	movs	r3, #1
 8006046:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800604a:	6803      	ldr	r3, [r0, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006052:	d03a      	beq.n	80060ca <HAL_SAI_Abort+0x92>
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800605a:	601a      	str	r2, [r3, #0]
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800605c:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b12      	cmp	r3, #18
 8006064:	d018      	beq.n	8006098 <HAL_SAI_Abort+0x60>
  HAL_StatusTypeDef status = HAL_OK;
 8006066:	2500      	movs	r5, #0
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8006068:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b22      	cmp	r3, #34	; 0x22
 8006070:	d12c      	bne.n	80060cc <HAL_SAI_Abort+0x94>
 8006072:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8006076:	b348      	cbz	r0, 80060cc <HAL_SAI_Abort+0x94>
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8006078:	f7fb f914 	bl	80012a4 <HAL_DMA_Abort>
 800607c:	b330      	cbz	r0, 80060cc <HAL_SAI_Abort+0x94>
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800607e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006084:	2b80      	cmp	r3, #128	; 0x80
 8006086:	d021      	beq.n	80060cc <HAL_SAI_Abort+0x94>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006088:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800608c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006090:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
          status = HAL_ERROR;
 8006094:	2501      	movs	r5, #1
 8006096:	e019      	b.n	80060cc <HAL_SAI_Abort+0x94>
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 8006098:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800609c:	b188      	cbz	r0, 80060c2 <HAL_SAI_Abort+0x8a>
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800609e:	f7fb f901 	bl	80012a4 <HAL_DMA_Abort>
 80060a2:	4605      	mov	r5, r0
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d0df      	beq.n	8006068 <HAL_SAI_Abort+0x30>
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80060a8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80060ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ae:	2b80      	cmp	r3, #128	; 0x80
 80060b0:	d009      	beq.n	80060c6 <HAL_SAI_Abort+0x8e>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80060b2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80060b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ba:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
          status = HAL_ERROR;
 80060be:	2501      	movs	r5, #1
 80060c0:	e7d2      	b.n	8006068 <HAL_SAI_Abort+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 80060c2:	2500      	movs	r5, #0
 80060c4:	e7d0      	b.n	8006068 <HAL_SAI_Abort+0x30>
 80060c6:	2500      	movs	r5, #0
 80060c8:	e7ce      	b.n	8006068 <HAL_SAI_Abort+0x30>
 80060ca:	2500      	movs	r5, #0
  hsai->Instance->IMR = 0;
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	2200      	movs	r2, #0
 80060d0:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060d8:	619a      	str	r2, [r3, #24]
  if (SAI_Disable(hsai) != HAL_OK)
 80060da:	4620      	mov	r0, r4
 80060dc:	f7ff fd82 	bl	8005be4 <SAI_Disable>
 80060e0:	b100      	cbz	r0, 80060e4 <HAL_SAI_Abort+0xac>
    status = HAL_ERROR;
 80060e2:	2501      	movs	r5, #1
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80060e4:	6822      	ldr	r2, [r4, #0]
 80060e6:	6853      	ldr	r3, [r2, #4]
 80060e8:	f043 0308 	orr.w	r3, r3, #8
 80060ec:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 80060ee:	2301      	movs	r3, #1
 80060f0:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 80060f4:	2300      	movs	r3, #0
 80060f6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 80060fa:	4628      	mov	r0, r5
 80060fc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hsai);
 80060fe:	2502      	movs	r5, #2
 8006100:	e7fb      	b.n	80060fa <HAL_SAI_Abort+0xc2>
	...

08006104 <HAL_SAI_Receive_DMA>:
{
 8006104:	b538      	push	{r3, r4, r5, lr}
  if ((pData == NULL) || (Size == 0U))
 8006106:	4614      	mov	r4, r2
 8006108:	fab2 f282 	clz	r2, r2
 800610c:	0952      	lsrs	r2, r2, #5
 800610e:	2900      	cmp	r1, #0
 8006110:	bf08      	it	eq
 8006112:	2201      	moveq	r2, #1
 8006114:	2a00      	cmp	r2, #0
 8006116:	d151      	bne.n	80061bc <HAL_SAI_Receive_DMA+0xb8>
  if (hsai->State == HAL_SAI_STATE_READY)
 8006118:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b01      	cmp	r3, #1
 8006120:	d14f      	bne.n	80061c2 <HAL_SAI_Receive_DMA+0xbe>
    __HAL_LOCK(hsai);
 8006122:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8006126:	2b01      	cmp	r3, #1
 8006128:	d04d      	beq.n	80061c6 <HAL_SAI_Receive_DMA+0xc2>
 800612a:	4623      	mov	r3, r4
 800612c:	4604      	mov	r4, r0
 800612e:	2201      	movs	r2, #1
 8006130:	f880 2090 	strb.w	r2, [r0, #144]	; 0x90
    hsai->pBuffPtr = pData;
 8006134:	67a1      	str	r1, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 8006136:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
    hsai->XferCount = Size;
 800613a:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800613e:	2300      	movs	r3, #0
 8006140:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006144:	2222      	movs	r2, #34	; 0x22
 8006146:	f880 2091 	strb.w	r2, [r0, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800614a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800614e:	491f      	ldr	r1, [pc, #124]	; (80061cc <HAL_SAI_Receive_DMA+0xc8>)
 8006150:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8006152:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006156:	491e      	ldr	r1, [pc, #120]	; (80061d0 <HAL_SAI_Receive_DMA+0xcc>)
 8006158:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800615a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800615e:	491d      	ldr	r1, [pc, #116]	; (80061d4 <HAL_SAI_Receive_DMA+0xd0>)
 8006160:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8006162:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006166:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8006168:	6801      	ldr	r1, [r0, #0]
 800616a:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 800616e:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8006170:	311c      	adds	r1, #28
 8006172:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8006176:	f7fa ff49 	bl	800100c <HAL_DMA_Start_IT>
 800617a:	4605      	mov	r5, r0
 800617c:	b9c8      	cbnz	r0, 80061b2 <HAL_SAI_Receive_DMA+0xae>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800617e:	2100      	movs	r1, #0
 8006180:	4620      	mov	r0, r4
 8006182:	f7ff fd14 	bl	8005bae <SAI_InterruptFlag>
 8006186:	6822      	ldr	r2, [r4, #0]
 8006188:	6913      	ldr	r3, [r2, #16]
 800618a:	4318      	orrs	r0, r3
 800618c:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800618e:	6822      	ldr	r2, [r4, #0]
 8006190:	6813      	ldr	r3, [r2, #0]
 8006192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006196:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80061a0:	d103      	bne.n	80061aa <HAL_SAI_Receive_DMA+0xa6>
      __HAL_SAI_ENABLE(hsai);
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80061a8:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80061aa:	2300      	movs	r3, #0
 80061ac:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 80061b0:	e005      	b.n	80061be <HAL_SAI_Receive_DMA+0xba>
      __HAL_UNLOCK(hsai);
 80061b2:	2300      	movs	r3, #0
 80061b4:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 80061b8:	2501      	movs	r5, #1
 80061ba:	e000      	b.n	80061be <HAL_SAI_Receive_DMA+0xba>
    return  HAL_ERROR;
 80061bc:	2501      	movs	r5, #1
}
 80061be:	4628      	mov	r0, r5
 80061c0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 80061c2:	2502      	movs	r5, #2
 80061c4:	e7fb      	b.n	80061be <HAL_SAI_Receive_DMA+0xba>
    __HAL_LOCK(hsai);
 80061c6:	2502      	movs	r5, #2
 80061c8:	e7f9      	b.n	80061be <HAL_SAI_Receive_DMA+0xba>
 80061ca:	bf00      	nop
 80061cc:	08006217 	.word	0x08006217
 80061d0:	080061db 	.word	0x080061db
 80061d4:	08006223 	.word	0x08006223

080061d8 <HAL_SAI_RxCpltCallback>:
}
 80061d8:	4770      	bx	lr

080061da <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80061da:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061dc:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80061de:	69c3      	ldr	r3, [r0, #28]
 80061e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061e4:	d012      	beq.n	800620c <SAI_DMARxCplt+0x32>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80061e6:	6822      	ldr	r2, [r4, #0]
 80061e8:	6813      	ldr	r3, [r2, #0]
 80061ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061ee:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 80061f0:	2100      	movs	r1, #0
 80061f2:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80061f6:	4620      	mov	r0, r4
 80061f8:	f7ff fcd9 	bl	8005bae <SAI_InterruptFlag>
 80061fc:	6822      	ldr	r2, [r4, #0]
 80061fe:	6913      	ldr	r3, [r2, #16]
 8006200:	ea23 0000 	bic.w	r0, r3, r0
 8006204:	6110      	str	r0, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006206:	2301      	movs	r3, #1
 8006208:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800620c:	4620      	mov	r0, r4
 800620e:	f7ff ffe3 	bl	80061d8 <HAL_SAI_RxCpltCallback>
#endif
}
 8006212:	bd10      	pop	{r4, pc}

08006214 <HAL_SAI_RxHalfCpltCallback>:
}
 8006214:	4770      	bx	lr

08006216 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006216:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8006218:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800621a:	f7ff fffb 	bl	8006214 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800621e:	bd08      	pop	{r3, pc}

08006220 <HAL_SAI_ErrorCallback>:
}
 8006220:	4770      	bx	lr

08006222 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006222:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006224:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006226:	f7fb fec6 	bl	8001fb6 <HAL_DMA_GetError>
 800622a:	2802      	cmp	r0, #2
 800622c:	d016      	beq.n	800625c <SAI_DMAError+0x3a>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800622e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006236:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800623a:	6822      	ldr	r2, [r4, #0]
 800623c:	6813      	ldr	r3, [r2, #0]
 800623e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006242:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8006244:	4620      	mov	r0, r4
 8006246:	f7ff fccd 	bl	8005be4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800624a:	2301      	movs	r3, #1
 800624c:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006250:	2300      	movs	r3, #0
 8006252:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8006256:	4620      	mov	r0, r4
 8006258:	f7ff ffe2 	bl	8006220 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800625c:	bd10      	pop	{r4, pc}
	...

08006260 <HAL_SAI_IRQHandler>:
  if (hsai->State != HAL_SAI_STATE_RESET)
 8006260:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 811c 	beq.w	80064a2 <HAL_SAI_IRQHandler+0x242>
{
 800626a:	b510      	push	{r4, lr}
 800626c:	4604      	mov	r4, r0
    uint32_t itflags = hsai->Instance->SR;
 800626e:	6803      	ldr	r3, [r0, #0]
 8006270:	695a      	ldr	r2, [r3, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8006272:	6919      	ldr	r1, [r3, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8006274:	6818      	ldr	r0, [r3, #0]
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8006276:	f012 0f08 	tst.w	r2, #8
 800627a:	d007      	beq.n	800628c <HAL_SAI_IRQHandler+0x2c>
 800627c:	f011 0f08 	tst.w	r1, #8
 8006280:	d004      	beq.n	800628c <HAL_SAI_IRQHandler+0x2c>
      hsai->InterruptServiceRoutine(hsai);
 8006282:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006286:	4620      	mov	r0, r4
 8006288:	4798      	blx	r3
}
 800628a:	bd10      	pop	{r4, pc}
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800628c:	f012 0f01 	tst.w	r2, #1
 8006290:	d013      	beq.n	80062ba <HAL_SAI_IRQHandler+0x5a>
 8006292:	f011 0f01 	tst.w	r1, #1
 8006296:	d010      	beq.n	80062ba <HAL_SAI_IRQHandler+0x5a>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8006298:	2201      	movs	r2, #1
 800629a:	619a      	str	r2, [r3, #24]
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800629c:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b22      	cmp	r3, #34	; 0x22
 80062a4:	d000      	beq.n	80062a8 <HAL_SAI_IRQHandler+0x48>
 80062a6:	2202      	movs	r2, #2
      hsai->ErrorCode |= tmperror;
 80062a8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80062ac:	4313      	orrs	r3, r2
 80062ae:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
 80062b2:	4620      	mov	r0, r4
 80062b4:	f7ff ffb4 	bl	8006220 <HAL_SAI_ErrorCallback>
 80062b8:	e7e7      	b.n	800628a <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80062ba:	f012 0f02 	tst.w	r2, #2
 80062be:	d00a      	beq.n	80062d6 <HAL_SAI_IRQHandler+0x76>
 80062c0:	f011 0f02 	tst.w	r1, #2
 80062c4:	d007      	beq.n	80062d6 <HAL_SAI_IRQHandler+0x76>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80062c6:	2202      	movs	r2, #2
 80062c8:	619a      	str	r2, [r3, #24]
      if (hsai->mutecallback != NULL)
 80062ca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0db      	beq.n	800628a <HAL_SAI_IRQHandler+0x2a>
        hsai->mutecallback();
 80062d2:	4798      	blx	r3
 80062d4:	e7d9      	b.n	800628a <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80062d6:	f012 0f20 	tst.w	r2, #32
 80062da:	d03e      	beq.n	800635a <HAL_SAI_IRQHandler+0xfa>
 80062dc:	f011 0f20 	tst.w	r1, #32
 80062e0:	d03b      	beq.n	800635a <HAL_SAI_IRQHandler+0xfa>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 80062e2:	2220      	movs	r2, #32
 80062e4:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 80062e6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80062ea:	f043 0304 	orr.w	r3, r3, #4
 80062ee:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80062f2:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 80062f6:	d029      	beq.n	800634c <HAL_SAI_IRQHandler+0xec>
        if (hsai->hdmatx != NULL)
 80062f8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80062fc:	b133      	cbz	r3, 800630c <HAL_SAI_IRQHandler+0xac>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80062fe:	4a69      	ldr	r2, [pc, #420]	; (80064a4 <HAL_SAI_IRQHandler+0x244>)
 8006300:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8006302:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006306:	f7fb f96d 	bl	80015e4 <HAL_DMA_Abort_IT>
 800630a:	b9a8      	cbnz	r0, 8006338 <HAL_SAI_IRQHandler+0xd8>
        if (hsai->hdmarx != NULL)
 800630c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0ba      	beq.n	800628a <HAL_SAI_IRQHandler+0x2a>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006314:	4a63      	ldr	r2, [pc, #396]	; (80064a4 <HAL_SAI_IRQHandler+0x244>)
 8006316:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8006318:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800631c:	f7fb f962 	bl	80015e4 <HAL_DMA_Abort_IT>
 8006320:	2800      	cmp	r0, #0
 8006322:	d0b2      	beq.n	800628a <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006324:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8006330:	4620      	mov	r0, r4
 8006332:	f7ff ff75 	bl	8006220 <HAL_SAI_ErrorCallback>
 8006336:	e7a8      	b.n	800628a <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006338:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800633c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006340:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8006344:	4620      	mov	r0, r4
 8006346:	f7ff ff6b 	bl	8006220 <HAL_SAI_ErrorCallback>
 800634a:	e7df      	b.n	800630c <HAL_SAI_IRQHandler+0xac>
        (void) HAL_SAI_Abort(hsai);
 800634c:	4620      	mov	r0, r4
 800634e:	f7ff fe73 	bl	8006038 <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
 8006352:	4620      	mov	r0, r4
 8006354:	f7ff ff64 	bl	8006220 <HAL_SAI_ErrorCallback>
 8006358:	e797      	b.n	800628a <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800635a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800635e:	d040      	beq.n	80063e2 <HAL_SAI_IRQHandler+0x182>
 8006360:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006364:	d03d      	beq.n	80063e2 <HAL_SAI_IRQHandler+0x182>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8006366:	2240      	movs	r2, #64	; 0x40
 8006368:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800636a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800636e:	f043 0308 	orr.w	r3, r3, #8
 8006372:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006376:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 800637a:	d02b      	beq.n	80063d4 <HAL_SAI_IRQHandler+0x174>
        if (hsai->hdmatx != NULL)
 800637c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006380:	b133      	cbz	r3, 8006390 <HAL_SAI_IRQHandler+0x130>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8006382:	4a48      	ldr	r2, [pc, #288]	; (80064a4 <HAL_SAI_IRQHandler+0x244>)
 8006384:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8006386:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800638a:	f7fb f92b 	bl	80015e4 <HAL_DMA_Abort_IT>
 800638e:	b9b8      	cbnz	r0, 80063c0 <HAL_SAI_IRQHandler+0x160>
        if (hsai->hdmarx != NULL)
 8006390:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006394:	2b00      	cmp	r3, #0
 8006396:	f43f af78 	beq.w	800628a <HAL_SAI_IRQHandler+0x2a>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800639a:	4a42      	ldr	r2, [pc, #264]	; (80064a4 <HAL_SAI_IRQHandler+0x244>)
 800639c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800639e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80063a2:	f7fb f91f 	bl	80015e4 <HAL_DMA_Abort_IT>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	f43f af6f 	beq.w	800628a <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80063ac:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80063b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 80063b8:	4620      	mov	r0, r4
 80063ba:	f7ff ff31 	bl	8006220 <HAL_SAI_ErrorCallback>
 80063be:	e764      	b.n	800628a <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80063c0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80063c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 80063cc:	4620      	mov	r0, r4
 80063ce:	f7ff ff27 	bl	8006220 <HAL_SAI_ErrorCallback>
 80063d2:	e7dd      	b.n	8006390 <HAL_SAI_IRQHandler+0x130>
        (void) HAL_SAI_Abort(hsai);
 80063d4:	4620      	mov	r0, r4
 80063d6:	f7ff fe2f 	bl	8006038 <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
 80063da:	4620      	mov	r0, r4
 80063dc:	f7ff ff20 	bl	8006220 <HAL_SAI_ErrorCallback>
 80063e0:	e753      	b.n	800628a <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 80063e2:	f012 0f04 	tst.w	r2, #4
 80063e6:	d049      	beq.n	800647c <HAL_SAI_IRQHandler+0x21c>
 80063e8:	f011 0f04 	tst.w	r1, #4
 80063ec:	d046      	beq.n	800647c <HAL_SAI_IRQHandler+0x21c>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 80063ee:	2204      	movs	r2, #4
 80063f0:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 80063f2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80063f6:	f043 0320 	orr.w	r3, r3, #32
 80063fa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80063fe:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8006402:	d02b      	beq.n	800645c <HAL_SAI_IRQHandler+0x1fc>
        if (hsai->hdmatx != NULL)
 8006404:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006408:	b133      	cbz	r3, 8006418 <HAL_SAI_IRQHandler+0x1b8>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800640a:	4a26      	ldr	r2, [pc, #152]	; (80064a4 <HAL_SAI_IRQHandler+0x244>)
 800640c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800640e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006412:	f7fb f8e7 	bl	80015e4 <HAL_DMA_Abort_IT>
 8006416:	b9b8      	cbnz	r0, 8006448 <HAL_SAI_IRQHandler+0x1e8>
        if (hsai->hdmarx != NULL)
 8006418:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800641c:	2b00      	cmp	r3, #0
 800641e:	f43f af34 	beq.w	800628a <HAL_SAI_IRQHandler+0x2a>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8006422:	4a20      	ldr	r2, [pc, #128]	; (80064a4 <HAL_SAI_IRQHandler+0x244>)
 8006424:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8006426:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800642a:	f7fb f8db 	bl	80015e4 <HAL_DMA_Abort_IT>
 800642e:	2800      	cmp	r0, #0
 8006430:	f43f af2b 	beq.w	800628a <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006434:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800643c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8006440:	4620      	mov	r0, r4
 8006442:	f7ff feed 	bl	8006220 <HAL_SAI_ErrorCallback>
 8006446:	e720      	b.n	800628a <HAL_SAI_IRQHandler+0x2a>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006448:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800644c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006450:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
 8006454:	4620      	mov	r0, r4
 8006456:	f7ff fee3 	bl	8006220 <HAL_SAI_ErrorCallback>
 800645a:	e7dd      	b.n	8006418 <HAL_SAI_IRQHandler+0x1b8>
        hsai->Instance->IMR = 0U;
 800645c:	6822      	ldr	r2, [r4, #0]
 800645e:	2300      	movs	r3, #0
 8006460:	6113      	str	r3, [r2, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006462:	6822      	ldr	r2, [r4, #0]
 8006464:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006468:	6191      	str	r1, [r2, #24]
        hsai->State = HAL_SAI_STATE_READY;
 800646a:	2201      	movs	r2, #1
 800646c:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
        hsai->XferCount = 0U;
 8006470:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
        HAL_SAI_ErrorCallback(hsai);
 8006474:	4620      	mov	r0, r4
 8006476:	f7ff fed3 	bl	8006220 <HAL_SAI_ErrorCallback>
 800647a:	e706      	b.n	800628a <HAL_SAI_IRQHandler+0x2a>
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800647c:	f012 0f10 	tst.w	r2, #16
 8006480:	f43f af03 	beq.w	800628a <HAL_SAI_IRQHandler+0x2a>
 8006484:	f011 0f10 	tst.w	r1, #16
 8006488:	f43f aeff 	beq.w	800628a <HAL_SAI_IRQHandler+0x2a>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800648c:	2210      	movs	r2, #16
 800648e:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8006490:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
 800649a:	4620      	mov	r0, r4
 800649c:	f7ff fec0 	bl	8006220 <HAL_SAI_ErrorCallback>
}
 80064a0:	e6f3      	b.n	800628a <HAL_SAI_IRQHandler+0x2a>
 80064a2:	4770      	bx	lr
 80064a4:	080064a9 	.word	0x080064a9

080064a8 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80064a8:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064aa:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80064ac:	6822      	ldr	r2, [r4, #0]
 80064ae:	6813      	ldr	r3, [r2, #0]
 80064b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	2200      	movs	r2, #0
 80064ba:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064c2:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80064c4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	d007      	beq.n	80064dc <SAI_DMAAbort+0x34>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80064cc:	4620      	mov	r0, r4
 80064ce:	f7ff fb89 	bl	8005be4 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80064d2:	6822      	ldr	r2, [r4, #0]
 80064d4:	6853      	ldr	r3, [r2, #4]
 80064d6:	f043 0308 	orr.w	r3, r3, #8
 80064da:	6053      	str	r3, [r2, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80064dc:	2301      	movs	r3, #1
 80064de:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80064e8:	4620      	mov	r0, r4
 80064ea:	f7ff fe99 	bl	8006220 <HAL_SAI_ErrorCallback>
#endif
}
 80064ee:	bd10      	pop	{r4, pc}

080064f0 <HAL_SAI_GetState>:
  return hsai->State;
 80064f0:	f890 0091 	ldrb.w	r0, [r0, #145]	; 0x91
}
 80064f4:	4770      	bx	lr

080064f6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80064f6:	b570      	push	{r4, r5, r6, lr}
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80064f8:	6a84      	ldr	r4, [r0, #40]	; 0x28

  if (hsd->RxXferSize >= 32U)
 80064fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80064fc:	2b1f      	cmp	r3, #31
 80064fe:	d916      	bls.n	800652e <SD_Read_IT+0x38>
 8006500:	4606      	mov	r6, r0
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006502:	2500      	movs	r5, #0
 8006504:	e00d      	b.n	8006522 <SD_Read_IT+0x2c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006506:	6830      	ldr	r0, [r6, #0]
 8006508:	f003 f8b4 	bl	8009674 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800650c:	7020      	strb	r0, [r4, #0]
      tmp++;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800650e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006512:	7063      	strb	r3, [r4, #1]
      tmp++;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006514:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006518:	70a3      	strb	r3, [r4, #2]
      tmp++;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800651a:	0e00      	lsrs	r0, r0, #24
 800651c:	70e0      	strb	r0, [r4, #3]
      tmp++;
 800651e:	3404      	adds	r4, #4
    for(count = 0U; count < 8U; count++)
 8006520:	3501      	adds	r5, #1
 8006522:	2d07      	cmp	r5, #7
 8006524:	d9ef      	bls.n	8006506 <SD_Read_IT+0x10>
    }

    hsd->pRxBuffPtr = tmp;
 8006526:	62b4      	str	r4, [r6, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 8006528:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800652a:	3b20      	subs	r3, #32
 800652c:	62f3      	str	r3, [r6, #44]	; 0x2c
  }
}
 800652e:	bd70      	pop	{r4, r5, r6, pc}

08006530 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	b082      	sub	sp, #8
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006534:	6a04      	ldr	r4, [r0, #32]

  if (hsd->TxXferSize >= 32U)
 8006536:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006538:	2b1f      	cmp	r3, #31
 800653a:	d91d      	bls.n	8006578 <SD_Write_IT+0x48>
 800653c:	4606      	mov	r6, r0
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800653e:	2500      	movs	r5, #0
 8006540:	e014      	b.n	800656c <SD_Write_IT+0x3c>
    {
      data = (uint32_t)(*tmp);
 8006542:	7823      	ldrb	r3, [r4, #0]
 8006544:	9301      	str	r3, [sp, #4]
      tmp++;
      data |= ((uint32_t)(*tmp) << 8U);
 8006546:	7862      	ldrb	r2, [r4, #1]
 8006548:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800654c:	9301      	str	r3, [sp, #4]
      tmp++;
      data |= ((uint32_t)(*tmp) << 16U);
 800654e:	78a2      	ldrb	r2, [r4, #2]
 8006550:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006554:	9301      	str	r3, [sp, #4]
      tmp++;
      data |= ((uint32_t)(*tmp) << 24U);
 8006556:	78e2      	ldrb	r2, [r4, #3]
 8006558:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800655c:	a902      	add	r1, sp, #8
 800655e:	f841 3d04 	str.w	r3, [r1, #-4]!
      tmp++;
 8006562:	3404      	adds	r4, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006564:	6830      	ldr	r0, [r6, #0]
 8006566:	f003 f888 	bl	800967a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800656a:	3501      	adds	r5, #1
 800656c:	2d07      	cmp	r5, #7
 800656e:	d9e8      	bls.n	8006542 <SD_Write_IT+0x12>
    }

    hsd->pTxBuffPtr = tmp;
 8006570:	6234      	str	r4, [r6, #32]
    hsd->TxXferSize -= 32U;
 8006572:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006574:	3b20      	subs	r3, #32
 8006576:	6273      	str	r3, [r6, #36]	; 0x24
  }
}
 8006578:	b002      	add	sp, #8
 800657a:	bd70      	pop	{r4, r5, r6, pc}

0800657c <SD_SendSDStatus>:
{
 800657c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006580:	b086      	sub	sp, #24
 8006582:	4604      	mov	r4, r0
 8006584:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006586:	f7fa f8db 	bl	8000740 <HAL_GetTick>
 800658a:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800658c:	2100      	movs	r1, #0
 800658e:	6820      	ldr	r0, [r4, #0]
 8006590:	f003 f897 	bl	80096c2 <SDMMC_GetResponse>
 8006594:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8006598:	d167      	bne.n	800666a <SD_SendSDStatus+0xee>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800659a:	2140      	movs	r1, #64	; 0x40
 800659c:	6820      	ldr	r0, [r4, #0]
 800659e:	f003 f9ab 	bl	80098f8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80065a2:	4606      	mov	r6, r0
 80065a4:	b110      	cbz	r0, 80065ac <SD_SendSDStatus+0x30>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80065a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065a8:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 80065aa:	e060      	b.n	800666e <SD_SendSDStatus+0xf2>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80065ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80065ae:	0409      	lsls	r1, r1, #16
 80065b0:	6820      	ldr	r0, [r4, #0]
 80065b2:	f003 fa8f 	bl	8009ad4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80065b6:	4606      	mov	r6, r0
 80065b8:	b110      	cbz	r0, 80065c0 <SD_SendSDStatus+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80065ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065bc:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 80065be:	e056      	b.n	800666e <SD_SendSDStatus+0xf2>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80065c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065c4:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 80065c6:	2340      	movs	r3, #64	; 0x40
 80065c8:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80065ca:	2360      	movs	r3, #96	; 0x60
 80065cc:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80065ce:	2302      	movs	r3, #2
 80065d0:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80065d6:	2301      	movs	r3, #1
 80065d8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80065da:	4669      	mov	r1, sp
 80065dc:	6820      	ldr	r0, [r4, #0]
 80065de:	f003 f979 	bl	80098d4 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80065e2:	6820      	ldr	r0, [r4, #0]
 80065e4:	f003 fb35 	bl	8009c52 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 80065e8:	4606      	mov	r6, r0
 80065ea:	b188      	cbz	r0, 8006610 <SD_SendSDStatus+0x94>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80065ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065ee:	63a3      	str	r3, [r4, #56]	; 0x38
    return errorstate;
 80065f0:	e03d      	b.n	800666e <SD_SendSDStatus+0xf2>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80065f2:	6820      	ldr	r0, [r4, #0]
 80065f4:	f003 f83e 	bl	8009674 <SDMMC_ReadFIFO>
 80065f8:	f845 0b04 	str.w	r0, [r5], #4
      for(count = 0U; count < 8U; count++)
 80065fc:	3701      	adds	r7, #1
 80065fe:	2f07      	cmp	r7, #7
 8006600:	d9f7      	bls.n	80065f2 <SD_SendSDStatus+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006602:	f7fa f89d 	bl	8000740 <HAL_GetTick>
 8006606:	eba0 0008 	sub.w	r0, r0, r8
 800660a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800660e:	d032      	beq.n	8006676 <SD_SendSDStatus+0xfa>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006614:	f412 7f95 	tst.w	r2, #298	; 0x12a
 8006618:	d105      	bne.n	8006626 <SD_SendSDStatus+0xaa>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800661a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006620:	d0ef      	beq.n	8006602 <SD_SendSDStatus+0x86>
      for(count = 0U; count < 8U; count++)
 8006622:	4637      	mov	r7, r6
 8006624:	e7eb      	b.n	80065fe <SD_SendSDStatus+0x82>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006628:	f012 0f08 	tst.w	r2, #8
 800662c:	d126      	bne.n	800667c <SD_SendSDStatus+0x100>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800662e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006630:	f012 0f02 	tst.w	r2, #2
 8006634:	d124      	bne.n	8006680 <SD_SendSDStatus+0x104>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006638:	f013 0f20 	tst.w	r3, #32
 800663c:	d122      	bne.n	8006684 <SD_SendSDStatus+0x108>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800663e:	6820      	ldr	r0, [r4, #0]
 8006640:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006642:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006646:	d00d      	beq.n	8006664 <SD_SendSDStatus+0xe8>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006648:	f003 f814 	bl	8009674 <SDMMC_ReadFIFO>
 800664c:	f845 0b04 	str.w	r0, [r5], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006650:	f7fa f876 	bl	8000740 <HAL_GetTick>
 8006654:	eba0 0008 	sub.w	r0, r0, r8
 8006658:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800665c:	d1ef      	bne.n	800663e <SD_SendSDStatus+0xc2>
      return HAL_SD_ERROR_TIMEOUT;
 800665e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006662:	e004      	b.n	800666e <SD_SendSDStatus+0xf2>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006664:	4b08      	ldr	r3, [pc, #32]	; (8006688 <SD_SendSDStatus+0x10c>)
 8006666:	6383      	str	r3, [r0, #56]	; 0x38
  return HAL_SD_ERROR_NONE;
 8006668:	e001      	b.n	800666e <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800666a:	f44f 6600 	mov.w	r6, #2048	; 0x800
}
 800666e:	4630      	mov	r0, r6
 8006670:	b006      	add	sp, #24
 8006672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_SD_ERROR_TIMEOUT;
 8006676:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800667a:	e7f8      	b.n	800666e <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800667c:	2608      	movs	r6, #8
 800667e:	e7f6      	b.n	800666e <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006680:	2602      	movs	r6, #2
 8006682:	e7f4      	b.n	800666e <SD_SendSDStatus+0xf2>
    return HAL_SD_ERROR_RX_OVERRUN;
 8006684:	2620      	movs	r6, #32
 8006686:	e7f2      	b.n	800666e <SD_SendSDStatus+0xf2>
 8006688:	18000f3a 	.word	0x18000f3a

0800668c <SD_FindSCR>:
{
 800668c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006690:	b088      	sub	sp, #32
 8006692:	4604      	mov	r4, r0
 8006694:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8006696:	f7fa f853 	bl	8000740 <HAL_GetTick>
 800669a:	4606      	mov	r6, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 800669c:	2300      	movs	r3, #0
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80066a2:	2108      	movs	r1, #8
 80066a4:	6820      	ldr	r0, [r4, #0]
 80066a6:	f003 f927 	bl	80098f8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80066aa:	4605      	mov	r5, r0
 80066ac:	b118      	cbz	r0, 80066b6 <SD_FindSCR+0x2a>
}
 80066ae:	4628      	mov	r0, r5
 80066b0:	b008      	add	sp, #32
 80066b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80066b6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80066b8:	0409      	lsls	r1, r1, #16
 80066ba:	6820      	ldr	r0, [r4, #0]
 80066bc:	f003 fa0a 	bl	8009ad4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80066c0:	4605      	mov	r5, r0
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d1f3      	bne.n	80066ae <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80066c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066ca:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 80066cc:	2308      	movs	r3, #8
 80066ce:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80066d0:	2330      	movs	r3, #48	; 0x30
 80066d2:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80066d4:	2302      	movs	r3, #2
 80066d6:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80066d8:	2300      	movs	r3, #0
 80066da:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80066dc:	2301      	movs	r3, #1
 80066de:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80066e0:	a902      	add	r1, sp, #8
 80066e2:	6820      	ldr	r0, [r4, #0]
 80066e4:	f003 f8f6 	bl	80098d4 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80066e8:	6820      	ldr	r0, [r4, #0]
 80066ea:	f003 fa3b 	bl	8009b64 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80066ee:	4605      	mov	r5, r0
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d1dc      	bne.n	80066ae <SD_FindSCR+0x22>
  uint32_t index = 0U;
 80066f4:	4680      	mov	r8, r0
 80066f6:	e005      	b.n	8006704 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80066f8:	f7fa f822 	bl	8000740 <HAL_GetTick>
 80066fc:	1b80      	subs	r0, r0, r6
 80066fe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006702:	d048      	beq.n	8006796 <SD_FindSCR+0x10a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8006704:	6820      	ldr	r0, [r4, #0]
 8006706:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006708:	f240 532a 	movw	r3, #1322	; 0x52a
 800670c:	421a      	tst	r2, r3
 800670e:	d110      	bne.n	8006732 <SD_FindSCR+0xa6>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006710:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006712:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8006716:	d1ef      	bne.n	80066f8 <SD_FindSCR+0x6c>
 8006718:	f1b8 0f00 	cmp.w	r8, #0
 800671c:	d1ec      	bne.n	80066f8 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800671e:	f002 ffa9 	bl	8009674 <SDMMC_ReadFIFO>
 8006722:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006724:	6820      	ldr	r0, [r4, #0]
 8006726:	f002 ffa5 	bl	8009674 <SDMMC_ReadFIFO>
 800672a:	9001      	str	r0, [sp, #4]
      index++;
 800672c:	f108 0801 	add.w	r8, r8, #1
 8006730:	e7e2      	b.n	80066f8 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006732:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006734:	f013 0f08 	tst.w	r3, #8
 8006738:	d124      	bne.n	8006784 <SD_FindSCR+0xf8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800673a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800673c:	f013 0f02 	tst.w	r3, #2
 8006740:	d123      	bne.n	800678a <SD_FindSCR+0xfe>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006742:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006744:	f013 0f20 	tst.w	r3, #32
 8006748:	d122      	bne.n	8006790 <SD_FindSCR+0x104>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800674a:	4b14      	ldr	r3, [pc, #80]	; (800679c <SD_FindSCR+0x110>)
 800674c:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800674e:	9a01      	ldr	r2, [sp, #4]
 8006750:	0213      	lsls	r3, r2, #8
 8006752:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006756:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800675a:	0a11      	lsrs	r1, r2, #8
 800675c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006760:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006762:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006766:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006768:	9a00      	ldr	r2, [sp, #0]
 800676a:	0213      	lsls	r3, r2, #8
 800676c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006770:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006774:	0a11      	lsrs	r1, r2, #8
 8006776:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800677a:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800677c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006780:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8006782:	e794      	b.n	80066ae <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006784:	2508      	movs	r5, #8
 8006786:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006788:	e791      	b.n	80066ae <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800678a:	2502      	movs	r5, #2
 800678c:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800678e:	e78e      	b.n	80066ae <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006790:	2520      	movs	r5, #32
 8006792:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8006794:	e78b      	b.n	80066ae <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8006796:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800679a:	e788      	b.n	80066ae <SD_FindSCR+0x22>
 800679c:	18000f3a 	.word	0x18000f3a

080067a0 <SD_WideBus_Enable>:
{
 80067a0:	b510      	push	{r4, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 80067a6:	2100      	movs	r1, #0
 80067a8:	9100      	str	r1, [sp, #0]
 80067aa:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80067ac:	6800      	ldr	r0, [r0, #0]
 80067ae:	f002 ff88 	bl	80096c2 <SDMMC_GetResponse>
 80067b2:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80067b6:	d116      	bne.n	80067e6 <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 80067b8:	4669      	mov	r1, sp
 80067ba:	4620      	mov	r0, r4
 80067bc:	f7ff ff66 	bl	800668c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80067c0:	4603      	mov	r3, r0
 80067c2:	b990      	cbnz	r0, 80067ea <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80067c4:	9b01      	ldr	r3, [sp, #4]
 80067c6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80067ca:	d011      	beq.n	80067f0 <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80067cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80067ce:	0409      	lsls	r1, r1, #16
 80067d0:	6820      	ldr	r0, [r4, #0]
 80067d2:	f003 f97f 	bl	8009ad4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80067d6:	4603      	mov	r3, r0
 80067d8:	b938      	cbnz	r0, 80067ea <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80067da:	2102      	movs	r1, #2
 80067dc:	6820      	ldr	r0, [r4, #0]
 80067de:	f003 f9a8 	bl	8009b32 <SDMMC_CmdBusWidth>
 80067e2:	4603      	mov	r3, r0
 80067e4:	e001      	b.n	80067ea <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80067e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	b002      	add	sp, #8
 80067ee:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80067f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80067f4:	e7f9      	b.n	80067ea <SD_WideBus_Enable+0x4a>

080067f6 <SD_WideBus_Disable>:
{
 80067f6:	b510      	push	{r4, lr}
 80067f8:	b082      	sub	sp, #8
 80067fa:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 80067fc:	2100      	movs	r1, #0
 80067fe:	9100      	str	r1, [sp, #0]
 8006800:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006802:	6800      	ldr	r0, [r0, #0]
 8006804:	f002 ff5d 	bl	80096c2 <SDMMC_GetResponse>
 8006808:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800680c:	d116      	bne.n	800683c <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 800680e:	4669      	mov	r1, sp
 8006810:	4620      	mov	r0, r4
 8006812:	f7ff ff3b 	bl	800668c <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006816:	4603      	mov	r3, r0
 8006818:	b990      	cbnz	r0, 8006840 <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800681a:	9b01      	ldr	r3, [sp, #4]
 800681c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006820:	d011      	beq.n	8006846 <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006822:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006824:	0409      	lsls	r1, r1, #16
 8006826:	6820      	ldr	r0, [r4, #0]
 8006828:	f003 f954 	bl	8009ad4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800682c:	4603      	mov	r3, r0
 800682e:	b938      	cbnz	r0, 8006840 <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006830:	2100      	movs	r1, #0
 8006832:	6820      	ldr	r0, [r4, #0]
 8006834:	f003 f97d 	bl	8009b32 <SDMMC_CmdBusWidth>
 8006838:	4603      	mov	r3, r0
 800683a:	e001      	b.n	8006840 <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800683c:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8006840:	4618      	mov	r0, r3
 8006842:	b002      	add	sp, #8
 8006844:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006846:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800684a:	e7f9      	b.n	8006840 <SD_WideBus_Disable+0x4a>

0800684c <SD_SendStatus>:
{
 800684c:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 800684e:	b181      	cbz	r1, 8006872 <SD_SendStatus+0x26>
 8006850:	460d      	mov	r5, r1
 8006852:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006854:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006856:	0409      	lsls	r1, r1, #16
 8006858:	6800      	ldr	r0, [r0, #0]
 800685a:	f003 f9e1 	bl	8009c20 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800685e:	4606      	mov	r6, r0
 8006860:	b108      	cbz	r0, 8006866 <SD_SendStatus+0x1a>
}
 8006862:	4630      	mov	r0, r6
 8006864:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006866:	2100      	movs	r1, #0
 8006868:	6820      	ldr	r0, [r4, #0]
 800686a:	f002 ff2a 	bl	80096c2 <SDMMC_GetResponse>
 800686e:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 8006870:	e7f7      	b.n	8006862 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8006872:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8006876:	e7f4      	b.n	8006862 <SD_SendStatus+0x16>

08006878 <HAL_SD_ReadBlocks>:
{
 8006878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800687c:	b086      	sub	sp, #24
 800687e:	4604      	mov	r4, r0
 8006880:	460d      	mov	r5, r1
 8006882:	4616      	mov	r6, r2
 8006884:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8006886:	f7f9 ff5b 	bl	8000740 <HAL_GetTick>
  if(NULL == pData)
 800688a:	b16d      	cbz	r5, 80068a8 <HAL_SD_ReadBlocks+0x30>
 800688c:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 800688e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b01      	cmp	r3, #1
 8006896:	d00d      	beq.n	80068b4 <HAL_SD_ReadBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006898:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800689a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800689e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80068a0:	2001      	movs	r0, #1
}
 80068a2:	b006      	add	sp, #24
 80068a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80068a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80068aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068ae:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80068b0:	2001      	movs	r0, #1
 80068b2:	e7f6      	b.n	80068a2 <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068b4:	2300      	movs	r3, #0
 80068b6:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80068b8:	19f3      	adds	r3, r6, r7
 80068ba:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80068bc:	4293      	cmp	r3, r2
 80068be:	d82d      	bhi.n	800691c <HAL_SD_ReadBlocks+0xa4>
    hsd->State = HAL_SD_STATE_BUSY;
 80068c0:	2303      	movs	r3, #3
 80068c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	2200      	movs	r2, #0
 80068ca:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80068cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d000      	beq.n	80068d4 <HAL_SD_ReadBlocks+0x5c>
      add *= 512U;
 80068d2:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80068d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068d8:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80068da:	027b      	lsls	r3, r7, #9
 80068dc:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80068de:	2390      	movs	r3, #144	; 0x90
 80068e0:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80068e2:	2302      	movs	r3, #2
 80068e4:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80068ea:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80068ec:	4669      	mov	r1, sp
 80068ee:	6820      	ldr	r0, [r4, #0]
 80068f0:	f002 fff0 	bl	80098d4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80068f4:	6822      	ldr	r2, [r4, #0]
 80068f6:	68d3      	ldr	r3, [r2, #12]
 80068f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068fc:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 80068fe:	2f01      	cmp	r7, #1
 8006900:	d912      	bls.n	8006928 <HAL_SD_ReadBlocks+0xb0>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006902:	2302      	movs	r3, #2
 8006904:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006906:	4631      	mov	r1, r6
 8006908:	6820      	ldr	r0, [r4, #0]
 800690a:	f003 f827 	bl	800995c <SDMMC_CmdReadMultiBlock>
 800690e:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8006910:	f1ba 0f00 	cmp.w	sl, #0
 8006914:	d110      	bne.n	8006938 <HAL_SD_ReadBlocks+0xc0>
    dataremaining = config.DataLength;
 8006916:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800691a:	e024      	b.n	8006966 <HAL_SD_ReadBlocks+0xee>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800691c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800691e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006922:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8006924:	2001      	movs	r0, #1
 8006926:	e7bc      	b.n	80068a2 <HAL_SD_ReadBlocks+0x2a>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006928:	2301      	movs	r3, #1
 800692a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800692c:	4631      	mov	r1, r6
 800692e:	6820      	ldr	r0, [r4, #0]
 8006930:	f002 fffb 	bl	800992a <SDMMC_CmdReadSingleBlock>
 8006934:	4682      	mov	sl, r0
 8006936:	e7eb      	b.n	8006910 <HAL_SD_ReadBlocks+0x98>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	4a4c      	ldr	r2, [pc, #304]	; (8006a6c <HAL_SD_ReadBlocks+0x1f4>)
 800693c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800693e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006940:	ea43 030a 	orr.w	r3, r3, sl
 8006944:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006946:	2001      	movs	r0, #1
 8006948:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800694c:	2300      	movs	r3, #0
 800694e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006950:	e7a7      	b.n	80068a2 <HAL_SD_ReadBlocks+0x2a>
        dataremaining -= 32U;
 8006952:	f1a9 0920 	sub.w	r9, r9, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006956:	f7f9 fef3 	bl	8000740 <HAL_GetTick>
 800695a:	eba0 0008 	sub.w	r0, r0, r8
 800695e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006960:	4298      	cmp	r0, r3
 8006962:	d21e      	bcs.n	80069a2 <HAL_SD_ReadBlocks+0x12a>
 8006964:	b1eb      	cbz	r3, 80069a2 <HAL_SD_ReadBlocks+0x12a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800696a:	f412 7f95 	tst.w	r2, #298	; 0x12a
 800696e:	d126      	bne.n	80069be <HAL_SD_ReadBlocks+0x146>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8006970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006972:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006976:	d0ee      	beq.n	8006956 <HAL_SD_ReadBlocks+0xde>
 8006978:	f1b9 0f1f 	cmp.w	r9, #31
 800697c:	d9eb      	bls.n	8006956 <HAL_SD_ReadBlocks+0xde>
        for(count = 0U; count < 8U; count++)
 800697e:	4656      	mov	r6, sl
 8006980:	2e07      	cmp	r6, #7
 8006982:	d8e6      	bhi.n	8006952 <HAL_SD_ReadBlocks+0xda>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006984:	6820      	ldr	r0, [r4, #0]
 8006986:	f002 fe75 	bl	8009674 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800698a:	7028      	strb	r0, [r5, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800698c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006990:	706b      	strb	r3, [r5, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006992:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006996:	70ab      	strb	r3, [r5, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006998:	0e00      	lsrs	r0, r0, #24
 800699a:	70e8      	strb	r0, [r5, #3]
          tempbuff++;
 800699c:	3504      	adds	r5, #4
        for(count = 0U; count < 8U; count++)
 800699e:	3601      	adds	r6, #1
 80069a0:	e7ee      	b.n	8006980 <HAL_SD_ReadBlocks+0x108>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	4a31      	ldr	r2, [pc, #196]	; (8006a6c <HAL_SD_ReadBlocks+0x1f4>)
 80069a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80069a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069ae:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80069b0:	2301      	movs	r3, #1
 80069b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80069ba:	2003      	movs	r0, #3
 80069bc:	e771      	b.n	80068a2 <HAL_SD_ReadBlocks+0x2a>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069c4:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80069c6:	6820      	ldr	r0, [r4, #0]
 80069c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069ca:	f413 7f80 	tst.w	r3, #256	; 0x100
 80069ce:	d004      	beq.n	80069da <HAL_SD_ReadBlocks+0x162>
 80069d0:	2f01      	cmp	r7, #1
 80069d2:	d902      	bls.n	80069da <HAL_SD_ReadBlocks+0x162>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80069d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d118      	bne.n	8006a0c <HAL_SD_ReadBlocks+0x194>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069de:	f012 0f08 	tst.w	r2, #8
 80069e2:	d124      	bne.n	8006a2e <HAL_SD_ReadBlocks+0x1b6>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80069e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069e6:	f012 0f02 	tst.w	r2, #2
 80069ea:	d12c      	bne.n	8006a46 <HAL_SD_ReadBlocks+0x1ce>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80069ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069ee:	f012 0f20 	tst.w	r2, #32
 80069f2:	d034      	beq.n	8006a5e <HAL_SD_ReadBlocks+0x1e6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069f4:	4a1d      	ldr	r2, [pc, #116]	; (8006a6c <HAL_SD_ReadBlocks+0x1f4>)
 80069f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80069f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069fa:	f043 0320 	orr.w	r3, r3, #32
 80069fe:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a00:	2001      	movs	r0, #1
 8006a02:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a06:	2300      	movs	r3, #0
 8006a08:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006a0a:	e74a      	b.n	80068a2 <HAL_SD_ReadBlocks+0x2a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a0c:	f002 fff2 	bl	80099f4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a10:	4603      	mov	r3, r0
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d0e1      	beq.n	80069da <HAL_SD_ReadBlocks+0x162>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a16:	6822      	ldr	r2, [r4, #0]
 8006a18:	4914      	ldr	r1, [pc, #80]	; (8006a6c <HAL_SD_ReadBlocks+0x1f4>)
 8006a1a:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006a1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006a22:	2001      	movs	r0, #1
 8006a24:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8006a2c:	e739      	b.n	80068a2 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a2e:	4a0f      	ldr	r2, [pc, #60]	; (8006a6c <HAL_SD_ReadBlocks+0x1f4>)
 8006a30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006a32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a34:	f043 0308 	orr.w	r3, r3, #8
 8006a38:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a3a:	2001      	movs	r0, #1
 8006a3c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a40:	2300      	movs	r3, #0
 8006a42:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006a44:	e72d      	b.n	80068a2 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a46:	4a09      	ldr	r2, [pc, #36]	; (8006a6c <HAL_SD_ReadBlocks+0x1f4>)
 8006a48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006a4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a4c:	f043 0302 	orr.w	r3, r3, #2
 8006a50:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a52:	2001      	movs	r0, #1
 8006a54:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006a5c:	e721      	b.n	80068a2 <HAL_SD_ReadBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006a5e:	4a04      	ldr	r2, [pc, #16]	; (8006a70 <HAL_SD_ReadBlocks+0x1f8>)
 8006a60:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a62:	2301      	movs	r3, #1
 8006a64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8006a68:	2000      	movs	r0, #0
 8006a6a:	e71a      	b.n	80068a2 <HAL_SD_ReadBlocks+0x2a>
 8006a6c:	1fe00fff 	.word	0x1fe00fff
 8006a70:	18000f3a 	.word	0x18000f3a

08006a74 <HAL_SD_WriteBlocks>:
{
 8006a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a78:	b088      	sub	sp, #32
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	460d      	mov	r5, r1
 8006a7e:	4616      	mov	r6, r2
 8006a80:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8006a82:	f7f9 fe5d 	bl	8000740 <HAL_GetTick>
  if(NULL == pData)
 8006a86:	b16d      	cbz	r5, 8006aa4 <HAL_SD_WriteBlocks+0x30>
 8006a88:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8006a8a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d00d      	beq.n	8006ab0 <HAL_SD_WriteBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006a94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a9a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8006a9c:	2001      	movs	r0, #1
}
 8006a9e:	b008      	add	sp, #32
 8006aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006aa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006aa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006aaa:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8006aac:	2001      	movs	r0, #1
 8006aae:	e7f6      	b.n	8006a9e <HAL_SD_WriteBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006ab4:	19f3      	adds	r3, r6, r7
 8006ab6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d82c      	bhi.n	8006b16 <HAL_SD_WriteBlocks+0xa2>
    hsd->State = HAL_SD_STATE_BUSY;
 8006abc:	2303      	movs	r3, #3
 8006abe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006ac8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d000      	beq.n	8006ad0 <HAL_SD_WriteBlocks+0x5c>
      add *= 512U;
 8006ace:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006ad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ad4:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006ad6:	027b      	lsls	r3, r7, #9
 8006ad8:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006ada:	2390      	movs	r3, #144	; 0x90
 8006adc:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006ae2:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006ae4:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006ae6:	a902      	add	r1, sp, #8
 8006ae8:	6820      	ldr	r0, [r4, #0]
 8006aea:	f002 fef3 	bl	80098d4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006aee:	6822      	ldr	r2, [r4, #0]
 8006af0:	68d3      	ldr	r3, [r2, #12]
 8006af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006af6:	60d3      	str	r3, [r2, #12]
    if(NumberOfBlocks > 1U)
 8006af8:	2f01      	cmp	r7, #1
 8006afa:	d912      	bls.n	8006b22 <HAL_SD_WriteBlocks+0xae>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006afc:	2320      	movs	r3, #32
 8006afe:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006b00:	4631      	mov	r1, r6
 8006b02:	6820      	ldr	r0, [r4, #0]
 8006b04:	f002 ff5c 	bl	80099c0 <SDMMC_CmdWriteMultiBlock>
 8006b08:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b0a:	f1ba 0f00 	cmp.w	sl, #0
 8006b0e:	d110      	bne.n	8006b32 <HAL_SD_WriteBlocks+0xbe>
    dataremaining = config.DataLength;
 8006b10:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006b14:	e024      	b.n	8006b60 <HAL_SD_WriteBlocks+0xec>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b1c:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8006b1e:	2001      	movs	r0, #1
 8006b20:	e7bd      	b.n	8006a9e <HAL_SD_WriteBlocks+0x2a>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006b22:	2310      	movs	r3, #16
 8006b24:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006b26:	4631      	mov	r1, r6
 8006b28:	6820      	ldr	r0, [r4, #0]
 8006b2a:	f002 ff30 	bl	800998e <SDMMC_CmdWriteSingleBlock>
 8006b2e:	4682      	mov	sl, r0
 8006b30:	e7eb      	b.n	8006b0a <HAL_SD_WriteBlocks+0x96>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	4a4e      	ldr	r2, [pc, #312]	; (8006c70 <HAL_SD_WriteBlocks+0x1fc>)
 8006b36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006b38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b3a:	ea43 030a 	orr.w	r3, r3, sl
 8006b3e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b40:	2001      	movs	r0, #1
 8006b42:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b46:	2300      	movs	r3, #0
 8006b48:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006b4a:	e7a8      	b.n	8006a9e <HAL_SD_WriteBlocks+0x2a>
        dataremaining -= 32U;
 8006b4c:	f1a9 0920 	sub.w	r9, r9, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006b50:	f7f9 fdf6 	bl	8000740 <HAL_GetTick>
 8006b54:	eba0 0008 	sub.w	r0, r0, r8
 8006b58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b5a:	4298      	cmp	r0, r3
 8006b5c:	d222      	bcs.n	8006ba4 <HAL_SD_WriteBlocks+0x130>
 8006b5e:	b30b      	cbz	r3, 8006ba4 <HAL_SD_WriteBlocks+0x130>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b64:	f412 7f8d 	tst.w	r2, #282	; 0x11a
 8006b68:	d12a      	bne.n	8006bc0 <HAL_SD_WriteBlocks+0x14c>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006b70:	d0ee      	beq.n	8006b50 <HAL_SD_WriteBlocks+0xdc>
 8006b72:	f1b9 0f1f 	cmp.w	r9, #31
 8006b76:	d9eb      	bls.n	8006b50 <HAL_SD_WriteBlocks+0xdc>
        for(count = 0U; count < 8U; count++)
 8006b78:	4656      	mov	r6, sl
 8006b7a:	2e07      	cmp	r6, #7
 8006b7c:	d8e6      	bhi.n	8006b4c <HAL_SD_WriteBlocks+0xd8>
          data = (uint32_t)(*tempbuff);
 8006b7e:	782b      	ldrb	r3, [r5, #0]
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006b80:	786a      	ldrb	r2, [r5, #1]
 8006b82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006b86:	78aa      	ldrb	r2, [r5, #2]
 8006b88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006b8c:	78ea      	ldrb	r2, [r5, #3]
 8006b8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006b92:	a908      	add	r1, sp, #32
 8006b94:	f841 3d1c 	str.w	r3, [r1, #-28]!
          tempbuff++;
 8006b98:	3504      	adds	r5, #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006b9a:	6820      	ldr	r0, [r4, #0]
 8006b9c:	f002 fd6d 	bl	800967a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006ba0:	3601      	adds	r6, #1
 8006ba2:	e7ea      	b.n	8006b7a <HAL_SD_WriteBlocks+0x106>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	4a32      	ldr	r2, [pc, #200]	; (8006c70 <HAL_SD_WriteBlocks+0x1fc>)
 8006ba8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006baa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006bac:	ea43 030a 	orr.w	r3, r3, sl
 8006bb0:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8006bbc:	2003      	movs	r0, #3
 8006bbe:	e76e      	b.n	8006a9e <HAL_SD_WriteBlocks+0x2a>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bc6:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006bc8:	6820      	ldr	r0, [r4, #0]
 8006bca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006bcc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006bd0:	d004      	beq.n	8006bdc <HAL_SD_WriteBlocks+0x168>
 8006bd2:	2f01      	cmp	r7, #1
 8006bd4:	d902      	bls.n	8006bdc <HAL_SD_WriteBlocks+0x168>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006bd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	d118      	bne.n	8006c0e <HAL_SD_WriteBlocks+0x19a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be0:	f012 0f08 	tst.w	r2, #8
 8006be4:	d124      	bne.n	8006c30 <HAL_SD_WriteBlocks+0x1bc>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be8:	f012 0f02 	tst.w	r2, #2
 8006bec:	d12c      	bne.n	8006c48 <HAL_SD_WriteBlocks+0x1d4>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bf0:	f012 0f10 	tst.w	r2, #16
 8006bf4:	d034      	beq.n	8006c60 <HAL_SD_WriteBlocks+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bf6:	4a1e      	ldr	r2, [pc, #120]	; (8006c70 <HAL_SD_WriteBlocks+0x1fc>)
 8006bf8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006bfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006bfc:	f043 0310 	orr.w	r3, r3, #16
 8006c00:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c02:	2001      	movs	r0, #1
 8006c04:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006c0c:	e747      	b.n	8006a9e <HAL_SD_WriteBlocks+0x2a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006c0e:	f002 fef1 	bl	80099f4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006c12:	4603      	mov	r3, r0
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d0e1      	beq.n	8006bdc <HAL_SD_WriteBlocks+0x168>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c18:	6822      	ldr	r2, [r4, #0]
 8006c1a:	4915      	ldr	r1, [pc, #84]	; (8006c70 <HAL_SD_WriteBlocks+0x1fc>)
 8006c1c:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006c1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006c20:	4313      	orrs	r3, r2
 8006c22:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006c24:	2001      	movs	r0, #1
 8006c26:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8006c2e:	e736      	b.n	8006a9e <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c30:	4a0f      	ldr	r2, [pc, #60]	; (8006c70 <HAL_SD_WriteBlocks+0x1fc>)
 8006c32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006c34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c36:	f043 0308 	orr.w	r3, r3, #8
 8006c3a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c3c:	2001      	movs	r0, #1
 8006c3e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c42:	2300      	movs	r3, #0
 8006c44:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006c46:	e72a      	b.n	8006a9e <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c48:	4a09      	ldr	r2, [pc, #36]	; (8006c70 <HAL_SD_WriteBlocks+0x1fc>)
 8006c4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c4e:	f043 0302 	orr.w	r3, r3, #2
 8006c52:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c54:	2001      	movs	r0, #1
 8006c56:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006c5e:	e71e      	b.n	8006a9e <HAL_SD_WriteBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c60:	4a04      	ldr	r2, [pc, #16]	; (8006c74 <HAL_SD_WriteBlocks+0x200>)
 8006c62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006c64:	2301      	movs	r3, #1
 8006c66:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	e717      	b.n	8006a9e <HAL_SD_WriteBlocks+0x2a>
 8006c6e:	bf00      	nop
 8006c70:	1fe00fff 	.word	0x1fe00fff
 8006c74:	18000f3a 	.word	0x18000f3a

08006c78 <HAL_SD_ErrorCallback>:
}
 8006c78:	4770      	bx	lr

08006c7a <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 8006c7a:	4770      	bx	lr

08006c7c <SD_PowerON>:
{
 8006c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	9301      	str	r3, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c86:	f7f9 fd5b 	bl	8000740 <HAL_GetTick>
 8006c8a:	4607      	mov	r7, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006c8c:	6820      	ldr	r0, [r4, #0]
 8006c8e:	f002 fef6 	bl	8009a7e <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c92:	4606      	mov	r6, r0
 8006c94:	b110      	cbz	r0, 8006c9c <SD_PowerON+0x20>
}
 8006c96:	4630      	mov	r0, r6
 8006c98:	b003      	add	sp, #12
 8006c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006c9c:	6820      	ldr	r0, [r4, #0]
 8006c9e:	f002 ff01 	bl	8009aa4 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ca2:	b938      	cbnz	r0, 8006cb4 <SD_PowerON+0x38>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	6423      	str	r3, [r4, #64]	; 0x40
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006ca8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d00b      	beq.n	8006cc6 <SD_PowerON+0x4a>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006cae:	4635      	mov	r5, r6
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	e014      	b.n	8006cde <SD_PowerON+0x62>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006cb8:	6820      	ldr	r0, [r4, #0]
 8006cba:	f002 fee0 	bl	8009a7e <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	d0f2      	beq.n	8006ca8 <SD_PowerON+0x2c>
      return errorstate;
 8006cc2:	4606      	mov	r6, r0
 8006cc4:	e7e7      	b.n	8006c96 <SD_PowerON+0x1a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	6820      	ldr	r0, [r4, #0]
 8006cca:	f002 ff03 	bl	8009ad4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d0ed      	beq.n	8006cae <SD_PowerON+0x32>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006cd2:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8006cd6:	e7de      	b.n	8006c96 <SD_PowerON+0x1a>
    count++;
 8006cd8:	9b01      	ldr	r3, [sp, #4]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006cde:	9a01      	ldr	r2, [sp, #4]
 8006ce0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d815      	bhi.n	8006d14 <SD_PowerON+0x98>
 8006ce8:	b9a5      	cbnz	r5, 8006d14 <SD_PowerON+0x98>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006cea:	2100      	movs	r1, #0
 8006cec:	6820      	ldr	r0, [r4, #0]
 8006cee:	f002 fef1 	bl	8009ad4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d167      	bne.n	8006dc6 <SD_PowerON+0x14a>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006cf6:	493b      	ldr	r1, [pc, #236]	; (8006de4 <SD_PowerON+0x168>)
 8006cf8:	6820      	ldr	r0, [r4, #0]
 8006cfa:	f002 ff04 	bl	8009b06 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cfe:	4605      	mov	r5, r0
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d162      	bne.n	8006dca <SD_PowerON+0x14e>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d04:	2100      	movs	r1, #0
 8006d06:	6820      	ldr	r0, [r4, #0]
 8006d08:	f002 fcdb 	bl	80096c2 <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006d0c:	0fc3      	lsrs	r3, r0, #31
 8006d0e:	d0e3      	beq.n	8006cd8 <SD_PowerON+0x5c>
 8006d10:	461d      	mov	r5, r3
 8006d12:	e7e1      	b.n	8006cd8 <SD_PowerON+0x5c>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006d14:	9a01      	ldr	r2, [sp, #4]
 8006d16:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d858      	bhi.n	8006dd0 <SD_PowerON+0x154>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006d1e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d22:	d0b8      	beq.n	8006c96 <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006d24:	2301      	movs	r3, #1
 8006d26:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006d28:	69a3      	ldr	r3, [r4, #24]
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d1b3      	bne.n	8006c96 <SD_PowerON+0x1a>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006d2e:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8006d32:	d0b0      	beq.n	8006c96 <SD_PowerON+0x1a>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d38:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8006d3a:	6822      	ldr	r2, [r4, #0]
 8006d3c:	6813      	ldr	r3, [r2, #0]
 8006d3e:	f043 0308 	orr.w	r3, r3, #8
 8006d42:	6013      	str	r3, [r2, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006d44:	6820      	ldr	r0, [r4, #0]
 8006d46:	f002 ff9d 	bl	8009c84 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d1a2      	bne.n	8006c96 <SD_PowerON+0x1a>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d54:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 8006d58:	d108      	bne.n	8006d6c <SD_PowerON+0xf0>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006d5a:	f7f9 fcf1 	bl	8000740 <HAL_GetTick>
 8006d5e:	1bc0      	subs	r0, r0, r7
 8006d60:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006d64:	d1f4      	bne.n	8006d50 <SD_PowerON+0xd4>
            return HAL_SD_ERROR_TIMEOUT;
 8006d66:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006d6a:	e794      	b.n	8006c96 <SD_PowerON+0x1a>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006d6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006d70:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d76:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006d7a:	d02c      	beq.n	8006dd6 <SD_PowerON+0x15a>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8006d7c:	2001      	movs	r0, #1
 8006d7e:	f7ff ff7c 	bl	8006c7a <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006d82:	6822      	ldr	r2, [r4, #0]
 8006d84:	6813      	ldr	r3, [r2, #0]
 8006d86:	f043 0304 	orr.w	r3, r3, #4
 8006d8a:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d90:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006d94:	d108      	bne.n	8006da8 <SD_PowerON+0x12c>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006d96:	f7f9 fcd3 	bl	8000740 <HAL_GetTick>
 8006d9a:	1bc0      	subs	r0, r0, r7
 8006d9c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006da0:	d1f4      	bne.n	8006d8c <SD_PowerON+0x110>
              return HAL_SD_ERROR_TIMEOUT;
 8006da2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006da6:	e776      	b.n	8006c96 <SD_PowerON+0x1a>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8006da8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dac:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db2:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8006db6:	d111      	bne.n	8006ddc <SD_PowerON+0x160>
          hsd->Instance->POWER = 0x13U;
 8006db8:	2213      	movs	r2, #19
 8006dba:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8006dbc:	6823      	ldr	r3, [r4, #0]
 8006dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38
 8006dc4:	e767      	b.n	8006c96 <SD_PowerON+0x1a>
      return errorstate;
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	e765      	b.n	8006c96 <SD_PowerON+0x1a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dca:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8006dce:	e762      	b.n	8006c96 <SD_PowerON+0x1a>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006dd0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8006dd4:	e75f      	b.n	8006c96 <SD_PowerON+0x1a>
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006dd6:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8006dda:	e75c      	b.n	8006c96 <SD_PowerON+0x1a>
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006ddc:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8006de0:	e759      	b.n	8006c96 <SD_PowerON+0x1a>
 8006de2:	bf00      	nop
 8006de4:	c1100000 	.word	0xc1100000

08006de8 <HAL_SD_GetCardCSD>:
{
 8006de8:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006dea:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006dec:	0f9b      	lsrs	r3, r3, #30
 8006dee:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006df0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006df2:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8006df6:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006df8:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
 8006dfc:	f003 0303 	and.w	r3, r3, #3
 8006e00:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006e02:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 8006e06:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006e08:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8006e0c:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006e0e:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8006e12:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006e14:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006e16:	0d1b      	lsrs	r3, r3, #20
 8006e18:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006e1a:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006e24:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006e26:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8006e2a:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006e2c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006e2e:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8006e32:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006e34:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006e36:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8006e3a:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006e3c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006e3e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e42:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006e44:	2300      	movs	r3, #0
 8006e46:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8006e48:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f040 8088 	bne.w	8006f60 <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006e50:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006e52:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006e56:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 8006e5a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8006e5c:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8006e60:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006e62:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006e64:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 8006e68:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006e6a:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8006e6e:	f003 0307 	and.w	r3, r3, #7
 8006e72:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006e74:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006e76:	f3c3 5342 	ubfx	r3, r3, #21, #3
 8006e7a:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006e7c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006e7e:	f3c3 4382 	ubfx	r3, r3, #18, #3
 8006e82:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006e84:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006e86:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8006e8a:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006e8c:	690b      	ldr	r3, [r1, #16]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006e92:	7e0a      	ldrb	r2, [r1, #24]
 8006e94:	f002 0207 	and.w	r2, r2, #7
 8006e98:	3202      	adds	r2, #2
 8006e9a:	fa03 f202 	lsl.w	r2, r3, r2
 8006e9e:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006ea0:	7a0b      	ldrb	r3, [r1, #8]
 8006ea2:	f003 040f 	and.w	r4, r3, #15
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	40a3      	lsls	r3, r4
 8006eaa:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006eac:	0a5b      	lsrs	r3, r3, #9
 8006eae:	fb03 f302 	mul.w	r3, r3, r2
 8006eb2:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eb8:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006eba:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006ebc:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8006ec0:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006ec2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006ec4:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8006ec8:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006eca:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed0:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006ed2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006ed4:	0fdb      	lsrs	r3, r3, #31
 8006ed6:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006ed8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006eda:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8006ede:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006ee0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006ee2:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8006ee6:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006ee8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006eea:	f3c3 5383 	ubfx	r3, r3, #22, #4
 8006eee:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006ef0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006ef2:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8006ef6:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8006efa:	2300      	movs	r3, #0
 8006efc:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006f00:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8006f04:	f002 0201 	and.w	r2, r2, #1
 8006f08:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006f0c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006f0e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8006f12:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006f16:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006f18:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8006f1c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006f20:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006f22:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8006f26:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006f2a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006f2c:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8006f30:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006f34:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006f36:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8006f3a:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006f3e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006f40:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8006f44:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006f48:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006f4a:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8006f4e:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8006f52:	2201      	movs	r2, #1
 8006f54:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 8006f58:	4618      	mov	r0, r3
}
 8006f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f5e:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d00b      	beq.n	8006f7c <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f64:	6803      	ldr	r3, [r0, #0]
 8006f66:	4a0e      	ldr	r2, [pc, #56]	; (8006fa0 <HAL_SD_GetCardCSD+0x1b8>)
 8006f68:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f70:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006f72:	2301      	movs	r3, #1
 8006f74:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8006f78:	4618      	mov	r0, r3
 8006f7a:	e7ee      	b.n	8006f5a <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006f7c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006f7e:	041b      	lsls	r3, r3, #16
 8006f80:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006f84:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006f8c:	690b      	ldr	r3, [r1, #16]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	029b      	lsls	r3, r3, #10
 8006f92:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006f94:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f9a:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006f9c:	6583      	str	r3, [r0, #88]	; 0x58
 8006f9e:	e78c      	b.n	8006eba <HAL_SD_GetCardCSD+0xd2>
 8006fa0:	1fe00fff 	.word	0x1fe00fff

08006fa4 <SD_InitCard>:
{
 8006fa4:	b510      	push	{r4, lr}
 8006fa6:	b08c      	sub	sp, #48	; 0x30
 8006fa8:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8006faa:	2301      	movs	r3, #1
 8006fac:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006fb0:	6800      	ldr	r0, [r0, #0]
 8006fb2:	f002 fb6d 	bl	8009690 <SDMMC_GetPowerState>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d05c      	beq.n	8007074 <SD_InitCard+0xd0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d136      	bne.n	800702e <SD_InitCard+0x8a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d14d      	bne.n	8007062 <SD_InitCard+0xbe>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006fc8:	2b03      	cmp	r3, #3
 8006fca:	d01d      	beq.n	8007008 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8006fcc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8006fd0:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fd2:	0409      	lsls	r1, r1, #16
 8006fd4:	6820      	ldr	r0, [r4, #0]
 8006fd6:	f002 fdf4 	bl	8009bc2 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d14b      	bne.n	8007078 <SD_InitCard+0xd4>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	6820      	ldr	r0, [r4, #0]
 8006fe4:	f002 fb6d 	bl	80096c2 <SDMMC_GetResponse>
 8006fe8:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006fea:	2104      	movs	r1, #4
 8006fec:	6820      	ldr	r0, [r4, #0]
 8006fee:	f002 fb68 	bl	80096c2 <SDMMC_GetResponse>
 8006ff2:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006ff4:	2108      	movs	r1, #8
 8006ff6:	6820      	ldr	r0, [r4, #0]
 8006ff8:	f002 fb63 	bl	80096c2 <SDMMC_GetResponse>
 8006ffc:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006ffe:	210c      	movs	r1, #12
 8007000:	6820      	ldr	r0, [r4, #0]
 8007002:	f002 fb5e 	bl	80096c2 <SDMMC_GetResponse>
 8007006:	66e0      	str	r0, [r4, #108]	; 0x6c
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007008:	2104      	movs	r1, #4
 800700a:	6820      	ldr	r0, [r4, #0]
 800700c:	f002 fb59 	bl	80096c2 <SDMMC_GetResponse>
 8007010:	0d00      	lsrs	r0, r0, #20
 8007012:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007014:	a901      	add	r1, sp, #4
 8007016:	4620      	mov	r0, r4
 8007018:	f7ff fee6 	bl	8006de8 <HAL_SD_GetCardCSD>
 800701c:	bb78      	cbnz	r0, 800707e <SD_InitCard+0xda>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800701e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007020:	0412      	lsls	r2, r2, #16
 8007022:	2300      	movs	r3, #0
 8007024:	6820      	ldr	r0, [r4, #0]
 8007026:	f002 fd11 	bl	8009a4c <SDMMC_CmdSelDesel>
 800702a:	4603      	mov	r3, r0
 800702c:	e024      	b.n	8007078 <SD_InitCard+0xd4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800702e:	6820      	ldr	r0, [r4, #0]
 8007030:	f002 fdb1 	bl	8009b96 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007034:	4603      	mov	r3, r0
 8007036:	b9f8      	cbnz	r0, 8007078 <SD_InitCard+0xd4>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007038:	2100      	movs	r1, #0
 800703a:	6820      	ldr	r0, [r4, #0]
 800703c:	f002 fb41 	bl	80096c2 <SDMMC_GetResponse>
 8007040:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007042:	2104      	movs	r1, #4
 8007044:	6820      	ldr	r0, [r4, #0]
 8007046:	f002 fb3c 	bl	80096c2 <SDMMC_GetResponse>
 800704a:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800704c:	2108      	movs	r1, #8
 800704e:	6820      	ldr	r0, [r4, #0]
 8007050:	f002 fb37 	bl	80096c2 <SDMMC_GetResponse>
 8007054:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007056:	210c      	movs	r1, #12
 8007058:	6820      	ldr	r0, [r4, #0]
 800705a:	f002 fb32 	bl	80096c2 <SDMMC_GetResponse>
 800705e:	67e0      	str	r0, [r4, #124]	; 0x7c
 8007060:	e7ae      	b.n	8006fc0 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007062:	f10d 0102 	add.w	r1, sp, #2
 8007066:	6820      	ldr	r0, [r4, #0]
 8007068:	f002 fdc1 	bl	8009bee <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800706c:	4603      	mov	r3, r0
 800706e:	2800      	cmp	r0, #0
 8007070:	d0a9      	beq.n	8006fc6 <SD_InitCard+0x22>
 8007072:	e001      	b.n	8007078 <SD_InitCard+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007074:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
}
 8007078:	4618      	mov	r0, r3
 800707a:	b00c      	add	sp, #48	; 0x30
 800707c:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800707e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007082:	e7f9      	b.n	8007078 <SD_InitCard+0xd4>

08007084 <HAL_SD_InitCard>:
{
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	b08a      	sub	sp, #40	; 0x28
 8007088:	4605      	mov	r5, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800708a:	2300      	movs	r3, #0
 800708c:	9304      	str	r3, [sp, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800708e:	9305      	str	r3, [sp, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007090:	9306      	str	r3, [sp, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007092:	9307      	str	r3, [sp, #28]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007094:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007098:	f7fe fb18 	bl	80056cc <HAL_RCCEx_GetPeriphCLKFreq>
 800709c:	4606      	mov	r6, r0
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800709e:	0a04      	lsrs	r4, r0, #8
 80070a0:	4b2a      	ldr	r3, [pc, #168]	; (800714c <HAL_SD_InitCard+0xc8>)
 80070a2:	fba3 3404 	umull	r3, r4, r3, r4
 80070a6:	0924      	lsrs	r4, r4, #4
 80070a8:	9408      	str	r4, [sp, #32]
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80070aa:	69ab      	ldr	r3, [r5, #24]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d023      	beq.n	80070f8 <HAL_SD_InitCard+0x74>
  (void)SDMMC_Init(hsd->Instance, Init);
 80070b0:	ab0a      	add	r3, sp, #40	; 0x28
 80070b2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80070b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80070ba:	ab04      	add	r3, sp, #16
 80070bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070be:	6828      	ldr	r0, [r5, #0]
 80070c0:	f002 fabe 	bl	8009640 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80070c4:	6828      	ldr	r0, [r5, #0]
 80070c6:	f002 fadd 	bl	8009684 <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80070ca:	0064      	lsls	r4, r4, #1
 80070cc:	fbb6 f4f4 	udiv	r4, r6, r4
  if(sdmmc_clk != 0U)
 80070d0:	b1c4      	cbz	r4, 8007104 <HAL_SD_InitCard+0x80>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80070d2:	4e1f      	ldr	r6, [pc, #124]	; (8007150 <HAL_SD_InitCard+0xcc>)
 80070d4:	fbb6 f4f4 	udiv	r4, r6, r4
 80070d8:	1c60      	adds	r0, r4, #1
 80070da:	f7f9 fb37 	bl	800074c <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 80070de:	4628      	mov	r0, r5
 80070e0:	f7ff fdcc 	bl	8006c7c <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 80070e4:	4602      	mov	r2, r0
 80070e6:	b188      	cbz	r0, 800710c <HAL_SD_InitCard+0x88>
    hsd->State = HAL_SD_STATE_READY;
 80070e8:	2001      	movs	r0, #1
 80070ea:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80070ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80070f0:	4313      	orrs	r3, r2
 80070f2:	63ab      	str	r3, [r5, #56]	; 0x38
}
 80070f4:	b00a      	add	sp, #40	; 0x28
 80070f6:	bd70      	pop	{r4, r5, r6, pc}
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80070f8:	682a      	ldr	r2, [r5, #0]
 80070fa:	6813      	ldr	r3, [r2, #0]
 80070fc:	f043 0310 	orr.w	r3, r3, #16
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	e7d5      	b.n	80070b0 <HAL_SD_InitCard+0x2c>
    HAL_Delay(2U);
 8007104:	2002      	movs	r0, #2
 8007106:	f7f9 fb21 	bl	800074c <HAL_Delay>
 800710a:	e7e8      	b.n	80070de <HAL_SD_InitCard+0x5a>
  errorstate = SD_InitCard(hsd);
 800710c:	4628      	mov	r0, r5
 800710e:	f7ff ff49 	bl	8006fa4 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007112:	4602      	mov	r2, r0
 8007114:	b130      	cbz	r0, 8007124 <HAL_SD_InitCard+0xa0>
    hsd->State = HAL_SD_STATE_READY;
 8007116:	2001      	movs	r0, #1
 8007118:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800711c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800711e:	4313      	orrs	r3, r2
 8007120:	63ab      	str	r3, [r5, #56]	; 0x38
    return HAL_ERROR;
 8007122:	e7e7      	b.n	80070f4 <HAL_SD_InitCard+0x70>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007128:	6828      	ldr	r0, [r5, #0]
 800712a:	f002 fbe5 	bl	80098f8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800712e:	4603      	mov	r3, r0
 8007130:	b148      	cbz	r0, 8007146 <HAL_SD_InitCard+0xc2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007132:	682a      	ldr	r2, [r5, #0]
 8007134:	4907      	ldr	r1, [pc, #28]	; (8007154 <HAL_SD_InitCard+0xd0>)
 8007136:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007138:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800713a:	4318      	orrs	r0, r3
 800713c:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800713e:	2001      	movs	r0, #1
 8007140:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    return HAL_ERROR;
 8007144:	e7d6      	b.n	80070f4 <HAL_SD_InitCard+0x70>
  return HAL_OK;
 8007146:	2000      	movs	r0, #0
 8007148:	e7d4      	b.n	80070f4 <HAL_SD_InitCard+0x70>
 800714a:	bf00      	nop
 800714c:	014f8b59 	.word	0x014f8b59
 8007150:	00012110 	.word	0x00012110
 8007154:	1fe00fff 	.word	0x1fe00fff

08007158 <HAL_SD_GetCardStatus>:
{
 8007158:	b530      	push	{r4, r5, lr}
 800715a:	b091      	sub	sp, #68	; 0x44
 800715c:	4605      	mov	r5, r0
 800715e:	460c      	mov	r4, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007160:	4669      	mov	r1, sp
 8007162:	f7ff fa0b 	bl	800657c <SD_SendSDStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007166:	b1c8      	cbz	r0, 800719c <HAL_SD_GetCardStatus+0x44>
 8007168:	4603      	mov	r3, r0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800716a:	682a      	ldr	r2, [r5, #0]
 800716c:	4929      	ldr	r1, [pc, #164]	; (8007214 <HAL_SD_GetCardStatus+0xbc>)
 800716e:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007170:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8007172:	4318      	orrs	r0, r3
 8007174:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007176:	2401      	movs	r4, #1
 8007178:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800717c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007180:	6828      	ldr	r0, [r5, #0]
 8007182:	f002 fbb9 	bl	80098f8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007186:	b130      	cbz	r0, 8007196 <HAL_SD_GetCardStatus+0x3e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007188:	682a      	ldr	r2, [r5, #0]
 800718a:	4922      	ldr	r1, [pc, #136]	; (8007214 <HAL_SD_GetCardStatus+0xbc>)
 800718c:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800718e:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007190:	2401      	movs	r4, #1
 8007192:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
}
 8007196:	4620      	mov	r0, r4
 8007198:	b011      	add	sp, #68	; 0x44
 800719a:	bd30      	pop	{r4, r5, pc}
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800719c:	9a00      	ldr	r2, [sp, #0]
 800719e:	f3c2 1381 	ubfx	r3, r2, #6, #2
 80071a2:	7023      	strb	r3, [r4, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80071a4:	f3c2 1340 	ubfx	r3, r2, #5, #1
 80071a8:	7063      	strb	r3, [r4, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80071aa:	0a13      	lsrs	r3, r2, #8
 80071ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80071b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	8063      	strh	r3, [r4, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80071b8:	9a01      	ldr	r2, [sp, #4]
 80071ba:	0213      	lsls	r3, r2, #8
 80071bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80071c4:	0a11      	lsrs	r1, r2, #8
 80071c6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80071ca:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80071cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80071d0:	6063      	str	r3, [r4, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80071d2:	9b02      	ldr	r3, [sp, #8]
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	7222      	strb	r2, [r4, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80071d8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80071dc:	7262      	strb	r2, [r4, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80071de:	f3c3 5203 	ubfx	r2, r3, #20, #4
 80071e2:	72a2      	strb	r2, [r4, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80071e4:	0c1b      	lsrs	r3, r3, #16
 80071e6:	9a03      	ldr	r2, [sp, #12]
 80071e8:	b2d1      	uxtb	r1, r2
 80071ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80071ee:	430b      	orrs	r3, r1
 80071f0:	81a3      	strh	r3, [r4, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80071f2:	f3c2 2385 	ubfx	r3, r2, #10, #6
 80071f6:	73a3      	strb	r3, [r4, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80071f8:	f3c2 2301 	ubfx	r3, r2, #8, #2
 80071fc:	73e3      	strb	r3, [r4, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80071fe:	f3c2 1303 	ubfx	r3, r2, #4, #4
 8007202:	7423      	strb	r3, [r4, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007204:	f002 020f 	and.w	r2, r2, #15
 8007208:	7462      	strb	r2, [r4, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800720a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800720e:	74a3      	strb	r3, [r4, #18]
  HAL_StatusTypeDef status = HAL_OK;
 8007210:	2400      	movs	r4, #0
 8007212:	e7b3      	b.n	800717c <HAL_SD_GetCardStatus+0x24>
 8007214:	1fe00fff 	.word	0x1fe00fff

08007218 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007218:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800721a:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800721c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800721e:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007220:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007222:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007224:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007226:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007228:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800722a:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800722c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800722e:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007230:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007232:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007234:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007236:	61cb      	str	r3, [r1, #28]
}
 8007238:	2000      	movs	r0, #0
 800723a:	4770      	bx	lr

0800723c <HAL_SD_ConfigWideBusOperation>:
{
 800723c:	b530      	push	{r4, r5, lr}
 800723e:	b08b      	sub	sp, #44	; 0x2c
 8007240:	4604      	mov	r4, r0
 8007242:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8007244:	2303      	movs	r3, #3
 8007246:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800724a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800724c:	2b03      	cmp	r3, #3
 800724e:	d01c      	beq.n	800728a <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007250:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8007254:	d008      	beq.n	8007268 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007256:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800725a:	d00a      	beq.n	8007272 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800725c:	b179      	cbz	r1, 800727e <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800725e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007260:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007264:	6383      	str	r3, [r0, #56]	; 0x38
 8007266:	e014      	b.n	8007292 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007268:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800726a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800726e:	6383      	str	r3, [r0, #56]	; 0x38
 8007270:	e00f      	b.n	8007292 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8007272:	f7ff fa95 	bl	80067a0 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8007276:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007278:	4318      	orrs	r0, r3
 800727a:	63a0      	str	r0, [r4, #56]	; 0x38
 800727c:	e009      	b.n	8007292 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 800727e:	f7ff faba 	bl	80067f6 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8007282:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007284:	4318      	orrs	r0, r3
 8007286:	63a0      	str	r0, [r4, #56]	; 0x38
 8007288:	e003      	b.n	8007292 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800728a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800728c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007290:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007292:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007294:	b1bb      	cbz	r3, 80072c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	4a1e      	ldr	r2, [pc, #120]	; (8007314 <HAL_SD_ConfigWideBusOperation+0xd8>)
 800729a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800729c:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800729e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072a2:	6820      	ldr	r0, [r4, #0]
 80072a4:	f002 fb28 	bl	80098f8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80072a8:	4603      	mov	r3, r0
 80072aa:	b130      	cbz	r0, 80072ba <HAL_SD_ConfigWideBusOperation+0x7e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072ac:	6822      	ldr	r2, [r4, #0]
 80072ae:	4919      	ldr	r1, [pc, #100]	; (8007314 <HAL_SD_ConfigWideBusOperation+0xd8>)
 80072b0:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80072b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80072b4:	4318      	orrs	r0, r3
 80072b6:	63a0      	str	r0, [r4, #56]	; 0x38
    status = HAL_ERROR;
 80072b8:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80072c0:	4628      	mov	r0, r5
 80072c2:	b00b      	add	sp, #44	; 0x2c
 80072c4:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80072c6:	6863      	ldr	r3, [r4, #4]
 80072c8:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80072ca:	68a3      	ldr	r3, [r4, #8]
 80072cc:	9305      	str	r3, [sp, #20]
    Init.BusWide             = WideMode;
 80072ce:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80072d0:	6923      	ldr	r3, [r4, #16]
 80072d2:	9307      	str	r3, [sp, #28]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80072d4:	6963      	ldr	r3, [r4, #20]
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d90c      	bls.n	80072f4 <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.ClockDiv = hsd->Init.ClockDiv;
 80072da:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80072dc:	ab0a      	add	r3, sp, #40	; 0x28
 80072de:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80072e2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80072e6:	ab04      	add	r3, sp, #16
 80072e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072ea:	6820      	ldr	r0, [r4, #0]
 80072ec:	f002 f9a8 	bl	8009640 <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 80072f0:	2500      	movs	r5, #0
 80072f2:	e7d4      	b.n	800729e <HAL_SD_ConfigWideBusOperation+0x62>
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80072f4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80072f6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80072fa:	d005      	beq.n	8007308 <HAL_SD_ConfigWideBusOperation+0xcc>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80072fc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007300:	d004      	beq.n	800730c <HAL_SD_ConfigWideBusOperation+0xd0>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8007302:	2304      	movs	r3, #4
 8007304:	9308      	str	r3, [sp, #32]
 8007306:	e7e9      	b.n	80072dc <HAL_SD_ConfigWideBusOperation+0xa0>
      Init.ClockDiv = hsd->Init.ClockDiv;
 8007308:	9308      	str	r3, [sp, #32]
 800730a:	e7e7      	b.n	80072dc <HAL_SD_ConfigWideBusOperation+0xa0>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800730c:	2302      	movs	r3, #2
 800730e:	9308      	str	r3, [sp, #32]
 8007310:	e7e4      	b.n	80072dc <HAL_SD_ConfigWideBusOperation+0xa0>
 8007312:	bf00      	nop
 8007314:	1fe00fff 	.word	0x1fe00fff

08007318 <HAL_SD_GetCardState>:
{
 8007318:	b510      	push	{r4, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 800731e:	a902      	add	r1, sp, #8
 8007320:	2300      	movs	r3, #0
 8007322:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 8007326:	f7ff fa91 	bl	800684c <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800732a:	b118      	cbz	r0, 8007334 <HAL_SD_GetCardState+0x1c>
 800732c:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 800732e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007330:	4318      	orrs	r0, r3
 8007332:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8007334:	9801      	ldr	r0, [sp, #4]
 8007336:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800733a:	b002      	add	sp, #8
 800733c:	bd10      	pop	{r4, pc}

0800733e <HAL_SD_Init>:
{
 800733e:	b570      	push	{r4, r5, r6, lr}
 8007340:	b086      	sub	sp, #24
  if(hsd == NULL)
 8007342:	2800      	cmp	r0, #0
 8007344:	d058      	beq.n	80073f8 <HAL_SD_Init+0xba>
 8007346:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8007348:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800734c:	b93b      	cbnz	r3, 800735e <HAL_SD_Init+0x20>
    hsd->Lock = HAL_UNLOCKED;
 800734e:	7703      	strb	r3, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8007350:	6983      	ldr	r3, [r0, #24]
 8007352:	b90b      	cbnz	r3, 8007358 <HAL_SD_Init+0x1a>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8007354:	2302      	movs	r3, #2
 8007356:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8007358:	4620      	mov	r0, r4
 800735a:	f005 fd33 	bl	800cdc4 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800735e:	2303      	movs	r3, #3
 8007360:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007364:	4620      	mov	r0, r4
 8007366:	f7ff fe8d 	bl	8007084 <HAL_SD_InitCard>
 800736a:	b118      	cbz	r0, 8007374 <HAL_SD_Init+0x36>
    return HAL_ERROR;
 800736c:	2501      	movs	r5, #1
}
 800736e:	4628      	mov	r0, r5
 8007370:	b006      	add	sp, #24
 8007372:	bd70      	pop	{r4, r5, r6, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007374:	a901      	add	r1, sp, #4
 8007376:	4620      	mov	r0, r4
 8007378:	f7ff feee 	bl	8007158 <HAL_SD_GetCardStatus>
 800737c:	2800      	cmp	r0, #0
 800737e:	d13d      	bne.n	80073fc <HAL_SD_Init+0xbe>
  speedgrade = CardStatus.UhsSpeedGrade;
 8007380:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8007384:	b2da      	uxtb	r2, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007386:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800738a:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800738c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800738e:	2901      	cmp	r1, #1
 8007390:	d00b      	beq.n	80073aa <HAL_SD_Init+0x6c>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007392:	2901      	cmp	r1, #1
 8007394:	d00f      	beq.n	80073b6 <HAL_SD_Init+0x78>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007396:	2300      	movs	r3, #0
 8007398:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800739a:	68e1      	ldr	r1, [r4, #12]
 800739c:	4620      	mov	r0, r4
 800739e:	f7ff ff4d 	bl	800723c <HAL_SD_ConfigWideBusOperation>
 80073a2:	4605      	mov	r5, r0
 80073a4:	b158      	cbz	r0, 80073be <HAL_SD_Init+0x80>
    return HAL_ERROR;
 80073a6:	2501      	movs	r5, #1
 80073a8:	e7e1      	b.n	800736e <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80073aa:	4313      	orrs	r3, r2
 80073ac:	d0f1      	beq.n	8007392 <HAL_SD_Init+0x54>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80073ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073b2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80073b4:	e7f1      	b.n	800739a <HAL_SD_Init+0x5c>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80073b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073ba:	65e3      	str	r3, [r4, #92]	; 0x5c
 80073bc:	e7ed      	b.n	800739a <HAL_SD_Init+0x5c>
  tickstart = HAL_GetTick();
 80073be:	f7f9 f9bf 	bl	8000740 <HAL_GetTick>
 80073c2:	4606      	mov	r6, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80073c4:	4620      	mov	r0, r4
 80073c6:	f7ff ffa7 	bl	8007318 <HAL_SD_GetCardState>
 80073ca:	2804      	cmp	r0, #4
 80073cc:	d00d      	beq.n	80073ea <HAL_SD_Init+0xac>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80073ce:	f7f9 f9b7 	bl	8000740 <HAL_GetTick>
 80073d2:	1b80      	subs	r0, r0, r6
 80073d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80073d8:	d1f4      	bne.n	80073c4 <HAL_SD_Init+0x86>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80073da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80073de:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80073e0:	2301      	movs	r3, #1
 80073e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 80073e6:	2503      	movs	r5, #3
 80073e8:	e7c1      	b.n	800736e <HAL_SD_Init+0x30>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80073ea:	2300      	movs	r3, #0
 80073ec:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80073ee:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80073f0:	2301      	movs	r3, #1
 80073f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80073f6:	e7ba      	b.n	800736e <HAL_SD_Init+0x30>
    return HAL_ERROR;
 80073f8:	2501      	movs	r5, #1
 80073fa:	e7b8      	b.n	800736e <HAL_SD_Init+0x30>
    return HAL_ERROR;
 80073fc:	2501      	movs	r5, #1
 80073fe:	e7b6      	b.n	800736e <HAL_SD_Init+0x30>

08007400 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007400:	4770      	bx	lr

08007402 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007402:	4770      	bx	lr

08007404 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007404:	4770      	bx	lr

08007406 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007406:	4770      	bx	lr

08007408 <HAL_SD_IRQHandler>:
{
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 800740c:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800740e:	6803      	ldr	r3, [r0, #0]
 8007410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007412:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8007416:	d002      	beq.n	800741e <HAL_SD_IRQHandler+0x16>
 8007418:	f015 0f08 	tst.w	r5, #8
 800741c:	d12a      	bne.n	8007474 <HAL_SD_IRQHandler+0x6c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800741e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007420:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007424:	d067      	beq.n	80074f6 <HAL_SD_IRQHandler+0xee>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800742a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800742c:	6822      	ldr	r2, [r4, #0]
 800742e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007430:	4b7e      	ldr	r3, [pc, #504]	; (800762c <HAL_SD_IRQHandler+0x224>)
 8007432:	400b      	ands	r3, r1
 8007434:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007436:	6822      	ldr	r2, [r4, #0]
 8007438:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800743a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800743e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007440:	6822      	ldr	r2, [r4, #0]
 8007442:	68d3      	ldr	r3, [r2, #12]
 8007444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007448:	60d3      	str	r3, [r2, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800744a:	f015 0f08 	tst.w	r5, #8
 800744e:	d025      	beq.n	800749c <HAL_SD_IRQHandler+0x94>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007450:	f015 0f22 	tst.w	r5, #34	; 0x22
 8007454:	d111      	bne.n	800747a <HAL_SD_IRQHandler+0x72>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	4a75      	ldr	r2, [pc, #468]	; (8007630 <HAL_SD_IRQHandler+0x228>)
 800745a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800745c:	2301      	movs	r3, #1
 800745e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007462:	2300      	movs	r3, #0
 8007464:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007466:	f015 0f03 	tst.w	r5, #3
 800746a:	d013      	beq.n	8007494 <HAL_SD_IRQHandler+0x8c>
        HAL_SD_RxCpltCallback(hsd);
 800746c:	4620      	mov	r0, r4
 800746e:	f004 fb7b 	bl	800bb68 <HAL_SD_RxCpltCallback>
 8007472:	e001      	b.n	8007478 <HAL_SD_IRQHandler+0x70>
    SD_Read_IT(hsd);
 8007474:	f7ff f83f 	bl	80064f6 <SD_Read_IT>
}
 8007478:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800747a:	6820      	ldr	r0, [r4, #0]
 800747c:	f002 faba 	bl	80099f4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8007480:	4603      	mov	r3, r0
 8007482:	2800      	cmp	r0, #0
 8007484:	d0e7      	beq.n	8007456 <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 8007486:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007488:	4313      	orrs	r3, r2
 800748a:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800748c:	4620      	mov	r0, r4
 800748e:	f7ff fbf3 	bl	8006c78 <HAL_SD_ErrorCallback>
 8007492:	e7e0      	b.n	8007456 <HAL_SD_IRQHandler+0x4e>
        HAL_SD_TxCpltCallback(hsd);
 8007494:	4620      	mov	r0, r4
 8007496:	f004 fb62 	bl	800bb5e <HAL_SD_TxCpltCallback>
 800749a:	e7ed      	b.n	8007478 <HAL_SD_IRQHandler+0x70>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800749c:	f015 0f80 	tst.w	r5, #128	; 0x80
 80074a0:	d0ea      	beq.n	8007478 <HAL_SD_IRQHandler+0x70>
      hsd->Instance->DLEN = 0;
 80074a2:	6822      	ldr	r2, [r4, #0]
 80074a4:	2300      	movs	r3, #0
 80074a6:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80074a8:	6822      	ldr	r2, [r4, #0]
 80074aa:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80074ac:	6822      	ldr	r2, [r4, #0]
 80074ae:	6513      	str	r3, [r2, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80074b0:	f015 0f22 	tst.w	r5, #34	; 0x22
 80074b4:	d10e      	bne.n	80074d4 <HAL_SD_IRQHandler+0xcc>
      hsd->State = HAL_SD_STATE_READY;
 80074b6:	2301      	movs	r3, #1
 80074b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074bc:	2300      	movs	r3, #0
 80074be:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80074c0:	f015 0f30 	tst.w	r5, #48	; 0x30
 80074c4:	d113      	bne.n	80074ee <HAL_SD_IRQHandler+0xe6>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80074c6:	f015 0f03 	tst.w	r5, #3
 80074ca:	d0d5      	beq.n	8007478 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 80074cc:	4620      	mov	r0, r4
 80074ce:	f004 fb4b 	bl	800bb68 <HAL_SD_RxCpltCallback>
 80074d2:	e7d1      	b.n	8007478 <HAL_SD_IRQHandler+0x70>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80074d4:	6820      	ldr	r0, [r4, #0]
 80074d6:	f002 fa8d 	bl	80099f4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80074da:	4603      	mov	r3, r0
 80074dc:	2800      	cmp	r0, #0
 80074de:	d0ea      	beq.n	80074b6 <HAL_SD_IRQHandler+0xae>
          hsd->ErrorCode |= errorstate;
 80074e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80074e2:	4313      	orrs	r3, r2
 80074e4:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80074e6:	4620      	mov	r0, r4
 80074e8:	f7ff fbc6 	bl	8006c78 <HAL_SD_ErrorCallback>
 80074ec:	e7e3      	b.n	80074b6 <HAL_SD_IRQHandler+0xae>
        HAL_SD_TxCpltCallback(hsd);
 80074ee:	4620      	mov	r0, r4
 80074f0:	f004 fb35 	bl	800bb5e <HAL_SD_TxCpltCallback>
 80074f4:	e7e7      	b.n	80074c6 <HAL_SD_IRQHandler+0xbe>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80074f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074f8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80074fc:	d002      	beq.n	8007504 <HAL_SD_IRQHandler+0xfc>
 80074fe:	f015 0f08 	tst.w	r5, #8
 8007502:	d162      	bne.n	80075ca <HAL_SD_IRQHandler+0x1c2>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007506:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 800750a:	d06b      	beq.n	80075e4 <HAL_SD_IRQHandler+0x1dc>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800750c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800750e:	f012 0f02 	tst.w	r2, #2
 8007512:	d003      	beq.n	800751c <HAL_SD_IRQHandler+0x114>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007514:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007516:	f042 0202 	orr.w	r2, r2, #2
 800751a:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800751c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800751e:	f012 0f08 	tst.w	r2, #8
 8007522:	d003      	beq.n	800752c <HAL_SD_IRQHandler+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007524:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007526:	f042 0208 	orr.w	r2, r2, #8
 800752a:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800752c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800752e:	f012 0f20 	tst.w	r2, #32
 8007532:	d003      	beq.n	800753c <HAL_SD_IRQHandler+0x134>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007534:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007536:	f042 0220 	orr.w	r2, r2, #32
 800753a:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800753c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800753e:	f012 0f10 	tst.w	r2, #16
 8007542:	d003      	beq.n	800754c <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007544:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007546:	f042 0210 	orr.w	r2, r2, #16
 800754a:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800754c:	4a38      	ldr	r2, [pc, #224]	; (8007630 <HAL_SD_IRQHandler+0x228>)
 800754e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007550:	6822      	ldr	r2, [r4, #0]
 8007552:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007554:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8007558:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800755a:	6822      	ldr	r2, [r4, #0]
 800755c:	68d3      	ldr	r3, [r2, #12]
 800755e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007562:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007564:	6822      	ldr	r2, [r4, #0]
 8007566:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007568:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800756c:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800756e:	6822      	ldr	r2, [r4, #0]
 8007570:	68d3      	ldr	r3, [r2, #12]
 8007572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007576:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007578:	6820      	ldr	r0, [r4, #0]
 800757a:	f002 fa3b 	bl	80099f4 <SDMMC_CmdStopTransfer>
 800757e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007580:	4318      	orrs	r0, r3
 8007582:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007584:	6822      	ldr	r2, [r4, #0]
 8007586:	68d3      	ldr	r3, [r2, #12]
 8007588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800758c:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007594:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007596:	f015 0f08 	tst.w	r5, #8
 800759a:	d11a      	bne.n	80075d2 <HAL_SD_IRQHandler+0x1ca>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800759c:	f015 0f80 	tst.w	r5, #128	; 0x80
 80075a0:	f43f af6a 	beq.w	8007478 <HAL_SD_IRQHandler+0x70>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80075a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f43f af66 	beq.w	8007478 <HAL_SD_IRQHandler+0x70>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80075ac:	6822      	ldr	r2, [r4, #0]
 80075ae:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80075b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075b4:	63d3      	str	r3, [r2, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	2200      	movs	r2, #0
 80075ba:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80075bc:	2301      	movs	r3, #1
 80075be:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80075c2:	4620      	mov	r0, r4
 80075c4:	f7ff fb58 	bl	8006c78 <HAL_SD_ErrorCallback>
 80075c8:	e756      	b.n	8007478 <HAL_SD_IRQHandler+0x70>
    SD_Write_IT(hsd);
 80075ca:	4620      	mov	r0, r4
 80075cc:	f7fe ffb0 	bl	8006530 <SD_Write_IT>
 80075d0:	e752      	b.n	8007478 <HAL_SD_IRQHandler+0x70>
      hsd->State = HAL_SD_STATE_READY;
 80075d2:	2301      	movs	r3, #1
 80075d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075d8:	2300      	movs	r3, #0
 80075da:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80075dc:	4620      	mov	r0, r4
 80075de:	f7ff fb4b 	bl	8006c78 <HAL_SD_ErrorCallback>
 80075e2:	e749      	b.n	8007478 <HAL_SD_IRQHandler+0x70>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80075e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075e6:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80075ea:	f43f af45 	beq.w	8007478 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80075ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f2:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f8:	f013 0f04 	tst.w	r3, #4
 80075fc:	d10a      	bne.n	8007614 <HAL_SD_IRQHandler+0x20c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80075fe:	f015 0f20 	tst.w	r5, #32
 8007602:	d003      	beq.n	800760c <HAL_SD_IRQHandler+0x204>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8007604:	4620      	mov	r0, r4
 8007606:	f7ff fefe 	bl	8007406 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800760a:	e735      	b.n	8007478 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800760c:	4620      	mov	r0, r4
 800760e:	f7ff fef8 	bl	8007402 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 8007612:	e731      	b.n	8007478 <HAL_SD_IRQHandler+0x70>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007614:	f015 0f20 	tst.w	r5, #32
 8007618:	d103      	bne.n	8007622 <HAL_SD_IRQHandler+0x21a>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800761a:	4620      	mov	r0, r4
 800761c:	f7ff fef0 	bl	8007400 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8007620:	e72a      	b.n	8007478 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8007622:	4620      	mov	r0, r4
 8007624:	f7ff feee 	bl	8007404 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 8007628:	e726      	b.n	8007478 <HAL_SD_IRQHandler+0x70>
 800762a:	bf00      	nop
 800762c:	ffff3ec5 	.word	0xffff3ec5
 8007630:	18000f3a 	.word	0x18000f3a

08007634 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007634:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 8007636:	6802      	ldr	r2, [r0, #0]
 8007638:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800763a:	6991      	ldr	r1, [r2, #24]
 800763c:	f041 0108 	orr.w	r1, r1, #8
 8007640:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007642:	6801      	ldr	r1, [r0, #0]
 8007644:	698a      	ldr	r2, [r1, #24]
 8007646:	f042 0210 	orr.w	r2, r2, #16
 800764a:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800764c:	6801      	ldr	r1, [r0, #0]
 800764e:	680a      	ldr	r2, [r1, #0]
 8007650:	f022 0201 	bic.w	r2, r2, #1
 8007654:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007656:	6801      	ldr	r1, [r0, #0]
 8007658:	690c      	ldr	r4, [r1, #16]
 800765a:	4a29      	ldr	r2, [pc, #164]	; (8007700 <SPI_CloseTransfer+0xcc>)
 800765c:	4022      	ands	r2, r4
 800765e:	610a      	str	r2, [r1, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007660:	6801      	ldr	r1, [r0, #0]
 8007662:	688a      	ldr	r2, [r1, #8]
 8007664:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007668:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800766a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800766e:	b2d2      	uxtb	r2, r2
 8007670:	2a04      	cmp	r2, #4
 8007672:	d00d      	beq.n	8007690 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007674:	f013 0f20 	tst.w	r3, #32
 8007678:	d00a      	beq.n	8007690 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800767a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800767e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007682:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007686:	6801      	ldr	r1, [r0, #0]
 8007688:	698a      	ldr	r2, [r1, #24]
 800768a:	f042 0220 	orr.w	r2, r2, #32
 800768e:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007690:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8007694:	b2d2      	uxtb	r2, r2
 8007696:	2a03      	cmp	r2, #3
 8007698:	d00d      	beq.n	80076b6 <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800769a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800769e:	d00a      	beq.n	80076b6 <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80076a0:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80076a4:	f042 0204 	orr.w	r2, r2, #4
 80076a8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076ac:	6801      	ldr	r1, [r0, #0]
 80076ae:	698a      	ldr	r2, [r1, #24]
 80076b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076b4:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80076b6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80076ba:	d00a      	beq.n	80076d2 <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80076bc:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80076c0:	f042 0201 	orr.w	r2, r2, #1
 80076c4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80076c8:	6801      	ldr	r1, [r0, #0]
 80076ca:	698a      	ldr	r2, [r1, #24]
 80076cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076d0:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80076d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80076d6:	d00a      	beq.n	80076ee <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80076d8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80076dc:	f043 0308 	orr.w	r3, r3, #8
 80076e0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80076e4:	6802      	ldr	r2, [r0, #0]
 80076e6:	6993      	ldr	r3, [r2, #24]
 80076e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076ec:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80076f4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 80076f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	fffffc90 	.word	0xfffffc90

08007704 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007704:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8007706:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007708:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800770a:	3008      	adds	r0, #8
 800770c:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800770e:	fb03 0000 	mla	r0, r3, r0, r0
 8007712:	4770      	bx	lr

08007714 <SPI_WaitOnFlagUntilTimeout>:
{
 8007714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007718:	4607      	mov	r7, r0
 800771a:	460e      	mov	r6, r1
 800771c:	4615      	mov	r5, r2
 800771e:	4698      	mov	r8, r3
 8007720:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007722:	e000      	b.n	8007726 <SPI_WaitOnFlagUntilTimeout+0x12>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007724:	b1b4      	cbz	r4, 8007754 <SPI_WaitOnFlagUntilTimeout+0x40>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	ea36 0303 	bics.w	r3, r6, r3
 800772e:	bf0c      	ite	eq
 8007730:	2301      	moveq	r3, #1
 8007732:	2300      	movne	r3, #0
 8007734:	42ab      	cmp	r3, r5
 8007736:	d10a      	bne.n	800774e <SPI_WaitOnFlagUntilTimeout+0x3a>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007738:	f7f9 f802 	bl	8000740 <HAL_GetTick>
 800773c:	eba0 0008 	sub.w	r0, r0, r8
 8007740:	42a0      	cmp	r0, r4
 8007742:	d3ef      	bcc.n	8007724 <SPI_WaitOnFlagUntilTimeout+0x10>
 8007744:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007748:	d0ec      	beq.n	8007724 <SPI_WaitOnFlagUntilTimeout+0x10>
      return HAL_TIMEOUT;
 800774a:	2003      	movs	r0, #3
 800774c:	e000      	b.n	8007750 <SPI_WaitOnFlagUntilTimeout+0x3c>
  return HAL_OK;
 800774e:	2000      	movs	r0, #0
}
 8007750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_TIMEOUT;
 8007754:	2003      	movs	r0, #3
 8007756:	e7fb      	b.n	8007750 <SPI_WaitOnFlagUntilTimeout+0x3c>

08007758 <HAL_SPI_Init>:
  if (hspi == NULL)
 8007758:	2800      	cmp	r0, #0
 800775a:	f000 8097 	beq.w	800788c <HAL_SPI_Init+0x134>
{
 800775e:	b570      	push	{r4, r5, r6, lr}
 8007760:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007762:	2300      	movs	r3, #0
 8007764:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007766:	6805      	ldr	r5, [r0, #0]
 8007768:	4b4c      	ldr	r3, [pc, #304]	; (800789c <HAL_SPI_Init+0x144>)
 800776a:	4e4d      	ldr	r6, [pc, #308]	; (80078a0 <HAL_SPI_Init+0x148>)
 800776c:	429d      	cmp	r5, r3
 800776e:	bf18      	it	ne
 8007770:	42b5      	cmpne	r5, r6
 8007772:	bf14      	ite	ne
 8007774:	2601      	movne	r6, #1
 8007776:	2600      	moveq	r6, #0
 8007778:	d007      	beq.n	800778a <HAL_SPI_Init+0x32>
 800777a:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800777e:	429d      	cmp	r5, r3
 8007780:	d003      	beq.n	800778a <HAL_SPI_Init+0x32>
 8007782:	68c3      	ldr	r3, [r0, #12]
 8007784:	2b0f      	cmp	r3, #15
 8007786:	f200 8083 	bhi.w	8007890 <HAL_SPI_Init+0x138>
  packet_length = SPI_GetPacketSize(hspi);
 800778a:	4620      	mov	r0, r4
 800778c:	f7ff ffba 	bl	8007704 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007790:	b126      	cbz	r6, 800779c <HAL_SPI_Init+0x44>
 8007792:	4b44      	ldr	r3, [pc, #272]	; (80078a4 <HAL_SPI_Init+0x14c>)
 8007794:	429d      	cmp	r5, r3
 8007796:	d001      	beq.n	800779c <HAL_SPI_Init+0x44>
 8007798:	2808      	cmp	r0, #8
 800779a:	d87b      	bhi.n	8007894 <HAL_SPI_Init+0x13c>
 800779c:	4a3f      	ldr	r2, [pc, #252]	; (800789c <HAL_SPI_Init+0x144>)
 800779e:	4b40      	ldr	r3, [pc, #256]	; (80078a0 <HAL_SPI_Init+0x148>)
 80077a0:	429d      	cmp	r5, r3
 80077a2:	bf18      	it	ne
 80077a4:	4295      	cmpne	r5, r2
 80077a6:	d003      	beq.n	80077b0 <HAL_SPI_Init+0x58>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80077a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ac:	429d      	cmp	r5, r3
 80077ae:	d101      	bne.n	80077b4 <HAL_SPI_Init+0x5c>
 80077b0:	2810      	cmp	r0, #16
 80077b2:	d871      	bhi.n	8007898 <HAL_SPI_Init+0x140>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80077b4:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d054      	beq.n	8007866 <HAL_SPI_Init+0x10e>
  hspi->State = HAL_SPI_STATE_BUSY;
 80077bc:	2302      	movs	r3, #2
 80077be:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 80077c2:	6822      	ldr	r2, [r4, #0]
 80077c4:	6813      	ldr	r3, [r2, #0]
 80077c6:	f023 0301 	bic.w	r3, r3, #1
 80077ca:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80077cc:	69a3      	ldr	r3, [r4, #24]
 80077ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077d2:	d04e      	beq.n	8007872 <HAL_SPI_Init+0x11a>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80077d4:	69e3      	ldr	r3, [r4, #28]
 80077d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80077d8:	4313      	orrs	r3, r2
 80077da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80077dc:	4313      	orrs	r3, r2
 80077de:	68e1      	ldr	r1, [r4, #12]
 80077e0:	6822      	ldr	r2, [r4, #0]
 80077e2:	430b      	orrs	r3, r1
 80077e4:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80077e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80077ea:	4313      	orrs	r3, r2
 80077ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80077ee:	4313      	orrs	r3, r2
 80077f0:	69a2      	ldr	r2, [r4, #24]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	6922      	ldr	r2, [r4, #16]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	6962      	ldr	r2, [r4, #20]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	6a22      	ldr	r2, [r4, #32]
 80077fe:	4313      	orrs	r3, r2
 8007800:	6862      	ldr	r2, [r4, #4]
 8007802:	4313      	orrs	r3, r2
 8007804:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007806:	4313      	orrs	r3, r2
 8007808:	68a2      	ldr	r2, [r4, #8]
 800780a:	4313      	orrs	r3, r2
 800780c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800780e:	4313      	orrs	r3, r2
 8007810:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007812:	6822      	ldr	r2, [r4, #0]
 8007814:	430b      	orrs	r3, r1
 8007816:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007818:	6863      	ldr	r3, [r4, #4]
 800781a:	b96b      	cbnz	r3, 8007838 <HAL_SPI_Init+0xe0>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800781c:	6822      	ldr	r2, [r4, #0]
 800781e:	6893      	ldr	r3, [r2, #8]
 8007820:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8007824:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007828:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800782a:	6822      	ldr	r2, [r4, #0]
 800782c:	6893      	ldr	r3, [r2, #8]
 800782e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007836:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007838:	6822      	ldr	r2, [r4, #0]
 800783a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800783c:	f023 0301 	bic.w	r3, r3, #1
 8007840:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007842:	6863      	ldr	r3, [r4, #4]
 8007844:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007848:	d006      	beq.n	8007858 <HAL_SPI_Init+0x100>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800784a:	6822      	ldr	r2, [r4, #0]
 800784c:	68d3      	ldr	r3, [r2, #12]
 800784e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007852:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007854:	430b      	orrs	r3, r1
 8007856:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007858:	2000      	movs	r0, #0
 800785a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800785e:	2301      	movs	r3, #1
 8007860:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8007864:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8007866:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800786a:	4620      	mov	r0, r4
 800786c:	f005 fb08 	bl	800ce80 <HAL_SPI_MspInit>
 8007870:	e7a4      	b.n	80077bc <HAL_SPI_Init+0x64>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8007872:	6863      	ldr	r3, [r4, #4]
 8007874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007878:	d1ac      	bne.n	80077d4 <HAL_SPI_Init+0x7c>
 800787a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1a9      	bne.n	80077d4 <HAL_SPI_Init+0x7c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007880:	6822      	ldr	r2, [r4, #0]
 8007882:	6813      	ldr	r3, [r2, #0]
 8007884:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	e7a3      	b.n	80077d4 <HAL_SPI_Init+0x7c>
    return HAL_ERROR;
 800788c:	2001      	movs	r0, #1
}
 800788e:	4770      	bx	lr
    return HAL_ERROR;
 8007890:	2001      	movs	r0, #1
 8007892:	e7e7      	b.n	8007864 <HAL_SPI_Init+0x10c>
    return HAL_ERROR;
 8007894:	2001      	movs	r0, #1
 8007896:	e7e5      	b.n	8007864 <HAL_SPI_Init+0x10c>
 8007898:	2001      	movs	r0, #1
 800789a:	e7e3      	b.n	8007864 <HAL_SPI_Init+0x10c>
 800789c:	40013000 	.word	0x40013000
 80078a0:	40003800 	.word	0x40003800
 80078a4:	40003c00 	.word	0x40003c00

080078a8 <HAL_SPI_TransmitReceive>:
{
 80078a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	461d      	mov	r5, r3
 80078b0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80078b2:	f8d0 a000 	ldr.w	sl, [r0]
  __HAL_LOCK(hspi);
 80078b6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	f000 81f6 	beq.w	8007cac <HAL_SPI_TransmitReceive+0x404>
 80078c0:	4604      	mov	r4, r0
 80078c2:	4688      	mov	r8, r1
 80078c4:	4691      	mov	r9, r2
 80078c6:	2301      	movs	r3, #1
 80078c8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80078cc:	f7f8 ff38 	bl	8000740 <HAL_GetTick>
 80078d0:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 80078d2:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 80078d6:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80078d8:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d007      	beq.n	80078ee <HAL_SPI_TransmitReceive+0x46>
 80078de:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80078e2:	d140      	bne.n	8007966 <HAL_SPI_TransmitReceive+0xbe>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078e4:	68a2      	ldr	r2, [r4, #8]
 80078e6:	2a00      	cmp	r2, #0
 80078e8:	d13d      	bne.n	8007966 <HAL_SPI_TransmitReceive+0xbe>
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d13b      	bne.n	8007966 <HAL_SPI_TransmitReceive+0xbe>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80078ee:	fab9 f389 	clz	r3, r9
 80078f2:	095b      	lsrs	r3, r3, #5
 80078f4:	f1b8 0f00 	cmp.w	r8, #0
 80078f8:	bf08      	it	eq
 80078fa:	2301      	moveq	r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d139      	bne.n	8007974 <HAL_SPI_TransmitReceive+0xcc>
 8007900:	2d00      	cmp	r5, #0
 8007902:	d037      	beq.n	8007974 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007904:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b04      	cmp	r3, #4
 800790c:	d002      	beq.n	8007914 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800790e:	2305      	movs	r3, #5
 8007910:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007914:	2300      	movs	r3, #0
 8007916:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800791a:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->RxXferCount = Size;
 800791e:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8007922:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007926:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800792a:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800792e:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 8007932:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007934:	6763      	str	r3, [r4, #116]	; 0x74
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007936:	6822      	ldr	r2, [r4, #0]
 8007938:	6851      	ldr	r1, [r2, #4]
 800793a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800793e:	400b      	ands	r3, r1
 8007940:	432b      	orrs	r3, r5
 8007942:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 8007944:	6822      	ldr	r2, [r4, #0]
 8007946:	6813      	ldr	r3, [r2, #0]
 8007948:	f043 0301 	orr.w	r3, r3, #1
 800794c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800794e:	6863      	ldr	r3, [r4, #4]
 8007950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007954:	d013      	beq.n	800797e <HAL_SPI_TransmitReceive+0xd6>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007956:	68e3      	ldr	r3, [r4, #12]
 8007958:	2b0f      	cmp	r3, #15
 800795a:	d865      	bhi.n	8007a28 <HAL_SPI_TransmitReceive+0x180>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800795c:	2b07      	cmp	r3, #7
 800795e:	f200 80df 	bhi.w	8007b20 <HAL_SPI_TransmitReceive+0x278>
  initial_RxXferCount = Size;
 8007962:	46a8      	mov	r8, r5
 8007964:	e129      	b.n	8007bba <HAL_SPI_TransmitReceive+0x312>
    __HAL_UNLOCK(hspi);
 8007966:	2300      	movs	r3, #0
 8007968:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800796c:	2002      	movs	r0, #2
}
 800796e:	b002      	add	sp, #8
 8007970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 8007974:	2300      	movs	r3, #0
 8007976:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800797a:	2001      	movs	r0, #1
 800797c:	e7f7      	b.n	800796e <HAL_SPI_TransmitReceive+0xc6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800797e:	6822      	ldr	r2, [r4, #0]
 8007980:	6813      	ldr	r3, [r2, #0]
 8007982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	e7e5      	b.n	8007956 <HAL_SPI_TransmitReceive+0xae>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800798a:	f7f8 fed9 	bl	8000740 <HAL_GetTick>
 800798e:	1bc0      	subs	r0, r0, r7
 8007990:	42b0      	cmp	r0, r6
 8007992:	d302      	bcc.n	800799a <HAL_SPI_TransmitReceive+0xf2>
 8007994:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8007998:	d136      	bne.n	8007a08 <HAL_SPI_TransmitReceive+0x160>
 800799a:	2e00      	cmp	r6, #0
 800799c:	d034      	beq.n	8007a08 <HAL_SPI_TransmitReceive+0x160>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800799e:	ea45 0308 	orr.w	r3, r5, r8
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 8163 	beq.w	8007c70 <HAL_SPI_TransmitReceive+0x3c8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	695a      	ldr	r2, [r3, #20]
 80079ae:	f012 0f02 	tst.w	r2, #2
 80079b2:	d00f      	beq.n	80079d4 <HAL_SPI_TransmitReceive+0x12c>
 80079b4:	b175      	cbz	r5, 80079d4 <HAL_SPI_TransmitReceive+0x12c>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80079b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80079b8:	6812      	ldr	r2, [r2, #0]
 80079ba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80079bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80079be:	3304      	adds	r3, #4
 80079c0:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 80079c2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80079c6:	3b01      	subs	r3, #1
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80079ce:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 80079d2:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	6959      	ldr	r1, [r3, #20]
 80079d8:	f248 0208 	movw	r2, #32776	; 0x8008
 80079dc:	4211      	tst	r1, r2
 80079de:	d0d4      	beq.n	800798a <HAL_SPI_TransmitReceive+0xe2>
 80079e0:	f1b8 0f00 	cmp.w	r8, #0
 80079e4:	d0d1      	beq.n	800798a <HAL_SPI_TransmitReceive+0xe2>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80079e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ea:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80079ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079ee:	3304      	adds	r3, #4
 80079f0:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 80079f2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80079f6:	3b01      	subs	r3, #1
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80079fe:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 8007a02:	fa1f f888 	uxth.w	r8, r8
 8007a06:	e7c0      	b.n	800798a <HAL_SPI_TransmitReceive+0xe2>
        SPI_CloseTransfer(hspi);
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f7ff fe13 	bl	8007634 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a14:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a1c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007a20:	2001      	movs	r0, #1
 8007a22:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
        return HAL_ERROR;
 8007a26:	e7a2      	b.n	800796e <HAL_SPI_TransmitReceive+0xc6>
  initial_RxXferCount = Size;
 8007a28:	46a8      	mov	r8, r5
 8007a2a:	e7b8      	b.n	800799e <HAL_SPI_TransmitReceive+0xf6>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007a2c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	f8aa 3020 	strh.w	r3, [sl, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a34:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007a36:	3302      	adds	r3, #2
 8007a38:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8007a3a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8007a46:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8007a4a:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	695a      	ldr	r2, [r3, #20]
 8007a50:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 8007a54:	d016      	beq.n	8007a84 <HAL_SPI_TransmitReceive+0x1dc>
 8007a56:	f1b8 0f00 	cmp.w	r8, #0
 8007a5a:	d013      	beq.n	8007a84 <HAL_SPI_TransmitReceive+0x1dc>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8007a5c:	695a      	ldr	r2, [r3, #20]
 8007a5e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8007a62:	d03b      	beq.n	8007adc <HAL_SPI_TransmitReceive+0x234>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007a64:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a68:	6013      	str	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007a6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8007a70:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007a74:	3b02      	subs	r3, #2
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007a7c:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 8007a80:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a84:	f7f8 fe5c 	bl	8000740 <HAL_GetTick>
 8007a88:	1bc0      	subs	r0, r0, r7
 8007a8a:	42b0      	cmp	r0, r6
 8007a8c:	d302      	bcc.n	8007a94 <HAL_SPI_TransmitReceive+0x1ec>
 8007a8e:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8007a92:	d135      	bne.n	8007b00 <HAL_SPI_TransmitReceive+0x258>
 8007a94:	2e00      	cmp	r6, #0
 8007a96:	d033      	beq.n	8007b00 <HAL_SPI_TransmitReceive+0x258>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007a98:	ea45 0308 	orr.w	r3, r5, r8
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 80e6 	beq.w	8007c70 <HAL_SPI_TransmitReceive+0x3c8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	695a      	ldr	r2, [r3, #20]
 8007aa8:	f012 0f02 	tst.w	r2, #2
 8007aac:	d0ce      	beq.n	8007a4c <HAL_SPI_TransmitReceive+0x1a4>
 8007aae:	2d00      	cmp	r5, #0
 8007ab0:	d0cc      	beq.n	8007a4c <HAL_SPI_TransmitReceive+0x1a4>
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007ab2:	2d01      	cmp	r5, #1
 8007ab4:	d9ba      	bls.n	8007a2c <HAL_SPI_TransmitReceive+0x184>
 8007ab6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007ab8:	2a00      	cmp	r2, #0
 8007aba:	d0b7      	beq.n	8007a2c <HAL_SPI_TransmitReceive+0x184>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007abc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007abe:	6812      	ldr	r2, [r2, #0]
 8007ac0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007ac2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007ac8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007acc:	3b02      	subs	r3, #2
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8007ad4:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8007ad8:	b2ad      	uxth	r5, r5
 8007ada:	e7b7      	b.n	8007a4c <HAL_SPI_TransmitReceive+0x1a4>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007adc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ade:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
 8007ae2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ae6:	3302      	adds	r3, #2
 8007ae8:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8007aea:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007aee:	3b01      	subs	r3, #1
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007af6:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 8007afa:	fa1f f888 	uxth.w	r8, r8
 8007afe:	e7c1      	b.n	8007a84 <HAL_SPI_TransmitReceive+0x1dc>
        SPI_CloseTransfer(hspi);
 8007b00:	4620      	mov	r0, r4
 8007b02:	f7ff fd97 	bl	8007634 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 8007b06:	2300      	movs	r3, #0
 8007b08:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b0c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b14:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007b18:	2001      	movs	r0, #1
 8007b1a:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
        return HAL_ERROR;
 8007b1e:	e726      	b.n	800796e <HAL_SPI_TransmitReceive+0xc6>
  initial_RxXferCount = Size;
 8007b20:	46a8      	mov	r8, r5
 8007b22:	e7b9      	b.n	8007a98 <HAL_SPI_TransmitReceive+0x1f0>
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007b24:	2d01      	cmp	r5, #1
 8007b26:	d912      	bls.n	8007b4e <HAL_SPI_TransmitReceive+0x2a6>
 8007b28:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007b2a:	b182      	cbz	r2, 8007b4e <HAL_SPI_TransmitReceive+0x2a6>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007b2c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	f8aa 3020 	strh.w	r3, [sl, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b34:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007b36:	3302      	adds	r3, #2
 8007b38:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007b3a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007b3e:	3b02      	subs	r3, #2
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8007b46:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8007b4a:	b2ad      	uxth	r5, r5
 8007b4c:	e00f      	b.n	8007b6e <HAL_SPI_TransmitReceive+0x2c6>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007b4e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007b50:	7812      	ldrb	r2, [r2, #0]
 8007b52:	f883 2020 	strb.w	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b56:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007b58:	3301      	adds	r3, #1
 8007b5a:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8007b5c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007b60:	3b01      	subs	r3, #1
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8007b68:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8007b6c:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	695a      	ldr	r2, [r3, #20]
 8007b72:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 8007b76:	d016      	beq.n	8007ba6 <HAL_SPI_TransmitReceive+0x2fe>
 8007b78:	f1b8 0f00 	cmp.w	r8, #0
 8007b7c:	d013      	beq.n	8007ba6 <HAL_SPI_TransmitReceive+0x2fe>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8007b7e:	695a      	ldr	r2, [r3, #20]
 8007b80:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8007b84:	d03a      	beq.n	8007bfc <HAL_SPI_TransmitReceive+0x354>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007b86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8a:	6013      	str	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007b8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b8e:	3304      	adds	r3, #4
 8007b90:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8007b92:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007b96:	3b04      	subs	r3, #4
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007b9e:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 8007ba2:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ba6:	f7f8 fdcb 	bl	8000740 <HAL_GetTick>
 8007baa:	1bc0      	subs	r0, r0, r7
 8007bac:	42b0      	cmp	r0, r6
 8007bae:	d302      	bcc.n	8007bb6 <HAL_SPI_TransmitReceive+0x30e>
 8007bb0:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8007bb4:	d14c      	bne.n	8007c50 <HAL_SPI_TransmitReceive+0x3a8>
 8007bb6:	2e00      	cmp	r6, #0
 8007bb8:	d04a      	beq.n	8007c50 <HAL_SPI_TransmitReceive+0x3a8>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007bba:	ea45 0308 	orr.w	r3, r5, r8
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d055      	beq.n	8007c70 <HAL_SPI_TransmitReceive+0x3c8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	695a      	ldr	r2, [r3, #20]
 8007bc8:	f012 0f02 	tst.w	r2, #2
 8007bcc:	d0cf      	beq.n	8007b6e <HAL_SPI_TransmitReceive+0x2c6>
 8007bce:	2d00      	cmp	r5, #0
 8007bd0:	d0cd      	beq.n	8007b6e <HAL_SPI_TransmitReceive+0x2c6>
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007bd2:	2d03      	cmp	r5, #3
 8007bd4:	d9a6      	bls.n	8007b24 <HAL_SPI_TransmitReceive+0x27c>
 8007bd6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007bd8:	2a40      	cmp	r2, #64	; 0x40
 8007bda:	d9a3      	bls.n	8007b24 <HAL_SPI_TransmitReceive+0x27c>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007bdc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007bde:	6812      	ldr	r2, [r2, #0]
 8007be0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007be2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007be4:	3304      	adds	r3, #4
 8007be6:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007be8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8007bec:	3b04      	subs	r3, #4
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8007bf4:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 8007bf8:	b2ad      	uxth	r5, r5
 8007bfa:	e7b8      	b.n	8007b6e <HAL_SPI_TransmitReceive+0x2c6>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8007bfc:	695a      	ldr	r2, [r3, #20]
 8007bfe:	f402 42c0 	and.w	r2, r2, #24576	; 0x6000
 8007c02:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007c06:	d911      	bls.n	8007c2c <HAL_SPI_TransmitReceive+0x384>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007c08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c0a:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
 8007c0e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c12:	3302      	adds	r3, #2
 8007c14:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8007c16:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007c1a:	3b02      	subs	r3, #2
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007c22:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 8007c26:	fa1f f888 	uxth.w	r8, r8
 8007c2a:	e7bc      	b.n	8007ba6 <HAL_SPI_TransmitReceive+0x2fe>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007c2c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c32:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c36:	3301      	adds	r3, #1
 8007c38:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8007c3a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007c46:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 8007c4a:	fa1f f888 	uxth.w	r8, r8
 8007c4e:	e7aa      	b.n	8007ba6 <HAL_SPI_TransmitReceive+0x2fe>
        SPI_CloseTransfer(hspi);
 8007c50:	4620      	mov	r0, r4
 8007c52:	f7ff fcef 	bl	8007634 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 8007c56:	2300      	movs	r3, #0
 8007c58:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c5c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c64:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007c68:	2001      	movs	r0, #1
 8007c6a:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
        return HAL_ERROR;
 8007c6e:	e67e      	b.n	800796e <HAL_SPI_TransmitReceive+0xc6>
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007c70:	9600      	str	r6, [sp, #0]
 8007c72:	463b      	mov	r3, r7
 8007c74:	2200      	movs	r2, #0
 8007c76:	2108      	movs	r1, #8
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f7ff fd4b 	bl	8007714 <SPI_WaitOnFlagUntilTimeout>
 8007c7e:	b128      	cbz	r0, 8007c8c <HAL_SPI_TransmitReceive+0x3e4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c80:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007c84:	f043 0320 	orr.w	r3, r3, #32
 8007c88:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	f7ff fcd1 	bl	8007634 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 8007c92:	2300      	movs	r3, #0
 8007c94:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c9e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007ca2:	b90b      	cbnz	r3, 8007ca8 <HAL_SPI_TransmitReceive+0x400>
  return errorcode;
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	e662      	b.n	800796e <HAL_SPI_TransmitReceive+0xc6>
    return HAL_ERROR;
 8007ca8:	2001      	movs	r0, #1
 8007caa:	e660      	b.n	800796e <HAL_SPI_TransmitReceive+0xc6>
  __HAL_LOCK(hspi);
 8007cac:	2002      	movs	r0, #2
 8007cae:	e65e      	b.n	800796e <HAL_SPI_TransmitReceive+0xc6>

08007cb0 <HAL_SPI_TxCpltCallback>:
}
 8007cb0:	4770      	bx	lr

08007cb2 <HAL_SPI_TxRxCpltCallback>:
}
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_SPI_ErrorCallback>:
}
 8007cb4:	4770      	bx	lr
	...

08007cb8 <HAL_SPI_IRQHandler>:
{
 8007cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cbc:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 8007cbe:	6806      	ldr	r6, [r0, #0]
 8007cc0:	f8d6 9010 	ldr.w	r9, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8007cc4:	f8d6 8014 	ldr.w	r8, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 8007cc8:	ea09 0508 	and.w	r5, r9, r8
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007ccc:	f8d6 a008 	ldr.w	sl, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 8007cd0:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 8007cd4:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007cd6:	f005 0364 	and.w	r3, r5, #100	; 0x64
 8007cda:	2b04      	cmp	r3, #4
 8007cdc:	d116      	bne.n	8007d0c <HAL_SPI_IRQHandler+0x54>
    hspi->TxISR(hspi);
 8007cde:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007ce0:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007ce2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	4798      	blx	r3
    handled = 1UL;
 8007ce8:	2301      	movs	r3, #1
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007cea:	f005 0245 	and.w	r2, r5, #69	; 0x45
 8007cee:	2a01      	cmp	r2, #1
 8007cf0:	d103      	bne.n	8007cfa <HAL_SPI_IRQHandler+0x42>
    hspi->RxISR(hspi);
 8007cf2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	4798      	blx	r3
    handled = 1UL;
 8007cf8:	2301      	movs	r3, #1
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007cfa:	f005 0226 	and.w	r2, r5, #38	; 0x26
 8007cfe:	2a02      	cmp	r2, #2
 8007d00:	d106      	bne.n	8007d10 <HAL_SPI_IRQHandler+0x58>
    hspi->TxISR(hspi);
 8007d02:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007d04:	4620      	mov	r0, r4
 8007d06:	4798      	blx	r3
}
 8007d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint32_t handled  = 0UL;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	e7ec      	b.n	8007cea <HAL_SPI_IRQHandler+0x32>
  if (handled != 0UL)
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1f9      	bne.n	8007d08 <HAL_SPI_IRQHandler+0x50>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007d14:	f015 0f08 	tst.w	r5, #8
 8007d18:	d06c      	beq.n	8007df4 <HAL_SPI_IRQHandler+0x13c>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007d1a:	6822      	ldr	r2, [r4, #0]
 8007d1c:	6993      	ldr	r3, [r2, #24]
 8007d1e:	f043 0308 	orr.w	r3, r3, #8
 8007d22:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007d24:	6822      	ldr	r2, [r4, #0]
 8007d26:	6993      	ldr	r3, [r2, #24]
 8007d28:	f043 0310 	orr.w	r3, r3, #16
 8007d2c:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007d2e:	6822      	ldr	r2, [r4, #0]
 8007d30:	6993      	ldr	r3, [r2, #24]
 8007d32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007d36:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007d38:	6822      	ldr	r2, [r4, #0]
 8007d3a:	6913      	ldr	r3, [r2, #16]
 8007d3c:	f023 0308 	bic.w	r3, r3, #8
 8007d40:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007d42:	f41a 4f40 	tst.w	sl, #49152	; 0xc000
 8007d46:	d009      	beq.n	8007d5c <HAL_SPI_IRQHandler+0xa4>
 8007d48:	2f04      	cmp	r7, #4
 8007d4a:	d002      	beq.n	8007d52 <HAL_SPI_IRQHandler+0x9a>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007d4c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	b123      	cbz	r3, 8007d5c <HAL_SPI_IRQHandler+0xa4>
 8007d52:	2f03      	cmp	r7, #3
 8007d54:	d011      	beq.n	8007d7a <HAL_SPI_IRQHandler+0xc2>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007d56:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	b973      	cbnz	r3, 8007d7a <HAL_SPI_IRQHandler+0xc2>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8007d64:	d021      	beq.n	8007daa <HAL_SPI_IRQHandler+0xf2>
      SPI_CloseTransfer(hspi);
 8007d66:	4620      	mov	r0, r4
 8007d68:	f7ff fc64 	bl	8007634 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d72:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d130      	bne.n	8007ddc <HAL_SPI_IRQHandler+0x124>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007d7a:	2f05      	cmp	r7, #5
 8007d7c:	d032      	beq.n	8007de4 <HAL_SPI_IRQHandler+0x12c>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007d7e:	2f04      	cmp	r7, #4
 8007d80:	d034      	beq.n	8007dec <HAL_SPI_IRQHandler+0x134>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007d82:	2f03      	cmp	r7, #3
 8007d84:	d1c0      	bne.n	8007d08 <HAL_SPI_IRQHandler+0x50>
      HAL_SPI_TxCpltCallback(hspi);
 8007d86:	4620      	mov	r0, r4
 8007d88:	f7ff ff92 	bl	8007cb0 <HAL_SPI_TxCpltCallback>
 8007d8c:	e7bc      	b.n	8007d08 <HAL_SPI_IRQHandler+0x50>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d8e:	2b07      	cmp	r3, #7
 8007d90:	d91b      	bls.n	8007dca <HAL_SPI_IRQHandler+0x112>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d94:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 8007d96:	801a      	strh	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d9a:	3302      	adds	r3, #2
 8007d9c:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8007d9e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007da2:	3b01      	subs	r3, #1
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007daa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0d8      	beq.n	8007d66 <HAL_SPI_IRQHandler+0xae>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007db4:	68e3      	ldr	r3, [r4, #12]
 8007db6:	2b0f      	cmp	r3, #15
 8007db8:	d9e9      	bls.n	8007d8e <HAL_SPI_IRQHandler+0xd6>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007dba:	6822      	ldr	r2, [r4, #0]
 8007dbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dbe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007dc0:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	6663      	str	r3, [r4, #100]	; 0x64
 8007dc8:	e7e9      	b.n	8007d9e <HAL_SPI_IRQHandler+0xe6>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007dca:	6822      	ldr	r2, [r4, #0]
 8007dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dce:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8007dd2:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	6663      	str	r3, [r4, #100]	; 0x64
 8007dda:	e7e0      	b.n	8007d9e <HAL_SPI_IRQHandler+0xe6>
        HAL_SPI_ErrorCallback(hspi);
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f7ff ff69 	bl	8007cb4 <HAL_SPI_ErrorCallback>
        return;
 8007de2:	e791      	b.n	8007d08 <HAL_SPI_IRQHandler+0x50>
      HAL_SPI_TxRxCpltCallback(hspi);
 8007de4:	4620      	mov	r0, r4
 8007de6:	f7ff ff64 	bl	8007cb2 <HAL_SPI_TxRxCpltCallback>
 8007dea:	e78d      	b.n	8007d08 <HAL_SPI_IRQHandler+0x50>
      HAL_SPI_RxCpltCallback(hspi);
 8007dec:	4620      	mov	r0, r4
 8007dee:	f004 fe8d 	bl	800cb0c <HAL_SPI_RxCpltCallback>
 8007df2:	e789      	b.n	8007d08 <HAL_SPI_IRQHandler+0x50>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007df4:	f418 6f00 	tst.w	r8, #2048	; 0x800
 8007df8:	d002      	beq.n	8007e00 <HAL_SPI_IRQHandler+0x148>
 8007dfa:	f019 0f08 	tst.w	r9, #8
 8007dfe:	d174      	bne.n	8007eea <HAL_SPI_IRQHandler+0x232>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007e00:	f415 7f58 	tst.w	r5, #864	; 0x360
 8007e04:	d080      	beq.n	8007d08 <HAL_SPI_IRQHandler+0x50>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007e06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e0a:	d00a      	beq.n	8007e22 <HAL_SPI_IRQHandler+0x16a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e0c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007e10:	f043 0304 	orr.w	r3, r3, #4
 8007e14:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e18:	6822      	ldr	r2, [r4, #0]
 8007e1a:	6993      	ldr	r3, [r2, #24]
 8007e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e20:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007e22:	f415 7f00 	tst.w	r5, #512	; 0x200
 8007e26:	d00a      	beq.n	8007e3e <HAL_SPI_IRQHandler+0x186>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e28:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007e2c:	f043 0301 	orr.w	r3, r3, #1
 8007e30:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e34:	6822      	ldr	r2, [r4, #0]
 8007e36:	6993      	ldr	r3, [r2, #24]
 8007e38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e3c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007e3e:	f415 7f80 	tst.w	r5, #256	; 0x100
 8007e42:	d00a      	beq.n	8007e5a <HAL_SPI_IRQHandler+0x1a2>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e44:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007e48:	f043 0308 	orr.w	r3, r3, #8
 8007e4c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e50:	6822      	ldr	r2, [r4, #0]
 8007e52:	6993      	ldr	r3, [r2, #24]
 8007e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e58:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007e5a:	f015 0f20 	tst.w	r5, #32
 8007e5e:	d00a      	beq.n	8007e76 <HAL_SPI_IRQHandler+0x1be>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007e60:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e68:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007e6c:	6822      	ldr	r2, [r4, #0]
 8007e6e:	6993      	ldr	r3, [r2, #24]
 8007e70:	f043 0320 	orr.w	r3, r3, #32
 8007e74:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e76:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f43f af44 	beq.w	8007d08 <HAL_SPI_IRQHandler+0x50>
      __HAL_SPI_DISABLE(hspi);
 8007e80:	6822      	ldr	r2, [r4, #0]
 8007e82:	6813      	ldr	r3, [r2, #0]
 8007e84:	f023 0301 	bic.w	r3, r3, #1
 8007e88:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007e8a:	6822      	ldr	r2, [r4, #0]
 8007e8c:	6911      	ldr	r1, [r2, #16]
 8007e8e:	4b1d      	ldr	r3, [pc, #116]	; (8007f04 <HAL_SPI_IRQHandler+0x24c>)
 8007e90:	400b      	ands	r3, r1
 8007e92:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007e94:	f40a 4a40 	and.w	sl, sl, #49152	; 0xc000
 8007e98:	f5ba 4f40 	cmp.w	sl, #49152	; 0xc000
 8007e9c:	d12b      	bne.n	8007ef6 <HAL_SPI_IRQHandler+0x23e>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007e9e:	6822      	ldr	r2, [r4, #0]
 8007ea0:	6893      	ldr	r3, [r2, #8]
 8007ea2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007ea6:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 8007ea8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007eaa:	b15b      	cbz	r3, 8007ec4 <HAL_SPI_IRQHandler+0x20c>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007eac:	4a16      	ldr	r2, [pc, #88]	; (8007f08 <HAL_SPI_IRQHandler+0x250>)
 8007eae:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007eb0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007eb2:	f7f9 fb97 	bl	80015e4 <HAL_DMA_Abort_IT>
 8007eb6:	b128      	cbz	r0, 8007ec4 <HAL_SPI_IRQHandler+0x20c>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007eb8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ec0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8007ec4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f43f af1e 	beq.w	8007d08 <HAL_SPI_IRQHandler+0x50>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ecc:	4a0e      	ldr	r2, [pc, #56]	; (8007f08 <HAL_SPI_IRQHandler+0x250>)
 8007ece:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007ed0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007ed2:	f7f9 fb87 	bl	80015e4 <HAL_DMA_Abort_IT>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	f43f af16 	beq.w	8007d08 <HAL_SPI_IRQHandler+0x50>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007edc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ee4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8007ee8:	e70e      	b.n	8007d08 <HAL_SPI_IRQHandler+0x50>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007eea:	6822      	ldr	r2, [r4, #0]
 8007eec:	6993      	ldr	r3, [r2, #24]
 8007eee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007ef2:	6193      	str	r3, [r2, #24]
    return;
 8007ef4:	e708      	b.n	8007d08 <HAL_SPI_IRQHandler+0x50>
        hspi->State = HAL_SPI_STATE_READY;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007efc:	4620      	mov	r0, r4
 8007efe:	f7ff fed9 	bl	8007cb4 <HAL_SPI_ErrorCallback>
 8007f02:	e701      	b.n	8007d08 <HAL_SPI_IRQHandler+0x50>
 8007f04:	fffffc94 	.word	0xfffffc94
 8007f08:	08007f0d 	.word	0x08007f0d

08007f0c <SPI_DMAAbortOnError>:
{
 8007f0c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f0e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 8007f10:	2300      	movs	r3, #0
 8007f12:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007f16:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8007f20:	f7ff fec8 	bl	8007cb4 <HAL_SPI_ErrorCallback>
}
 8007f24:	bd08      	pop	{r3, pc}

08007f26 <HAL_SPI_GetState>:
  return hspi->State;
 8007f26:	f890 0081 	ldrb.w	r0, [r0, #129]	; 0x81
}
 8007f2a:	4770      	bx	lr

08007f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f2c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f2e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f30:	6a04      	ldr	r4, [r0, #32]
 8007f32:	f024 0401 	bic.w	r4, r4, #1
 8007f36:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f38:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f3a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f3e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f42:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8007f46:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f48:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007f4a:	6203      	str	r3, [r0, #32]
}
 8007f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f52:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f54:	6a04      	ldr	r4, [r0, #32]
 8007f56:	f024 0410 	bic.w	r4, r4, #16
 8007f5a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f5c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8007f5e:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f60:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f64:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f68:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f6c:	031b      	lsls	r3, r3, #12
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f72:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f76:	0109      	lsls	r1, r1, #4
 8007f78:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 8007f7c:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f7e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007f80:	6201      	str	r1, [r0, #32]
}
 8007f82:	bc30      	pop	{r4, r5}
 8007f84:	4770      	bx	lr

08007f86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f86:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f88:	6a03      	ldr	r3, [r0, #32]
 8007f8a:	f023 0310 	bic.w	r3, r3, #16
 8007f8e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f90:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8007f92:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f94:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f98:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fa0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fa4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007fa6:	6203      	str	r3, [r0, #32]
}
 8007fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fae:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fb0:	6a04      	ldr	r4, [r0, #32]
 8007fb2:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8007fb6:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007fb8:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8007fba:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007fbc:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8007fc0:	4322      	orrs	r2, r4

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007fc2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007fc6:	011b      	lsls	r3, r3, #4
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007fcc:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007fd0:	0209      	lsls	r1, r1, #8
 8007fd2:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8007fd6:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007fd8:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8007fda:	6201      	str	r1, [r0, #32]
}
 8007fdc:	bc30      	pop	{r4, r5}
 8007fde:	4770      	bx	lr

08007fe0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fe0:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fe2:	6a04      	ldr	r4, [r0, #32]
 8007fe4:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8007fe8:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007fea:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8007fec:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007fee:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007ff2:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007ff6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007ffa:	031b      	lsls	r3, r3, #12
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008000:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008004:	0309      	lsls	r1, r1, #12
 8008006:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 800800a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800800c:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 800800e:	6201      	str	r1, [r0, #32]
}
 8008010:	bc30      	pop	{r4, r5}
 8008012:	4770      	bx	lr

08008014 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008014:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008016:	4b03      	ldr	r3, [pc, #12]	; (8008024 <TIM_ITRx_SetConfig+0x10>)
 8008018:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800801a:	4319      	orrs	r1, r3
 800801c:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008020:	6081      	str	r1, [r0, #8]
}
 8008022:	4770      	bx	lr
 8008024:	ffcfff8f 	.word	0xffcfff8f

08008028 <HAL_TIM_IC_MspInit>:
}
 8008028:	4770      	bx	lr

0800802a <HAL_TIM_PeriodElapsedCallback>:
}
 800802a:	4770      	bx	lr

0800802c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800802c:	4770      	bx	lr

0800802e <HAL_TIM_IC_CaptureCallback>:
}
 800802e:	4770      	bx	lr

08008030 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8008030:	4770      	bx	lr

08008032 <HAL_TIM_TriggerCallback>:
}
 8008032:	4770      	bx	lr

08008034 <HAL_TIM_IRQHandler>:
{
 8008034:	b510      	push	{r4, lr}
 8008036:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008038:	6803      	ldr	r3, [r0, #0]
 800803a:	691a      	ldr	r2, [r3, #16]
 800803c:	f012 0f02 	tst.w	r2, #2
 8008040:	d011      	beq.n	8008066 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008042:	68da      	ldr	r2, [r3, #12]
 8008044:	f012 0f02 	tst.w	r2, #2
 8008048:	d00d      	beq.n	8008066 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800804a:	f06f 0202 	mvn.w	r2, #2
 800804e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008050:	2301      	movs	r3, #1
 8008052:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008054:	6803      	ldr	r3, [r0, #0]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	f013 0f03 	tst.w	r3, #3
 800805c:	d079      	beq.n	8008152 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800805e:	f7ff ffe6 	bl	800802e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008062:	2300      	movs	r3, #0
 8008064:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	691a      	ldr	r2, [r3, #16]
 800806a:	f012 0f04 	tst.w	r2, #4
 800806e:	d012      	beq.n	8008096 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008070:	68da      	ldr	r2, [r3, #12]
 8008072:	f012 0f04 	tst.w	r2, #4
 8008076:	d00e      	beq.n	8008096 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008078:	f06f 0204 	mvn.w	r2, #4
 800807c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800807e:	2302      	movs	r3, #2
 8008080:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	f413 7f40 	tst.w	r3, #768	; 0x300
 800808a:	d068      	beq.n	800815e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800808c:	4620      	mov	r0, r4
 800808e:	f7ff ffce 	bl	800802e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008092:	2300      	movs	r3, #0
 8008094:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	691a      	ldr	r2, [r3, #16]
 800809a:	f012 0f08 	tst.w	r2, #8
 800809e:	d012      	beq.n	80080c6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080a0:	68da      	ldr	r2, [r3, #12]
 80080a2:	f012 0f08 	tst.w	r2, #8
 80080a6:	d00e      	beq.n	80080c6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080a8:	f06f 0208 	mvn.w	r2, #8
 80080ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080ae:	2304      	movs	r3, #4
 80080b0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	f013 0f03 	tst.w	r3, #3
 80080ba:	d057      	beq.n	800816c <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80080bc:	4620      	mov	r0, r4
 80080be:	f7ff ffb6 	bl	800802e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c2:	2300      	movs	r3, #0
 80080c4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	691a      	ldr	r2, [r3, #16]
 80080ca:	f012 0f10 	tst.w	r2, #16
 80080ce:	d012      	beq.n	80080f6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080d0:	68da      	ldr	r2, [r3, #12]
 80080d2:	f012 0f10 	tst.w	r2, #16
 80080d6:	d00e      	beq.n	80080f6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080d8:	f06f 0210 	mvn.w	r2, #16
 80080dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080de:	2308      	movs	r3, #8
 80080e0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80080ea:	d046      	beq.n	800817a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80080ec:	4620      	mov	r0, r4
 80080ee:	f7ff ff9e 	bl	800802e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080f2:	2300      	movs	r3, #0
 80080f4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	691a      	ldr	r2, [r3, #16]
 80080fa:	f012 0f01 	tst.w	r2, #1
 80080fe:	d003      	beq.n	8008108 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008100:	68da      	ldr	r2, [r3, #12]
 8008102:	f012 0f01 	tst.w	r2, #1
 8008106:	d13f      	bne.n	8008188 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	691a      	ldr	r2, [r3, #16]
 800810c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008110:	d003      	beq.n	800811a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008112:	68da      	ldr	r2, [r3, #12]
 8008114:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008118:	d13d      	bne.n	8008196 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	691a      	ldr	r2, [r3, #16]
 800811e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008122:	d003      	beq.n	800812c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008124:	68da      	ldr	r2, [r3, #12]
 8008126:	f012 0f80 	tst.w	r2, #128	; 0x80
 800812a:	d13b      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	691a      	ldr	r2, [r3, #16]
 8008130:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008134:	d003      	beq.n	800813e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008136:	68da      	ldr	r2, [r3, #12]
 8008138:	f012 0f40 	tst.w	r2, #64	; 0x40
 800813c:	d139      	bne.n	80081b2 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800813e:	6823      	ldr	r3, [r4, #0]
 8008140:	691a      	ldr	r2, [r3, #16]
 8008142:	f012 0f20 	tst.w	r2, #32
 8008146:	d003      	beq.n	8008150 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008148:	68da      	ldr	r2, [r3, #12]
 800814a:	f012 0f20 	tst.w	r2, #32
 800814e:	d137      	bne.n	80081c0 <HAL_TIM_IRQHandler+0x18c>
}
 8008150:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008152:	f7ff ff6b 	bl	800802c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008156:	4620      	mov	r0, r4
 8008158:	f7ff ff6a 	bl	8008030 <HAL_TIM_PWM_PulseFinishedCallback>
 800815c:	e781      	b.n	8008062 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800815e:	4620      	mov	r0, r4
 8008160:	f7ff ff64 	bl	800802c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008164:	4620      	mov	r0, r4
 8008166:	f7ff ff63 	bl	8008030 <HAL_TIM_PWM_PulseFinishedCallback>
 800816a:	e792      	b.n	8008092 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800816c:	4620      	mov	r0, r4
 800816e:	f7ff ff5d 	bl	800802c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008172:	4620      	mov	r0, r4
 8008174:	f7ff ff5c 	bl	8008030 <HAL_TIM_PWM_PulseFinishedCallback>
 8008178:	e7a3      	b.n	80080c2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817a:	4620      	mov	r0, r4
 800817c:	f7ff ff56 	bl	800802c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008180:	4620      	mov	r0, r4
 8008182:	f7ff ff55 	bl	8008030 <HAL_TIM_PWM_PulseFinishedCallback>
 8008186:	e7b4      	b.n	80080f2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008188:	f06f 0201 	mvn.w	r2, #1
 800818c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800818e:	4620      	mov	r0, r4
 8008190:	f7ff ff4b 	bl	800802a <HAL_TIM_PeriodElapsedCallback>
 8008194:	e7b8      	b.n	8008108 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008196:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800819a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800819c:	4620      	mov	r0, r4
 800819e:	f000 fae6 	bl	800876e <HAL_TIMEx_BreakCallback>
 80081a2:	e7ba      	b.n	800811a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80081a8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80081aa:	4620      	mov	r0, r4
 80081ac:	f000 fae0 	bl	8008770 <HAL_TIMEx_Break2Callback>
 80081b0:	e7bc      	b.n	800812c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80081b8:	4620      	mov	r0, r4
 80081ba:	f7ff ff3a 	bl	8008032 <HAL_TIM_TriggerCallback>
 80081be:	e7be      	b.n	800813e <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081c0:	f06f 0220 	mvn.w	r2, #32
 80081c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80081c6:	4620      	mov	r0, r4
 80081c8:	f000 fad0 	bl	800876c <HAL_TIMEx_CommutCallback>
}
 80081cc:	e7c0      	b.n	8008150 <HAL_TIM_IRQHandler+0x11c>
	...

080081d0 <TIM_Base_SetConfig>:
{
 80081d0:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 80081d2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081d4:	4c37      	ldr	r4, [pc, #220]	; (80082b4 <TIM_Base_SetConfig+0xe4>)
 80081d6:	42a0      	cmp	r0, r4
 80081d8:	bf14      	ite	ne
 80081da:	2400      	movne	r4, #0
 80081dc:	2401      	moveq	r4, #1
 80081de:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80081e2:	bf14      	ite	ne
 80081e4:	4622      	movne	r2, r4
 80081e6:	f044 0201 	orreq.w	r2, r4, #1
 80081ea:	b9aa      	cbnz	r2, 8008218 <TIM_Base_SetConfig+0x48>
 80081ec:	4d32      	ldr	r5, [pc, #200]	; (80082b8 <TIM_Base_SetConfig+0xe8>)
 80081ee:	42a8      	cmp	r0, r5
 80081f0:	bf14      	ite	ne
 80081f2:	2500      	movne	r5, #0
 80081f4:	2501      	moveq	r5, #1
 80081f6:	4e31      	ldr	r6, [pc, #196]	; (80082bc <TIM_Base_SetConfig+0xec>)
 80081f8:	42b0      	cmp	r0, r6
 80081fa:	d00d      	beq.n	8008218 <TIM_Base_SetConfig+0x48>
 80081fc:	b965      	cbnz	r5, 8008218 <TIM_Base_SetConfig+0x48>
 80081fe:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8008202:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8008206:	42a8      	cmp	r0, r5
 8008208:	bf14      	ite	ne
 800820a:	2500      	movne	r5, #0
 800820c:	2501      	moveq	r5, #1
 800820e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008212:	42b0      	cmp	r0, r6
 8008214:	d000      	beq.n	8008218 <TIM_Base_SetConfig+0x48>
 8008216:	b11d      	cbz	r5, 8008220 <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800821c:	684d      	ldr	r5, [r1, #4]
 800821e:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008220:	bb12      	cbnz	r2, 8008268 <TIM_Base_SetConfig+0x98>
 8008222:	4a25      	ldr	r2, [pc, #148]	; (80082b8 <TIM_Base_SetConfig+0xe8>)
 8008224:	4290      	cmp	r0, r2
 8008226:	bf14      	ite	ne
 8008228:	2200      	movne	r2, #0
 800822a:	2201      	moveq	r2, #1
 800822c:	4d23      	ldr	r5, [pc, #140]	; (80082bc <TIM_Base_SetConfig+0xec>)
 800822e:	42a8      	cmp	r0, r5
 8008230:	d01a      	beq.n	8008268 <TIM_Base_SetConfig+0x98>
 8008232:	b9ca      	cbnz	r2, 8008268 <TIM_Base_SetConfig+0x98>
 8008234:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008238:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800823c:	4290      	cmp	r0, r2
 800823e:	bf14      	ite	ne
 8008240:	2200      	movne	r2, #0
 8008242:	2201      	moveq	r2, #1
 8008244:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008248:	42a8      	cmp	r0, r5
 800824a:	d00d      	beq.n	8008268 <TIM_Base_SetConfig+0x98>
 800824c:	b962      	cbnz	r2, 8008268 <TIM_Base_SetConfig+0x98>
 800824e:	4a1c      	ldr	r2, [pc, #112]	; (80082c0 <TIM_Base_SetConfig+0xf0>)
 8008250:	4290      	cmp	r0, r2
 8008252:	bf14      	ite	ne
 8008254:	2200      	movne	r2, #0
 8008256:	2201      	moveq	r2, #1
 8008258:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 800825c:	42a8      	cmp	r0, r5
 800825e:	d003      	beq.n	8008268 <TIM_Base_SetConfig+0x98>
 8008260:	b912      	cbnz	r2, 8008268 <TIM_Base_SetConfig+0x98>
 8008262:	4a18      	ldr	r2, [pc, #96]	; (80082c4 <TIM_Base_SetConfig+0xf4>)
 8008264:	4290      	cmp	r0, r2
 8008266:	d103      	bne.n	8008270 <TIM_Base_SetConfig+0xa0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800826c:	68ca      	ldr	r2, [r1, #12]
 800826e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008274:	694a      	ldr	r2, [r1, #20]
 8008276:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008278:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800827a:	688a      	ldr	r2, [r1, #8]
 800827c:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800827e:	680a      	ldr	r2, [r1, #0]
 8008280:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008282:	4b11      	ldr	r3, [pc, #68]	; (80082c8 <TIM_Base_SetConfig+0xf8>)
 8008284:	4298      	cmp	r0, r3
 8008286:	bf14      	ite	ne
 8008288:	4623      	movne	r3, r4
 800828a:	f044 0301 	orreq.w	r3, r4, #1
 800828e:	b95b      	cbnz	r3, 80082a8 <TIM_Base_SetConfig+0xd8>
 8008290:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <TIM_Base_SetConfig+0xf0>)
 8008292:	4298      	cmp	r0, r3
 8008294:	bf14      	ite	ne
 8008296:	2300      	movne	r3, #0
 8008298:	2301      	moveq	r3, #1
 800829a:	4a0c      	ldr	r2, [pc, #48]	; (80082cc <TIM_Base_SetConfig+0xfc>)
 800829c:	4290      	cmp	r0, r2
 800829e:	d003      	beq.n	80082a8 <TIM_Base_SetConfig+0xd8>
 80082a0:	b913      	cbnz	r3, 80082a8 <TIM_Base_SetConfig+0xd8>
 80082a2:	4b08      	ldr	r3, [pc, #32]	; (80082c4 <TIM_Base_SetConfig+0xf4>)
 80082a4:	4298      	cmp	r0, r3
 80082a6:	d101      	bne.n	80082ac <TIM_Base_SetConfig+0xdc>
    TIMx->RCR = Structure->RepetitionCounter;
 80082a8:	690b      	ldr	r3, [r1, #16]
 80082aa:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80082ac:	2301      	movs	r3, #1
 80082ae:	6143      	str	r3, [r0, #20]
}
 80082b0:	bc70      	pop	{r4, r5, r6}
 80082b2:	4770      	bx	lr
 80082b4:	40010000 	.word	0x40010000
 80082b8:	40000800 	.word	0x40000800
 80082bc:	40000400 	.word	0x40000400
 80082c0:	40014400 	.word	0x40014400
 80082c4:	40014800 	.word	0x40014800
 80082c8:	40010400 	.word	0x40010400
 80082cc:	40014000 	.word	0x40014000

080082d0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80082d0:	b358      	cbz	r0, 800832a <HAL_TIM_Base_Init+0x5a>
{
 80082d2:	b510      	push	{r4, lr}
 80082d4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80082d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80082da:	b30b      	cbz	r3, 8008320 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80082dc:	2302      	movs	r3, #2
 80082de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082e2:	1d21      	adds	r1, r4, #4
 80082e4:	6820      	ldr	r0, [r4, #0]
 80082e6:	f7ff ff73 	bl	80081d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082ea:	2301      	movs	r3, #1
 80082ec:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80082f4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80082f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80082fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008308:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800830c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008310:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008314:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008318:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800831c:	2000      	movs	r0, #0
}
 800831e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008320:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008324:	f004 fef8 	bl	800d118 <HAL_TIM_Base_MspInit>
 8008328:	e7d8      	b.n	80082dc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800832a:	2001      	movs	r0, #1
}
 800832c:	4770      	bx	lr

0800832e <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800832e:	b358      	cbz	r0, 8008388 <HAL_TIM_IC_Init+0x5a>
{
 8008330:	b510      	push	{r4, lr}
 8008332:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8008334:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008338:	b30b      	cbz	r3, 800837e <HAL_TIM_IC_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800833a:	2302      	movs	r3, #2
 800833c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008340:	1d21      	adds	r1, r4, #4
 8008342:	6820      	ldr	r0, [r4, #0]
 8008344:	f7ff ff44 	bl	80081d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008348:	2301      	movs	r3, #1
 800834a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800834e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008352:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008356:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800835a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800835e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008366:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800836a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800836e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008372:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008376:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800837a:	2000      	movs	r0, #0
}
 800837c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800837e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8008382:	f7ff fe51 	bl	8008028 <HAL_TIM_IC_MspInit>
 8008386:	e7d8      	b.n	800833a <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8008388:	2001      	movs	r0, #1
}
 800838a:	4770      	bx	lr

0800838c <TIM_TI1_SetConfig>:
{
 800838c:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800838e:	6a04      	ldr	r4, [r0, #32]
 8008390:	f024 0401 	bic.w	r4, r4, #1
 8008394:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008396:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8008398:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800839a:	4e1d      	ldr	r6, [pc, #116]	; (8008410 <TIM_TI1_SetConfig+0x84>)
 800839c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80083a0:	bf18      	it	ne
 80083a2:	42b0      	cmpne	r0, r6
 80083a4:	d023      	beq.n	80083ee <TIM_TI1_SetConfig+0x62>
 80083a6:	f5a6 4678 	sub.w	r6, r6, #63488	; 0xf800
 80083aa:	42b0      	cmp	r0, r6
 80083ac:	bf14      	ite	ne
 80083ae:	2600      	movne	r6, #0
 80083b0:	2601      	moveq	r6, #1
 80083b2:	4f18      	ldr	r7, [pc, #96]	; (8008414 <TIM_TI1_SetConfig+0x88>)
 80083b4:	42b8      	cmp	r0, r7
 80083b6:	d01a      	beq.n	80083ee <TIM_TI1_SetConfig+0x62>
 80083b8:	b9ce      	cbnz	r6, 80083ee <TIM_TI1_SetConfig+0x62>
 80083ba:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80083be:	f506 3682 	add.w	r6, r6, #66560	; 0x10400
 80083c2:	42b0      	cmp	r0, r6
 80083c4:	bf14      	ite	ne
 80083c6:	2600      	movne	r6, #0
 80083c8:	2601      	moveq	r6, #1
 80083ca:	f507 6700 	add.w	r7, r7, #2048	; 0x800
 80083ce:	42b8      	cmp	r0, r7
 80083d0:	d00d      	beq.n	80083ee <TIM_TI1_SetConfig+0x62>
 80083d2:	b966      	cbnz	r6, 80083ee <TIM_TI1_SetConfig+0x62>
 80083d4:	4e10      	ldr	r6, [pc, #64]	; (8008418 <TIM_TI1_SetConfig+0x8c>)
 80083d6:	42b0      	cmp	r0, r6
 80083d8:	bf14      	ite	ne
 80083da:	2600      	movne	r6, #0
 80083dc:	2601      	moveq	r6, #1
 80083de:	f507 6740 	add.w	r7, r7, #3072	; 0xc00
 80083e2:	42b8      	cmp	r0, r7
 80083e4:	d003      	beq.n	80083ee <TIM_TI1_SetConfig+0x62>
 80083e6:	b916      	cbnz	r6, 80083ee <TIM_TI1_SetConfig+0x62>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80083e8:	f044 0201 	orr.w	r2, r4, #1
 80083ec:	e002      	b.n	80083f4 <TIM_TI1_SetConfig+0x68>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80083ee:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80083f2:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083f4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80083f8:	011b      	lsls	r3, r3, #4
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083fe:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008402:	f001 010a 	and.w	r1, r1, #10
 8008406:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8008408:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800840a:	6201      	str	r1, [r0, #32]
}
 800840c:	bcf0      	pop	{r4, r5, r6, r7}
 800840e:	4770      	bx	lr
 8008410:	40010000 	.word	0x40010000
 8008414:	40000400 	.word	0x40000400
 8008418:	40014000 	.word	0x40014000

0800841c <HAL_TIM_IC_ConfigChannel>:
{
 800841c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800841e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008422:	2b01      	cmp	r3, #1
 8008424:	d052      	beq.n	80084cc <HAL_TIM_IC_ConfigChannel+0xb0>
 8008426:	460d      	mov	r5, r1
 8008428:	4604      	mov	r4, r0
 800842a:	2301      	movs	r3, #1
 800842c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8008430:	b1c2      	cbz	r2, 8008464 <HAL_TIM_IC_ConfigChannel+0x48>
  else if (Channel == TIM_CHANNEL_2)
 8008432:	2a04      	cmp	r2, #4
 8008434:	d027      	beq.n	8008486 <HAL_TIM_IC_ConfigChannel+0x6a>
  else if (Channel == TIM_CHANNEL_3)
 8008436:	2a08      	cmp	r2, #8
 8008438:	d037      	beq.n	80084aa <HAL_TIM_IC_ConfigChannel+0x8e>
    TIM_TI4_SetConfig(htim->Instance,
 800843a:	68cb      	ldr	r3, [r1, #12]
 800843c:	684a      	ldr	r2, [r1, #4]
 800843e:	6809      	ldr	r1, [r1, #0]
 8008440:	6800      	ldr	r0, [r0, #0]
 8008442:	f7ff fdcd 	bl	8007fe0 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008446:	6822      	ldr	r2, [r4, #0]
 8008448:	69d3      	ldr	r3, [r2, #28]
 800844a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800844e:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008450:	6822      	ldr	r2, [r4, #0]
 8008452:	69d3      	ldr	r3, [r2, #28]
 8008454:	68a9      	ldr	r1, [r5, #8]
 8008456:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800845a:	61d3      	str	r3, [r2, #28]
  __HAL_UNLOCK(htim);
 800845c:	2000      	movs	r0, #0
 800845e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8008462:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8008464:	68cb      	ldr	r3, [r1, #12]
 8008466:	684a      	ldr	r2, [r1, #4]
 8008468:	6809      	ldr	r1, [r1, #0]
 800846a:	6800      	ldr	r0, [r0, #0]
 800846c:	f7ff ff8e 	bl	800838c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008470:	6822      	ldr	r2, [r4, #0]
 8008472:	6993      	ldr	r3, [r2, #24]
 8008474:	f023 030c 	bic.w	r3, r3, #12
 8008478:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800847a:	6822      	ldr	r2, [r4, #0]
 800847c:	6993      	ldr	r3, [r2, #24]
 800847e:	68a9      	ldr	r1, [r5, #8]
 8008480:	430b      	orrs	r3, r1
 8008482:	6193      	str	r3, [r2, #24]
 8008484:	e7ea      	b.n	800845c <HAL_TIM_IC_ConfigChannel+0x40>
    TIM_TI2_SetConfig(htim->Instance,
 8008486:	68cb      	ldr	r3, [r1, #12]
 8008488:	684a      	ldr	r2, [r1, #4]
 800848a:	6809      	ldr	r1, [r1, #0]
 800848c:	6800      	ldr	r0, [r0, #0]
 800848e:	f7ff fd60 	bl	8007f52 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008492:	6822      	ldr	r2, [r4, #0]
 8008494:	6993      	ldr	r3, [r2, #24]
 8008496:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800849a:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800849c:	6822      	ldr	r2, [r4, #0]
 800849e:	6993      	ldr	r3, [r2, #24]
 80084a0:	68a9      	ldr	r1, [r5, #8]
 80084a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80084a6:	6193      	str	r3, [r2, #24]
 80084a8:	e7d8      	b.n	800845c <HAL_TIM_IC_ConfigChannel+0x40>
    TIM_TI3_SetConfig(htim->Instance,
 80084aa:	68cb      	ldr	r3, [r1, #12]
 80084ac:	684a      	ldr	r2, [r1, #4]
 80084ae:	6809      	ldr	r1, [r1, #0]
 80084b0:	6800      	ldr	r0, [r0, #0]
 80084b2:	f7ff fd7c 	bl	8007fae <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80084b6:	6822      	ldr	r2, [r4, #0]
 80084b8:	69d3      	ldr	r3, [r2, #28]
 80084ba:	f023 030c 	bic.w	r3, r3, #12
 80084be:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80084c0:	6822      	ldr	r2, [r4, #0]
 80084c2:	69d3      	ldr	r3, [r2, #28]
 80084c4:	68a9      	ldr	r1, [r5, #8]
 80084c6:	430b      	orrs	r3, r1
 80084c8:	61d3      	str	r3, [r2, #28]
 80084ca:	e7c7      	b.n	800845c <HAL_TIM_IC_ConfigChannel+0x40>
  __HAL_LOCK(htim);
 80084cc:	2002      	movs	r0, #2
 80084ce:	e7c8      	b.n	8008462 <HAL_TIM_IC_ConfigChannel+0x46>

080084d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084d0:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084d2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084d4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084d8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80084dc:	430b      	orrs	r3, r1
 80084de:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084e0:	6083      	str	r3, [r0, #8]
}
 80084e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80084e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d074      	beq.n	80085da <HAL_TIM_ConfigClockSource+0xf2>
{
 80084f0:	b510      	push	{r4, lr}
 80084f2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80084f4:	2301      	movs	r3, #1
 80084f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80084fa:	2302      	movs	r3, #2
 80084fc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8008500:	6802      	ldr	r2, [r0, #0]
 8008502:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008504:	4b36      	ldr	r3, [pc, #216]	; (80085e0 <HAL_TIM_ConfigClockSource+0xf8>)
 8008506:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8008508:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800850a:	680b      	ldr	r3, [r1, #0]
 800850c:	2b60      	cmp	r3, #96	; 0x60
 800850e:	d050      	beq.n	80085b2 <HAL_TIM_ConfigClockSource+0xca>
 8008510:	d91d      	bls.n	800854e <HAL_TIM_ConfigClockSource+0x66>
 8008512:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008516:	d02e      	beq.n	8008576 <HAL_TIM_ConfigClockSource+0x8e>
 8008518:	d835      	bhi.n	8008586 <HAL_TIM_ConfigClockSource+0x9e>
 800851a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800851e:	d03c      	beq.n	800859a <HAL_TIM_ConfigClockSource+0xb2>
 8008520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008524:	d027      	beq.n	8008576 <HAL_TIM_ConfigClockSource+0x8e>
 8008526:	2b70      	cmp	r3, #112	; 0x70
 8008528:	d10a      	bne.n	8008540 <HAL_TIM_ConfigClockSource+0x58>
      TIM_ETR_SetConfig(htim->Instance,
 800852a:	68cb      	ldr	r3, [r1, #12]
 800852c:	684a      	ldr	r2, [r1, #4]
 800852e:	6889      	ldr	r1, [r1, #8]
 8008530:	6820      	ldr	r0, [r4, #0]
 8008532:	f7ff ffcd 	bl	80084d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008536:	6822      	ldr	r2, [r4, #0]
 8008538:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800853a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800853e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8008540:	2301      	movs	r3, #1
 8008542:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008546:	2000      	movs	r0, #0
 8008548:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800854c:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800854e:	2b20      	cmp	r3, #32
 8008550:	d011      	beq.n	8008576 <HAL_TIM_ConfigClockSource+0x8e>
 8008552:	d90d      	bls.n	8008570 <HAL_TIM_ConfigClockSource+0x88>
 8008554:	2b40      	cmp	r3, #64	; 0x40
 8008556:	d036      	beq.n	80085c6 <HAL_TIM_ConfigClockSource+0xde>
 8008558:	2b50      	cmp	r3, #80	; 0x50
 800855a:	d111      	bne.n	8008580 <HAL_TIM_ConfigClockSource+0x98>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800855c:	68ca      	ldr	r2, [r1, #12]
 800855e:	6849      	ldr	r1, [r1, #4]
 8008560:	6820      	ldr	r0, [r4, #0]
 8008562:	f7ff fce3 	bl	8007f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008566:	2150      	movs	r1, #80	; 0x50
 8008568:	6820      	ldr	r0, [r4, #0]
 800856a:	f7ff fd53 	bl	8008014 <TIM_ITRx_SetConfig>
      break;
 800856e:	e7e7      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8008570:	b10b      	cbz	r3, 8008576 <HAL_TIM_ConfigClockSource+0x8e>
 8008572:	2b10      	cmp	r3, #16
 8008574:	d1e4      	bne.n	8008540 <HAL_TIM_ConfigClockSource+0x58>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008576:	4619      	mov	r1, r3
 8008578:	6820      	ldr	r0, [r4, #0]
 800857a:	f7ff fd4b 	bl	8008014 <TIM_ITRx_SetConfig>
      break;
 800857e:	e7df      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8008580:	2b30      	cmp	r3, #48	; 0x30
 8008582:	d1dd      	bne.n	8008540 <HAL_TIM_ConfigClockSource+0x58>
 8008584:	e7f7      	b.n	8008576 <HAL_TIM_ConfigClockSource+0x8e>
 8008586:	4a17      	ldr	r2, [pc, #92]	; (80085e4 <HAL_TIM_ConfigClockSource+0xfc>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d0f4      	beq.n	8008576 <HAL_TIM_ConfigClockSource+0x8e>
 800858c:	3210      	adds	r2, #16
 800858e:	4293      	cmp	r3, r2
 8008590:	d0f1      	beq.n	8008576 <HAL_TIM_ConfigClockSource+0x8e>
 8008592:	3a20      	subs	r2, #32
 8008594:	4293      	cmp	r3, r2
 8008596:	d1d3      	bne.n	8008540 <HAL_TIM_ConfigClockSource+0x58>
 8008598:	e7ed      	b.n	8008576 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_ETR_SetConfig(htim->Instance,
 800859a:	68cb      	ldr	r3, [r1, #12]
 800859c:	684a      	ldr	r2, [r1, #4]
 800859e:	6889      	ldr	r1, [r1, #8]
 80085a0:	6820      	ldr	r0, [r4, #0]
 80085a2:	f7ff ff95 	bl	80084d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085a6:	6822      	ldr	r2, [r4, #0]
 80085a8:	6893      	ldr	r3, [r2, #8]
 80085aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085ae:	6093      	str	r3, [r2, #8]
      break;
 80085b0:	e7c6      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085b2:	68ca      	ldr	r2, [r1, #12]
 80085b4:	6849      	ldr	r1, [r1, #4]
 80085b6:	6820      	ldr	r0, [r4, #0]
 80085b8:	f7ff fce5 	bl	8007f86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085bc:	2160      	movs	r1, #96	; 0x60
 80085be:	6820      	ldr	r0, [r4, #0]
 80085c0:	f7ff fd28 	bl	8008014 <TIM_ITRx_SetConfig>
      break;
 80085c4:	e7bc      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085c6:	68ca      	ldr	r2, [r1, #12]
 80085c8:	6849      	ldr	r1, [r1, #4]
 80085ca:	6820      	ldr	r0, [r4, #0]
 80085cc:	f7ff fcae 	bl	8007f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085d0:	2140      	movs	r1, #64	; 0x40
 80085d2:	6820      	ldr	r0, [r4, #0]
 80085d4:	f7ff fd1e 	bl	8008014 <TIM_ITRx_SetConfig>
      break;
 80085d8:	e7b2      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x58>
  __HAL_LOCK(htim);
 80085da:	2002      	movs	r0, #2
}
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	ffce0088 	.word	0xffce0088
 80085e4:	00100030 	.word	0x00100030

080085e8 <TIM_SlaveTimer_SetConfig>:
{
 80085e8:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 80085ea:	6804      	ldr	r4, [r0, #0]
 80085ec:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80085ee:	4a21      	ldr	r2, [pc, #132]	; (8008674 <TIM_SlaveTimer_SetConfig+0x8c>)
 80085f0:	401a      	ands	r2, r3
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80085f2:	684b      	ldr	r3, [r1, #4]
 80085f4:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 80085f6:	4a20      	ldr	r2, [pc, #128]	; (8008678 <TIM_SlaveTimer_SetConfig+0x90>)
 80085f8:	401a      	ands	r2, r3
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80085fa:	680b      	ldr	r3, [r1, #0]
 80085fc:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80085fe:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8008600:	684b      	ldr	r3, [r1, #4]
 8008602:	2b50      	cmp	r3, #80	; 0x50
 8008604:	d023      	beq.n	800864e <TIM_SlaveTimer_SetConfig+0x66>
 8008606:	d90b      	bls.n	8008620 <TIM_SlaveTimer_SetConfig+0x38>
 8008608:	2b60      	cmp	r3, #96	; 0x60
 800860a:	d027      	beq.n	800865c <TIM_SlaveTimer_SetConfig+0x74>
 800860c:	2b70      	cmp	r3, #112	; 0x70
 800860e:	d12c      	bne.n	800866a <TIM_SlaveTimer_SetConfig+0x82>
      TIM_ETR_SetConfig(htim->Instance,
 8008610:	690b      	ldr	r3, [r1, #16]
 8008612:	688a      	ldr	r2, [r1, #8]
 8008614:	68c9      	ldr	r1, [r1, #12]
 8008616:	6800      	ldr	r0, [r0, #0]
 8008618:	f7ff ff5a 	bl	80084d0 <TIM_ETR_SetConfig>
  return HAL_OK;
 800861c:	2000      	movs	r0, #0
}
 800861e:	bd10      	pop	{r4, pc}
  switch (sSlaveConfig->InputTrigger)
 8008620:	2b40      	cmp	r3, #64	; 0x40
 8008622:	d122      	bne.n	800866a <TIM_SlaveTimer_SetConfig+0x82>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008624:	680b      	ldr	r3, [r1, #0]
 8008626:	2b05      	cmp	r3, #5
 8008628:	d021      	beq.n	800866e <TIM_SlaveTimer_SetConfig+0x86>
      tmpccer = htim->Instance->CCER;
 800862a:	6803      	ldr	r3, [r0, #0]
 800862c:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800862e:	6a1a      	ldr	r2, [r3, #32]
 8008630:	f022 0201 	bic.w	r2, r2, #1
 8008634:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008636:	6802      	ldr	r2, [r0, #0]
 8008638:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800863a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800863e:	6909      	ldr	r1, [r1, #16]
 8008640:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8008644:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8008646:	6803      	ldr	r3, [r0, #0]
 8008648:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 800864a:	2000      	movs	r0, #0
      break;
 800864c:	e7e7      	b.n	800861e <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800864e:	690a      	ldr	r2, [r1, #16]
 8008650:	6889      	ldr	r1, [r1, #8]
 8008652:	6800      	ldr	r0, [r0, #0]
 8008654:	f7ff fc6a 	bl	8007f2c <TIM_TI1_ConfigInputStage>
  return HAL_OK;
 8008658:	2000      	movs	r0, #0
      break;
 800865a:	e7e0      	b.n	800861e <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800865c:	690a      	ldr	r2, [r1, #16]
 800865e:	6889      	ldr	r1, [r1, #8]
 8008660:	6800      	ldr	r0, [r0, #0]
 8008662:	f7ff fc90 	bl	8007f86 <TIM_TI2_ConfigInputStage>
  return HAL_OK;
 8008666:	2000      	movs	r0, #0
      break;
 8008668:	e7d9      	b.n	800861e <TIM_SlaveTimer_SetConfig+0x36>
  return HAL_OK;
 800866a:	2000      	movs	r0, #0
 800866c:	e7d7      	b.n	800861e <TIM_SlaveTimer_SetConfig+0x36>
        return HAL_ERROR;
 800866e:	2001      	movs	r0, #1
 8008670:	e7d5      	b.n	800861e <TIM_SlaveTimer_SetConfig+0x36>
 8008672:	bf00      	nop
 8008674:	ffcfff8f 	.word	0xffcfff8f
 8008678:	fffefff8 	.word	0xfffefff8

0800867c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 800867c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008680:	2b01      	cmp	r3, #1
 8008682:	d024      	beq.n	80086ce <HAL_TIM_SlaveConfigSynchro+0x52>
{
 8008684:	b510      	push	{r4, lr}
 8008686:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8008688:	2301      	movs	r3, #1
 800868a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800868e:	2302      	movs	r3, #2
 8008690:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008694:	f7ff ffa8 	bl	80085e8 <TIM_SlaveTimer_SetConfig>
 8008698:	4603      	mov	r3, r0
 800869a:	b988      	cbnz	r0, 80086c0 <HAL_TIM_SlaveConfigSynchro+0x44>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800869c:	6821      	ldr	r1, [r4, #0]
 800869e:	68ca      	ldr	r2, [r1, #12]
 80086a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086a4:	60ca      	str	r2, [r1, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80086a6:	6821      	ldr	r1, [r4, #0]
 80086a8:	68ca      	ldr	r2, [r1, #12]
 80086aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80086ae:	60ca      	str	r2, [r1, #12]
  htim->State = HAL_TIM_STATE_READY;
 80086b0:	2201      	movs	r2, #1
 80086b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80086b6:	2200      	movs	r2, #0
 80086b8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80086bc:	4618      	mov	r0, r3
 80086be:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 80086c0:	2301      	movs	r3, #1
 80086c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80086c6:	2200      	movs	r2, #0
 80086c8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80086cc:	e7f6      	b.n	80086bc <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_LOCK(htim);
 80086ce:	2302      	movs	r3, #2
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	4770      	bx	lr

080086d4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d041      	beq.n	8008760 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
{
 80086dc:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80086de:	2301      	movs	r3, #1
 80086e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e4:	2302      	movs	r3, #2
 80086e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086ea:	6803      	ldr	r3, [r0, #0]
 80086ec:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086ee:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086f0:	4e1c      	ldr	r6, [pc, #112]	; (8008764 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 80086f2:	4c1d      	ldr	r4, [pc, #116]	; (8008768 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 80086f4:	42a3      	cmp	r3, r4
 80086f6:	bf18      	it	ne
 80086f8:	42b3      	cmpne	r3, r6
 80086fa:	d103      	bne.n	8008704 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086fc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008700:	684c      	ldr	r4, [r1, #4]
 8008702:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008704:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008708:	680c      	ldr	r4, [r1, #0]
 800870a:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800870c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800870e:	6803      	ldr	r3, [r0, #0]
 8008710:	4a14      	ldr	r2, [pc, #80]	; (8008764 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8008712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008716:	bf18      	it	ne
 8008718:	4293      	cmpne	r3, r2
 800871a:	d013      	beq.n	8008744 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800871c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008720:	4293      	cmp	r3, r2
 8008722:	d00f      	beq.n	8008744 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8008724:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008728:	4293      	cmp	r3, r2
 800872a:	d00b      	beq.n	8008744 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800872c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008730:	4293      	cmp	r3, r2
 8008732:	d007      	beq.n	8008744 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8008734:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008738:	4293      	cmp	r3, r2
 800873a:	d003      	beq.n	8008744 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800873c:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8008740:	4293      	cmp	r3, r2
 8008742:	d104      	bne.n	800874e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008744:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008748:	688a      	ldr	r2, [r1, #8]
 800874a:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800874c:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800874e:	2301      	movs	r3, #1
 8008750:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008754:	2300      	movs	r3, #0
 8008756:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800875a:	4618      	mov	r0, r3
}
 800875c:	bc70      	pop	{r4, r5, r6}
 800875e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008760:	2002      	movs	r0, #2
}
 8008762:	4770      	bx	lr
 8008764:	40010000 	.word	0x40010000
 8008768:	40010400 	.word	0x40010400

0800876c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800876c:	4770      	bx	lr

0800876e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800876e:	4770      	bx	lr

08008770 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008770:	4770      	bx	lr

08008772 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008772:	6802      	ldr	r2, [r0, #0]
 8008774:	6813      	ldr	r3, [r2, #0]
 8008776:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800877a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800877c:	6802      	ldr	r2, [r0, #0]
 800877e:	6893      	ldr	r3, [r2, #8]
 8008780:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008784:	6093      	str	r3, [r2, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008786:	2320      	movs	r3, #32
 8008788:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800878c:	4770      	bx	lr
	...

08008790 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008790:	6802      	ldr	r2, [r0, #0]
 8008792:	6813      	ldr	r3, [r2, #0]
 8008794:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008798:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800879a:	6802      	ldr	r2, [r0, #0]
 800879c:	6891      	ldr	r1, [r2, #8]
 800879e:	4b04      	ldr	r3, [pc, #16]	; (80087b0 <UART_EndRxTransfer+0x20>)
 80087a0:	400b      	ands	r3, r1
 80087a2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087a4:	2320      	movs	r3, #32
 80087a6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 80087ae:	4770      	bx	lr
 80087b0:	effffffe 	.word	0xeffffffe

080087b4 <HAL_UART_Transmit_DMA>:
{
 80087b4:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80087b6:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 80087ba:	2c20      	cmp	r4, #32
 80087bc:	d146      	bne.n	800884c <HAL_UART_Transmit_DMA+0x98>
    if ((pData == NULL) || (Size == 0U))
 80087be:	fab2 f582 	clz	r5, r2
 80087c2:	096d      	lsrs	r5, r5, #5
 80087c4:	2900      	cmp	r1, #0
 80087c6:	bf08      	it	eq
 80087c8:	2501      	moveq	r5, #1
 80087ca:	2d00      	cmp	r5, #0
 80087cc:	d140      	bne.n	8008850 <HAL_UART_Transmit_DMA+0x9c>
    __HAL_LOCK(huart);
 80087ce:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d03e      	beq.n	8008854 <HAL_UART_Transmit_DMA+0xa0>
 80087d6:	4613      	mov	r3, r2
 80087d8:	4604      	mov	r4, r0
 80087da:	2201      	movs	r2, #1
 80087dc:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 80087e0:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 80087e2:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 80087e6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ea:	2200      	movs	r2, #0
 80087ec:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087f0:	2221      	movs	r2, #33	; 0x21
 80087f2:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    if (huart->hdmatx != NULL)
 80087f6:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80087f8:	b18a      	cbz	r2, 800881e <HAL_UART_Transmit_DMA+0x6a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80087fa:	4917      	ldr	r1, [pc, #92]	; (8008858 <HAL_UART_Transmit_DMA+0xa4>)
 80087fc:	63d1      	str	r1, [r2, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80087fe:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8008800:	4916      	ldr	r1, [pc, #88]	; (800885c <HAL_UART_Transmit_DMA+0xa8>)
 8008802:	6411      	str	r1, [r2, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008804:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8008806:	4916      	ldr	r1, [pc, #88]	; (8008860 <HAL_UART_Transmit_DMA+0xac>)
 8008808:	64d1      	str	r1, [r2, #76]	; 0x4c
      huart->hdmatx->XferAbortCallback = NULL;
 800880a:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800880c:	2100      	movs	r1, #0
 800880e:	6511      	str	r1, [r2, #80]	; 0x50
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008810:	6802      	ldr	r2, [r0, #0]
 8008812:	3228      	adds	r2, #40	; 0x28
 8008814:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8008816:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8008818:	f7f8 fbf8 	bl	800100c <HAL_DMA_Start_IT>
 800881c:	b958      	cbnz	r0, 8008836 <HAL_UART_Transmit_DMA+0x82>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	2240      	movs	r2, #64	; 0x40
 8008822:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8008824:	2000      	movs	r0, #0
 8008826:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800882a:	6822      	ldr	r2, [r4, #0]
 800882c:	6893      	ldr	r3, [r2, #8]
 800882e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008832:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 8008834:	e00b      	b.n	800884e <HAL_UART_Transmit_DMA+0x9a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008836:	2310      	movs	r3, #16
 8008838:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800883c:	2300      	movs	r3, #0
 800883e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8008842:	2320      	movs	r3, #32
 8008844:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        return HAL_ERROR;
 8008848:	2001      	movs	r0, #1
 800884a:	e000      	b.n	800884e <HAL_UART_Transmit_DMA+0x9a>
    return HAL_BUSY;
 800884c:	2002      	movs	r0, #2
}
 800884e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8008850:	2001      	movs	r0, #1
 8008852:	e7fc      	b.n	800884e <HAL_UART_Transmit_DMA+0x9a>
    __HAL_LOCK(huart);
 8008854:	2002      	movs	r0, #2
 8008856:	e7fa      	b.n	800884e <HAL_UART_Transmit_DMA+0x9a>
 8008858:	08008867 	.word	0x08008867
 800885c:	080088b5 	.word	0x080088b5
 8008860:	080088c1 	.word	0x080088c1

08008864 <HAL_UART_TxCpltCallback>:
}
 8008864:	4770      	bx	lr

08008866 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008866:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008868:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800886a:	69c2      	ldr	r2, [r0, #28]
 800886c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008870:	d00d      	beq.n	800888e <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 8008872:	2200      	movs	r2, #0
 8008874:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008878:	6819      	ldr	r1, [r3, #0]
 800887a:	688a      	ldr	r2, [r1, #8]
 800887c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008880:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	6813      	ldr	r3, [r2, #0]
 8008886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800888a:	6013      	str	r3, [r2, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800888c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800888e:	4618      	mov	r0, r3
 8008890:	f7ff ffe8 	bl	8008864 <HAL_UART_TxCpltCallback>
}
 8008894:	e7fa      	b.n	800888c <UART_DMATransmitCplt+0x26>

08008896 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008896:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008898:	6801      	ldr	r1, [r0, #0]
 800889a:	680a      	ldr	r2, [r1, #0]
 800889c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088a0:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088a2:	2220      	movs	r2, #32
 80088a4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088a8:	2200      	movs	r2, #0
 80088aa:	6702      	str	r2, [r0, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088ac:	f7ff ffda 	bl	8008864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088b0:	bd08      	pop	{r3, pc}

080088b2 <HAL_UART_TxHalfCpltCallback>:
}
 80088b2:	4770      	bx	lr

080088b4 <UART_DMATxHalfCplt>:
{
 80088b4:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80088b6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80088b8:	f7ff fffb 	bl	80088b2 <HAL_UART_TxHalfCpltCallback>
}
 80088bc:	bd08      	pop	{r3, pc}

080088be <HAL_UART_ErrorCallback>:
}
 80088be:	4770      	bx	lr

080088c0 <UART_DMAError>:
{
 80088c0:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088c2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80088c4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088c8:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80088d4:	d001      	beq.n	80088da <UART_DMAError+0x1a>
 80088d6:	2a21      	cmp	r2, #33	; 0x21
 80088d8:	d010      	beq.n	80088fc <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80088e2:	d001      	beq.n	80088e8 <UART_DMAError+0x28>
 80088e4:	2d22      	cmp	r5, #34	; 0x22
 80088e6:	d010      	beq.n	800890a <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088e8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80088ec:	f043 0310 	orr.w	r3, r3, #16
 80088f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  HAL_UART_ErrorCallback(huart);
 80088f4:	4620      	mov	r0, r4
 80088f6:	f7ff ffe2 	bl	80088be <HAL_UART_ErrorCallback>
}
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80088fc:	2300      	movs	r3, #0
 80088fe:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008902:	4620      	mov	r0, r4
 8008904:	f7ff ff35 	bl	8008772 <UART_EndTxTransfer>
 8008908:	e7e7      	b.n	80088da <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800890a:	2300      	movs	r3, #0
 800890c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008910:	4620      	mov	r0, r4
 8008912:	f7ff ff3d 	bl	8008790 <UART_EndRxTransfer>
 8008916:	e7e7      	b.n	80088e8 <UART_DMAError+0x28>

08008918 <HAL_UART_IRQHandler>:
{
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800891c:	6801      	ldr	r1, [r0, #0]
 800891e:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008920:	680d      	ldr	r5, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008922:	6888      	ldr	r0, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008924:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8008928:	401a      	ands	r2, r3
 800892a:	d10d      	bne.n	8008948 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800892c:	f013 0f20 	tst.w	r3, #32
 8008930:	d00a      	beq.n	8008948 <HAL_UART_IRQHandler+0x30>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008932:	f015 0f20 	tst.w	r5, #32
 8008936:	d102      	bne.n	800893e <HAL_UART_IRQHandler+0x26>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008938:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 800893c:	d004      	beq.n	8008948 <HAL_UART_IRQHandler+0x30>
      if (huart->RxISR != NULL)
 800893e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008940:	b10b      	cbz	r3, 8008946 <HAL_UART_IRQHandler+0x2e>
        huart->RxISR(huart);
 8008942:	4620      	mov	r0, r4
 8008944:	4798      	blx	r3
}
 8008946:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != 0U)
 8008948:	2a00      	cmp	r2, #0
 800894a:	f000 8095 	beq.w	8008a78 <HAL_UART_IRQHandler+0x160>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800894e:	4a68      	ldr	r2, [pc, #416]	; (8008af0 <HAL_UART_IRQHandler+0x1d8>)
 8008950:	4002      	ands	r2, r0
 8008952:	d103      	bne.n	800895c <HAL_UART_IRQHandler+0x44>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008954:	4e67      	ldr	r6, [pc, #412]	; (8008af4 <HAL_UART_IRQHandler+0x1dc>)
 8008956:	4235      	tst	r5, r6
 8008958:	f000 808e 	beq.w	8008a78 <HAL_UART_IRQHandler+0x160>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800895c:	f013 0f01 	tst.w	r3, #1
 8008960:	d009      	beq.n	8008976 <HAL_UART_IRQHandler+0x5e>
 8008962:	f415 7f80 	tst.w	r5, #256	; 0x100
 8008966:	d006      	beq.n	8008976 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008968:	2601      	movs	r6, #1
 800896a:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800896c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8008970:	4331      	orrs	r1, r6
 8008972:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008976:	f013 0f02 	tst.w	r3, #2
 800897a:	d00b      	beq.n	8008994 <HAL_UART_IRQHandler+0x7c>
 800897c:	f010 0f01 	tst.w	r0, #1
 8008980:	d008      	beq.n	8008994 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008982:	6821      	ldr	r1, [r4, #0]
 8008984:	2602      	movs	r6, #2
 8008986:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008988:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800898c:	f041 0104 	orr.w	r1, r1, #4
 8008990:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008994:	f013 0f04 	tst.w	r3, #4
 8008998:	d00b      	beq.n	80089b2 <HAL_UART_IRQHandler+0x9a>
 800899a:	f010 0f01 	tst.w	r0, #1
 800899e:	d008      	beq.n	80089b2 <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089a0:	6821      	ldr	r1, [r4, #0]
 80089a2:	2604      	movs	r6, #4
 80089a4:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089a6:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80089aa:	f041 0102 	orr.w	r1, r1, #2
 80089ae:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_ORE) != 0U)
 80089b2:	f013 0f08 	tst.w	r3, #8
 80089b6:	d00b      	beq.n	80089d0 <HAL_UART_IRQHandler+0xb8>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80089b8:	f015 0f20 	tst.w	r5, #32
 80089bc:	d100      	bne.n	80089c0 <HAL_UART_IRQHandler+0xa8>
 80089be:	b13a      	cbz	r2, 80089d0 <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089c0:	6822      	ldr	r2, [r4, #0]
 80089c2:	2108      	movs	r1, #8
 80089c4:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089c6:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80089ca:	430a      	orrs	r2, r1
 80089cc:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80089d0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80089d4:	d00c      	beq.n	80089f0 <HAL_UART_IRQHandler+0xd8>
 80089d6:	f015 6f80 	tst.w	r5, #67108864	; 0x4000000
 80089da:	d009      	beq.n	80089f0 <HAL_UART_IRQHandler+0xd8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089dc:	6822      	ldr	r2, [r4, #0]
 80089de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80089e2:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80089e4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80089e8:	f042 0220 	orr.w	r2, r2, #32
 80089ec:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089f0:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80089f4:	2a00      	cmp	r2, #0
 80089f6:	d0a6      	beq.n	8008946 <HAL_UART_IRQHandler+0x2e>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80089f8:	f013 0f20 	tst.w	r3, #32
 80089fc:	d009      	beq.n	8008a12 <HAL_UART_IRQHandler+0xfa>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80089fe:	f015 0f20 	tst.w	r5, #32
 8008a02:	d102      	bne.n	8008a0a <HAL_UART_IRQHandler+0xf2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a04:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8008a08:	d003      	beq.n	8008a12 <HAL_UART_IRQHandler+0xfa>
        if (huart->RxISR != NULL)
 8008a0a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008a0c:	b10b      	cbz	r3, 8008a12 <HAL_UART_IRQHandler+0xfa>
          huart->RxISR(huart);
 8008a0e:	4620      	mov	r0, r4
 8008a10:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8008a12:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008a1e:	d102      	bne.n	8008a26 <HAL_UART_IRQHandler+0x10e>
 8008a20:	f012 0f28 	tst.w	r2, #40	; 0x28
 8008a24:	d021      	beq.n	8008a6a <HAL_UART_IRQHandler+0x152>
        UART_EndRxTransfer(huart);
 8008a26:	4620      	mov	r0, r4
 8008a28:	f7ff feb2 	bl	8008790 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	689a      	ldr	r2, [r3, #8]
 8008a30:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008a34:	d015      	beq.n	8008a62 <HAL_UART_IRQHandler+0x14a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a36:	689a      	ldr	r2, [r3, #8]
 8008a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a3c:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8008a3e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008a40:	b15b      	cbz	r3, 8008a5a <HAL_UART_IRQHandler+0x142>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a42:	4a2d      	ldr	r2, [pc, #180]	; (8008af8 <HAL_UART_IRQHandler+0x1e0>)
 8008a44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a46:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8008a48:	f7f8 fdcc 	bl	80015e4 <HAL_DMA_Abort_IT>
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	f43f af7a 	beq.w	8008946 <HAL_UART_IRQHandler+0x2e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a52:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8008a54:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008a56:	4798      	blx	r3
 8008a58:	e775      	b.n	8008946 <HAL_UART_IRQHandler+0x2e>
            HAL_UART_ErrorCallback(huart);
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f7ff ff2f 	bl	80088be <HAL_UART_ErrorCallback>
 8008a60:	e771      	b.n	8008946 <HAL_UART_IRQHandler+0x2e>
          HAL_UART_ErrorCallback(huart);
 8008a62:	4620      	mov	r0, r4
 8008a64:	f7ff ff2b 	bl	80088be <HAL_UART_ErrorCallback>
 8008a68:	e76d      	b.n	8008946 <HAL_UART_IRQHandler+0x2e>
        HAL_UART_ErrorCallback(huart);
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f7ff ff27 	bl	80088be <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a70:	2300      	movs	r3, #0
 8008a72:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8008a76:	e766      	b.n	8008946 <HAL_UART_IRQHandler+0x2e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a78:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008a7c:	d002      	beq.n	8008a84 <HAL_UART_IRQHandler+0x16c>
 8008a7e:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8008a82:	d10f      	bne.n	8008aa4 <HAL_UART_IRQHandler+0x18c>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008a84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a88:	d013      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x19a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008a8a:	f015 0f80 	tst.w	r5, #128	; 0x80
 8008a8e:	d102      	bne.n	8008a96 <HAL_UART_IRQHandler+0x17e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008a90:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8008a94:	d00d      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x19a>
    if (huart->TxISR != NULL)
 8008a96:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f43f af54 	beq.w	8008946 <HAL_UART_IRQHandler+0x2e>
      huart->TxISR(huart);
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	4798      	blx	r3
 8008aa2:	e750      	b.n	8008946 <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008aa4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008aa8:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f000 fca6 	bl	80093fc <HAL_UARTEx_WakeupCallback>
    return;
 8008ab0:	e749      	b.n	8008946 <HAL_UART_IRQHandler+0x2e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ab2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008ab6:	d002      	beq.n	8008abe <HAL_UART_IRQHandler+0x1a6>
 8008ab8:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008abc:	d110      	bne.n	8008ae0 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008abe:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008ac2:	d002      	beq.n	8008aca <HAL_UART_IRQHandler+0x1b2>
 8008ac4:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
 8008ac8:	d10e      	bne.n	8008ae8 <HAL_UART_IRQHandler+0x1d0>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008aca:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8008ace:	f43f af3a 	beq.w	8008946 <HAL_UART_IRQHandler+0x2e>
 8008ad2:	2d00      	cmp	r5, #0
 8008ad4:	f6bf af37 	bge.w	8008946 <HAL_UART_IRQHandler+0x2e>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f000 fc90 	bl	80093fe <HAL_UARTEx_RxFifoFullCallback>
    return;
 8008ade:	e732      	b.n	8008946 <HAL_UART_IRQHandler+0x2e>
    UART_EndTransmit_IT(huart);
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f7ff fed8 	bl	8008896 <UART_EndTransmit_IT>
    return;
 8008ae6:	e72e      	b.n	8008946 <HAL_UART_IRQHandler+0x2e>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 fc89 	bl	8009400 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8008aee:	e72a      	b.n	8008946 <HAL_UART_IRQHandler+0x2e>
 8008af0:	10000001 	.word	0x10000001
 8008af4:	04000120 	.word	0x04000120
 8008af8:	08008afd 	.word	0x08008afd

08008afc <UART_DMAAbortOnError>:
{
 8008afc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008afe:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008b06:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8008b0a:	f7ff fed8 	bl	80088be <HAL_UART_ErrorCallback>
}
 8008b0e:	bd08      	pop	{r3, pc}

08008b10 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8008b10:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  temp2 = huart->RxState;
 8008b14:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
}
 8008b18:	4310      	orrs	r0, r2
 8008b1a:	4770      	bx	lr

08008b1c <UART_SetConfig>:
{
 8008b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b20:	b087      	sub	sp, #28
 8008b22:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b24:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b26:	6883      	ldr	r3, [r0, #8]
 8008b28:	6902      	ldr	r2, [r0, #16]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	6942      	ldr	r2, [r0, #20]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	69c2      	ldr	r2, [r0, #28]
 8008b32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 8008b34:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8008b36:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b38:	6808      	ldr	r0, [r1, #0]
 8008b3a:	4a88      	ldr	r2, [pc, #544]	; (8008d5c <UART_SetConfig+0x240>)
 8008b3c:	4002      	ands	r2, r0
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b42:	6822      	ldr	r2, [r4, #0]
 8008b44:	6853      	ldr	r3, [r2, #4]
 8008b46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008b4a:	68e1      	ldr	r1, [r4, #12]
 8008b4c:	430b      	orrs	r3, r1
 8008b4e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b50:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b52:	6822      	ldr	r2, [r4, #0]
 8008b54:	4b82      	ldr	r3, [pc, #520]	; (8008d60 <UART_SetConfig+0x244>)
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d001      	beq.n	8008b5e <UART_SetConfig+0x42>
    tmpreg |= huart->Init.OneBitSampling;
 8008b5a:	6a23      	ldr	r3, [r4, #32]
 8008b5c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b5e:	6890      	ldr	r0, [r2, #8]
 8008b60:	4b80      	ldr	r3, [pc, #512]	; (8008d64 <UART_SetConfig+0x248>)
 8008b62:	4003      	ands	r3, r0
 8008b64:	430b      	orrs	r3, r1
 8008b66:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b68:	6822      	ldr	r2, [r4, #0]
 8008b6a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008b6c:	f023 030f 	bic.w	r3, r3, #15
 8008b70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008b72:	430b      	orrs	r3, r1
 8008b74:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	4a7b      	ldr	r2, [pc, #492]	; (8008d68 <UART_SetConfig+0x24c>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d01f      	beq.n	8008bbe <UART_SetConfig+0xa2>
 8008b7e:	4a7b      	ldr	r2, [pc, #492]	; (8008d6c <UART_SetConfig+0x250>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d059      	beq.n	8008c38 <UART_SetConfig+0x11c>
 8008b84:	4a7a      	ldr	r2, [pc, #488]	; (8008d70 <UART_SetConfig+0x254>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d070      	beq.n	8008c6c <UART_SetConfig+0x150>
 8008b8a:	4a7a      	ldr	r2, [pc, #488]	; (8008d74 <UART_SetConfig+0x258>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	f000 8087 	beq.w	8008ca0 <UART_SetConfig+0x184>
 8008b92:	4a79      	ldr	r2, [pc, #484]	; (8008d78 <UART_SetConfig+0x25c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	f000 809d 	beq.w	8008cd4 <UART_SetConfig+0x1b8>
 8008b9a:	4a78      	ldr	r2, [pc, #480]	; (8008d7c <UART_SetConfig+0x260>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	f000 80b3 	beq.w	8008d08 <UART_SetConfig+0x1ec>
 8008ba2:	4a77      	ldr	r2, [pc, #476]	; (8008d80 <UART_SetConfig+0x264>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	f000 80f1 	beq.w	8008d8c <UART_SetConfig+0x270>
 8008baa:	4a76      	ldr	r2, [pc, #472]	; (8008d84 <UART_SetConfig+0x268>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	f000 8104 	beq.w	8008dba <UART_SetConfig+0x29e>
 8008bb2:	4a6b      	ldr	r2, [pc, #428]	; (8008d60 <UART_SetConfig+0x244>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	f000 8117 	beq.w	8008de8 <UART_SetConfig+0x2cc>
 8008bba:	2280      	movs	r2, #128	; 0x80
 8008bbc:	e12d      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008bbe:	4a72      	ldr	r2, [pc, #456]	; (8008d88 <UART_SetConfig+0x26c>)
 8008bc0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008bc2:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008bc6:	2a28      	cmp	r2, #40	; 0x28
 8008bc8:	d834      	bhi.n	8008c34 <UART_SetConfig+0x118>
 8008bca:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008bce:	0029      	.short	0x0029
 8008bd0:	00330033 	.word	0x00330033
 8008bd4:	00330033 	.word	0x00330033
 8008bd8:	00330033 	.word	0x00330033
 8008bdc:	01250033 	.word	0x01250033
 8008be0:	00330033 	.word	0x00330033
 8008be4:	00330033 	.word	0x00330033
 8008be8:	00330033 	.word	0x00330033
 8008bec:	002b0033 	.word	0x002b0033
 8008bf0:	00330033 	.word	0x00330033
 8008bf4:	00330033 	.word	0x00330033
 8008bf8:	00330033 	.word	0x00330033
 8008bfc:	002d0033 	.word	0x002d0033
 8008c00:	00330033 	.word	0x00330033
 8008c04:	00330033 	.word	0x00330033
 8008c08:	00330033 	.word	0x00330033
 8008c0c:	002f0033 	.word	0x002f0033
 8008c10:	00330033 	.word	0x00330033
 8008c14:	00330033 	.word	0x00330033
 8008c18:	00330033 	.word	0x00330033
 8008c1c:	00310033 	.word	0x00310033
 8008c20:	2201      	movs	r2, #1
 8008c22:	e0fa      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008c24:	2208      	movs	r2, #8
 8008c26:	e0f8      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008c28:	2210      	movs	r2, #16
 8008c2a:	e0f6      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008c2c:	2220      	movs	r2, #32
 8008c2e:	e0f4      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008c30:	2240      	movs	r2, #64	; 0x40
 8008c32:	e0f2      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008c34:	2280      	movs	r2, #128	; 0x80
 8008c36:	e0f0      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008c38:	4a53      	ldr	r2, [pc, #332]	; (8008d88 <UART_SetConfig+0x26c>)
 8008c3a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008c3c:	f002 0207 	and.w	r2, r2, #7
 8008c40:	2a05      	cmp	r2, #5
 8008c42:	d811      	bhi.n	8008c68 <UART_SetConfig+0x14c>
 8008c44:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008c48:	01370006 	.word	0x01370006
 8008c4c:	000a0008 	.word	0x000a0008
 8008c50:	000e000c 	.word	0x000e000c
 8008c54:	2200      	movs	r2, #0
 8008c56:	e0e0      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008c58:	2208      	movs	r2, #8
 8008c5a:	e0de      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008c5c:	2210      	movs	r2, #16
 8008c5e:	e0dc      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008c60:	2220      	movs	r2, #32
 8008c62:	e0da      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008c64:	2240      	movs	r2, #64	; 0x40
 8008c66:	e0d8      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008c68:	2280      	movs	r2, #128	; 0x80
 8008c6a:	e0d6      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008c6c:	4a46      	ldr	r2, [pc, #280]	; (8008d88 <UART_SetConfig+0x26c>)
 8008c6e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008c70:	f002 0207 	and.w	r2, r2, #7
 8008c74:	2a05      	cmp	r2, #5
 8008c76:	d811      	bhi.n	8008c9c <UART_SetConfig+0x180>
 8008c78:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008c7c:	011f0006 	.word	0x011f0006
 8008c80:	000a0008 	.word	0x000a0008
 8008c84:	000e000c 	.word	0x000e000c
 8008c88:	2200      	movs	r2, #0
 8008c8a:	e0c6      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008c8c:	2208      	movs	r2, #8
 8008c8e:	e0c4      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008c90:	2210      	movs	r2, #16
 8008c92:	e0c2      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008c94:	2220      	movs	r2, #32
 8008c96:	e0c0      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008c98:	2240      	movs	r2, #64	; 0x40
 8008c9a:	e0be      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008c9c:	2280      	movs	r2, #128	; 0x80
 8008c9e:	e0bc      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008ca0:	4a39      	ldr	r2, [pc, #228]	; (8008d88 <UART_SetConfig+0x26c>)
 8008ca2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008ca4:	f002 0207 	and.w	r2, r2, #7
 8008ca8:	2a05      	cmp	r2, #5
 8008caa:	d811      	bhi.n	8008cd0 <UART_SetConfig+0x1b4>
 8008cac:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008cb0:	01070006 	.word	0x01070006
 8008cb4:	000a0008 	.word	0x000a0008
 8008cb8:	000e000c 	.word	0x000e000c
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	e0ac      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008cc0:	2208      	movs	r2, #8
 8008cc2:	e0aa      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008cc4:	2210      	movs	r2, #16
 8008cc6:	e0a8      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008cc8:	2220      	movs	r2, #32
 8008cca:	e0a6      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008ccc:	2240      	movs	r2, #64	; 0x40
 8008cce:	e0a4      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008cd0:	2280      	movs	r2, #128	; 0x80
 8008cd2:	e0a2      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008cd4:	4a2c      	ldr	r2, [pc, #176]	; (8008d88 <UART_SetConfig+0x26c>)
 8008cd6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008cd8:	f002 0207 	and.w	r2, r2, #7
 8008cdc:	2a05      	cmp	r2, #5
 8008cde:	d811      	bhi.n	8008d04 <UART_SetConfig+0x1e8>
 8008ce0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008ce4:	00ef0006 	.word	0x00ef0006
 8008ce8:	000a0008 	.word	0x000a0008
 8008cec:	000e000c 	.word	0x000e000c
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	e092      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008cf4:	2208      	movs	r2, #8
 8008cf6:	e090      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008cf8:	2210      	movs	r2, #16
 8008cfa:	e08e      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	e08c      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008d00:	2240      	movs	r2, #64	; 0x40
 8008d02:	e08a      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008d04:	2280      	movs	r2, #128	; 0x80
 8008d06:	e088      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008d08:	4a1f      	ldr	r2, [pc, #124]	; (8008d88 <UART_SetConfig+0x26c>)
 8008d0a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008d0c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008d10:	2a28      	cmp	r2, #40	; 0x28
 8008d12:	d820      	bhi.n	8008d56 <UART_SetConfig+0x23a>
 8008d14:	e8df f002 	tbb	[pc, r2]
 8008d18:	1f1f1f15 	.word	0x1f1f1f15
 8008d1c:	1f1f1f1f 	.word	0x1f1f1f1f
 8008d20:	1f1f1fd7 	.word	0x1f1f1fd7
 8008d24:	1f1f1f1f 	.word	0x1f1f1f1f
 8008d28:	1f1f1f17 	.word	0x1f1f1f17
 8008d2c:	1f1f1f1f 	.word	0x1f1f1f1f
 8008d30:	1f1f1f19 	.word	0x1f1f1f19
 8008d34:	1f1f1f1f 	.word	0x1f1f1f1f
 8008d38:	1f1f1f1b 	.word	0x1f1f1f1b
 8008d3c:	1f1f1f1f 	.word	0x1f1f1f1f
 8008d40:	1d          	.byte	0x1d
 8008d41:	00          	.byte	0x00
 8008d42:	2201      	movs	r2, #1
 8008d44:	e069      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008d46:	2208      	movs	r2, #8
 8008d48:	e067      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008d4a:	2210      	movs	r2, #16
 8008d4c:	e065      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008d4e:	2220      	movs	r2, #32
 8008d50:	e063      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008d52:	2240      	movs	r2, #64	; 0x40
 8008d54:	e061      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008d56:	2280      	movs	r2, #128	; 0x80
 8008d58:	e05f      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008d5a:	bf00      	nop
 8008d5c:	cfff69f3 	.word	0xcfff69f3
 8008d60:	58000c00 	.word	0x58000c00
 8008d64:	11fff4ff 	.word	0x11fff4ff
 8008d68:	40011000 	.word	0x40011000
 8008d6c:	40004400 	.word	0x40004400
 8008d70:	40004800 	.word	0x40004800
 8008d74:	40004c00 	.word	0x40004c00
 8008d78:	40005000 	.word	0x40005000
 8008d7c:	40011400 	.word	0x40011400
 8008d80:	40007800 	.word	0x40007800
 8008d84:	40007c00 	.word	0x40007c00
 8008d88:	58024400 	.word	0x58024400
 8008d8c:	4a82      	ldr	r2, [pc, #520]	; (8008f98 <UART_SetConfig+0x47c>)
 8008d8e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008d90:	f002 0207 	and.w	r2, r2, #7
 8008d94:	2a05      	cmp	r2, #5
 8008d96:	d80e      	bhi.n	8008db6 <UART_SetConfig+0x29a>
 8008d98:	e8df f002 	tbb	[pc, r2]
 8008d9c:	07059703 	.word	0x07059703
 8008da0:	0b09      	.short	0x0b09
 8008da2:	2200      	movs	r2, #0
 8008da4:	e039      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008da6:	2208      	movs	r2, #8
 8008da8:	e037      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008daa:	2210      	movs	r2, #16
 8008dac:	e035      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008dae:	2220      	movs	r2, #32
 8008db0:	e033      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008db2:	2240      	movs	r2, #64	; 0x40
 8008db4:	e031      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008db6:	2280      	movs	r2, #128	; 0x80
 8008db8:	e02f      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008dba:	4a77      	ldr	r2, [pc, #476]	; (8008f98 <UART_SetConfig+0x47c>)
 8008dbc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008dbe:	f002 0207 	and.w	r2, r2, #7
 8008dc2:	2a05      	cmp	r2, #5
 8008dc4:	d80e      	bhi.n	8008de4 <UART_SetConfig+0x2c8>
 8008dc6:	e8df f002 	tbb	[pc, r2]
 8008dca:	8203      	.short	0x8203
 8008dcc:	0b090705 	.word	0x0b090705
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	e022      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008dd4:	2208      	movs	r2, #8
 8008dd6:	e020      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008dd8:	2210      	movs	r2, #16
 8008dda:	e01e      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008ddc:	2220      	movs	r2, #32
 8008dde:	e01c      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008de0:	2240      	movs	r2, #64	; 0x40
 8008de2:	e01a      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008de4:	2280      	movs	r2, #128	; 0x80
 8008de6:	e018      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008de8:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8008dec:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008dee:	f002 0207 	and.w	r2, r2, #7
 8008df2:	2a05      	cmp	r2, #5
 8008df4:	d80e      	bhi.n	8008e14 <UART_SetConfig+0x2f8>
 8008df6:	e8df f002 	tbb	[pc, r2]
 8008dfa:	6c03      	.short	0x6c03
 8008dfc:	0b090705 	.word	0x0b090705
 8008e00:	2202      	movs	r2, #2
 8008e02:	e00a      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008e04:	2208      	movs	r2, #8
 8008e06:	e008      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008e08:	2210      	movs	r2, #16
 8008e0a:	e006      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008e0c:	2220      	movs	r2, #32
 8008e0e:	e004      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008e10:	2240      	movs	r2, #64	; 0x40
 8008e12:	e002      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008e14:	2280      	movs	r2, #128	; 0x80
 8008e16:	e000      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008e18:	2204      	movs	r2, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e1a:	4960      	ldr	r1, [pc, #384]	; (8008f9c <UART_SetConfig+0x480>)
 8008e1c:	428b      	cmp	r3, r1
 8008e1e:	d05a      	beq.n	8008ed6 <UART_SetConfig+0x3ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e20:	69e3      	ldr	r3, [r4, #28]
 8008e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e26:	f000 80c3 	beq.w	8008fb0 <UART_SetConfig+0x494>
    switch (clocksource)
 8008e2a:	2a40      	cmp	r2, #64	; 0x40
 8008e2c:	f200 8179 	bhi.w	8009122 <UART_SetConfig+0x606>
 8008e30:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008e34:	014b0127 	.word	0x014b0127
 8008e38:	01770177 	.word	0x01770177
 8008e3c:	0177014e 	.word	0x0177014e
 8008e40:	01770177 	.word	0x01770177
 8008e44:	01770153 	.word	0x01770153
 8008e48:	01770177 	.word	0x01770177
 8008e4c:	01770177 	.word	0x01770177
 8008e50:	01770177 	.word	0x01770177
 8008e54:	01770158 	.word	0x01770158
 8008e58:	01770177 	.word	0x01770177
 8008e5c:	01770177 	.word	0x01770177
 8008e60:	01770177 	.word	0x01770177
 8008e64:	01770177 	.word	0x01770177
 8008e68:	01770177 	.word	0x01770177
 8008e6c:	01770177 	.word	0x01770177
 8008e70:	01770177 	.word	0x01770177
 8008e74:	01770125 	.word	0x01770125
 8008e78:	01770177 	.word	0x01770177
 8008e7c:	01770177 	.word	0x01770177
 8008e80:	01770177 	.word	0x01770177
 8008e84:	01770177 	.word	0x01770177
 8008e88:	01770177 	.word	0x01770177
 8008e8c:	01770177 	.word	0x01770177
 8008e90:	01770177 	.word	0x01770177
 8008e94:	01770177 	.word	0x01770177
 8008e98:	01770177 	.word	0x01770177
 8008e9c:	01770177 	.word	0x01770177
 8008ea0:	01770177 	.word	0x01770177
 8008ea4:	01770177 	.word	0x01770177
 8008ea8:	01770177 	.word	0x01770177
 8008eac:	01770177 	.word	0x01770177
 8008eb0:	01770177 	.word	0x01770177
 8008eb4:	0164      	.short	0x0164
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008eb6:	2204      	movs	r2, #4
 8008eb8:	e7af      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008eba:	2204      	movs	r2, #4
 8008ebc:	e7ad      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008ebe:	2204      	movs	r2, #4
 8008ec0:	e7ab      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008ec2:	2204      	movs	r2, #4
 8008ec4:	e7a9      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008ec6:	2204      	movs	r2, #4
 8008ec8:	e7a7      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008eca:	2204      	movs	r2, #4
 8008ecc:	e7a5      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008ece:	2204      	movs	r2, #4
 8008ed0:	e7a3      	b.n	8008e1a <UART_SetConfig+0x2fe>
 8008ed2:	2204      	movs	r2, #4
 8008ed4:	e7a1      	b.n	8008e1a <UART_SetConfig+0x2fe>
    switch (clocksource)
 8008ed6:	2a08      	cmp	r2, #8
 8008ed8:	d048      	beq.n	8008f6c <UART_SetConfig+0x450>
 8008eda:	d907      	bls.n	8008eec <UART_SetConfig+0x3d0>
 8008edc:	2a20      	cmp	r2, #32
 8008ede:	d00e      	beq.n	8008efe <UART_SetConfig+0x3e2>
 8008ee0:	2a40      	cmp	r2, #64	; 0x40
 8008ee2:	d054      	beq.n	8008f8e <UART_SetConfig+0x472>
 8008ee4:	2a10      	cmp	r2, #16
 8008ee6:	d046      	beq.n	8008f76 <UART_SetConfig+0x45a>
        ret = HAL_ERROR;
 8008ee8:	2001      	movs	r0, #1
 8008eea:	e0e3      	b.n	80090b4 <UART_SetConfig+0x598>
    switch (clocksource)
 8008eec:	2a02      	cmp	r2, #2
 8008eee:	d008      	beq.n	8008f02 <UART_SetConfig+0x3e6>
 8008ef0:	2a04      	cmp	r2, #4
 8008ef2:	d1f9      	bne.n	8008ee8 <UART_SetConfig+0x3cc>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ef4:	a803      	add	r0, sp, #12
 8008ef6:	f7fc f8ef 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008efa:	9804      	ldr	r0, [sp, #16]
        break;
 8008efc:	e003      	b.n	8008f06 <UART_SetConfig+0x3ea>
        pclk = (uint32_t) CSI_VALUE;
 8008efe:	4828      	ldr	r0, [pc, #160]	; (8008fa0 <UART_SetConfig+0x484>)
 8008f00:	e004      	b.n	8008f0c <UART_SetConfig+0x3f0>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008f02:	f7fc f8d7 	bl	80050b4 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8008f06:	2800      	cmp	r0, #0
 8008f08:	f000 80fd 	beq.w	8009106 <UART_SetConfig+0x5ea>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008f0e:	4b25      	ldr	r3, [pc, #148]	; (8008fa4 <UART_SetConfig+0x488>)
 8008f10:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8008f14:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f18:	6865      	ldr	r5, [r4, #4]
 8008f1a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8008f1e:	4299      	cmp	r1, r3
 8008f20:	f200 80f3 	bhi.w	800910a <UART_SetConfig+0x5ee>
 8008f24:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8008f28:	f200 80f1 	bhi.w	800910e <UART_SetConfig+0x5f2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f2c:	f04f 0800 	mov.w	r8, #0
 8008f30:	b292      	uxth	r2, r2
 8008f32:	2300      	movs	r3, #0
 8008f34:	4641      	mov	r1, r8
 8008f36:	f7f7 fa23 	bl	8000380 <__aeabi_uldivmod>
 8008f3a:	020f      	lsls	r7, r1, #8
 8008f3c:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8008f40:	0206      	lsls	r6, r0, #8
 8008f42:	0868      	lsrs	r0, r5, #1
 8008f44:	462a      	mov	r2, r5
 8008f46:	4643      	mov	r3, r8
 8008f48:	eb16 0800 	adds.w	r8, r6, r0
 8008f4c:	f147 0900 	adc.w	r9, r7, #0
 8008f50:	4640      	mov	r0, r8
 8008f52:	4649      	mov	r1, r9
 8008f54:	f7f7 fa14 	bl	8000380 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f58:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8008f5c:	4b12      	ldr	r3, [pc, #72]	; (8008fa8 <UART_SetConfig+0x48c>)
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	f200 80d7 	bhi.w	8009112 <UART_SetConfig+0x5f6>
          huart->Instance->BRR = usartdiv;
 8008f64:	6823      	ldr	r3, [r4, #0]
 8008f66:	60d8      	str	r0, [r3, #12]
 8008f68:	2000      	movs	r0, #0
 8008f6a:	e0a3      	b.n	80090b4 <UART_SetConfig+0x598>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f6c:	4668      	mov	r0, sp
 8008f6e:	f7fc f9b1 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f72:	9801      	ldr	r0, [sp, #4]
        break;
 8008f74:	e7c7      	b.n	8008f06 <UART_SetConfig+0x3ea>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f76:	4b08      	ldr	r3, [pc, #32]	; (8008f98 <UART_SetConfig+0x47c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f013 0f20 	tst.w	r3, #32
 8008f7e:	d009      	beq.n	8008f94 <UART_SetConfig+0x478>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f80:	4b05      	ldr	r3, [pc, #20]	; (8008f98 <UART_SetConfig+0x47c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008f88:	4808      	ldr	r0, [pc, #32]	; (8008fac <UART_SetConfig+0x490>)
 8008f8a:	40d8      	lsrs	r0, r3
 8008f8c:	e7bb      	b.n	8008f06 <UART_SetConfig+0x3ea>
        pclk = (uint32_t) LSE_VALUE;
 8008f8e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008f92:	e7bb      	b.n	8008f0c <UART_SetConfig+0x3f0>
          pclk = (uint32_t) HSI_VALUE;
 8008f94:	4805      	ldr	r0, [pc, #20]	; (8008fac <UART_SetConfig+0x490>)
 8008f96:	e7b9      	b.n	8008f0c <UART_SetConfig+0x3f0>
 8008f98:	58024400 	.word	0x58024400
 8008f9c:	58000c00 	.word	0x58000c00
 8008fa0:	003d0900 	.word	0x003d0900
 8008fa4:	0800f0dc 	.word	0x0800f0dc
 8008fa8:	000ffcff 	.word	0x000ffcff
 8008fac:	03d09000 	.word	0x03d09000
    switch (clocksource)
 8008fb0:	2a40      	cmp	r2, #64	; 0x40
 8008fb2:	f200 80b0 	bhi.w	8009116 <UART_SetConfig+0x5fa>
 8008fb6:	e8df f002 	tbb	[pc, r2]
 8008fba:	4423      	.short	0x4423
 8008fbc:	ae47aeae 	.word	0xae47aeae
 8008fc0:	ae4caeae 	.word	0xae4caeae
 8008fc4:	aeaeaeae 	.word	0xaeaeaeae
 8008fc8:	ae51aeae 	.word	0xae51aeae
 8008fcc:	aeaeaeae 	.word	0xaeaeaeae
 8008fd0:	aeaeaeae 	.word	0xaeaeaeae
 8008fd4:	aeaeaeae 	.word	0xaeaeaeae
 8008fd8:	ae21aeae 	.word	0xae21aeae
 8008fdc:	aeaeaeae 	.word	0xaeaeaeae
 8008fe0:	aeaeaeae 	.word	0xaeaeaeae
 8008fe4:	aeaeaeae 	.word	0xaeaeaeae
 8008fe8:	aeaeaeae 	.word	0xaeaeaeae
 8008fec:	aeaeaeae 	.word	0xaeaeaeae
 8008ff0:	aeaeaeae 	.word	0xaeaeaeae
 8008ff4:	aeaeaeae 	.word	0xaeaeaeae
 8008ff8:	aeae      	.short	0xaeae
 8008ffa:	5d          	.byte	0x5d
 8008ffb:	00          	.byte	0x00
        pclk = (uint32_t) CSI_VALUE;
 8008ffc:	484c      	ldr	r0, [pc, #304]	; (8009130 <UART_SetConfig+0x614>)
 8008ffe:	e004      	b.n	800900a <UART_SetConfig+0x4ee>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009000:	f7fb fa8c 	bl	800451c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009004:	2800      	cmp	r0, #0
 8009006:	f000 8088 	beq.w	800911a <UART_SetConfig+0x5fe>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800900a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800900c:	4b49      	ldr	r3, [pc, #292]	; (8009134 <UART_SetConfig+0x618>)
 800900e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009012:	fbb0 f0f3 	udiv	r0, r0, r3
 8009016:	6862      	ldr	r2, [r4, #4]
 8009018:	0853      	lsrs	r3, r2, #1
 800901a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800901e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009022:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009024:	f1a3 0110 	sub.w	r1, r3, #16
 8009028:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800902c:	4291      	cmp	r1, r2
 800902e:	d876      	bhi.n	800911e <UART_SetConfig+0x602>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009030:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009034:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8009038:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800903a:	6822      	ldr	r2, [r4, #0]
 800903c:	60d3      	str	r3, [r2, #12]
 800903e:	2000      	movs	r0, #0
 8009040:	e038      	b.n	80090b4 <UART_SetConfig+0x598>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009042:	f7fb fa7d 	bl	8004540 <HAL_RCC_GetPCLK2Freq>
        break;
 8009046:	e7dd      	b.n	8009004 <UART_SetConfig+0x4e8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009048:	a803      	add	r0, sp, #12
 800904a:	f7fc f845 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800904e:	9804      	ldr	r0, [sp, #16]
        break;
 8009050:	e7d8      	b.n	8009004 <UART_SetConfig+0x4e8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009052:	4668      	mov	r0, sp
 8009054:	f7fc f93e 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009058:	9801      	ldr	r0, [sp, #4]
        break;
 800905a:	e7d3      	b.n	8009004 <UART_SetConfig+0x4e8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800905c:	4b36      	ldr	r3, [pc, #216]	; (8009138 <UART_SetConfig+0x61c>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f013 0f20 	tst.w	r3, #32
 8009064:	d009      	beq.n	800907a <UART_SetConfig+0x55e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009066:	4b34      	ldr	r3, [pc, #208]	; (8009138 <UART_SetConfig+0x61c>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800906e:	4833      	ldr	r0, [pc, #204]	; (800913c <UART_SetConfig+0x620>)
 8009070:	40d8      	lsrs	r0, r3
 8009072:	e7c7      	b.n	8009004 <UART_SetConfig+0x4e8>
        pclk = (uint32_t) LSE_VALUE;
 8009074:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009078:	e7c7      	b.n	800900a <UART_SetConfig+0x4ee>
          pclk = (uint32_t) HSI_VALUE;
 800907a:	4830      	ldr	r0, [pc, #192]	; (800913c <UART_SetConfig+0x620>)
 800907c:	e7c5      	b.n	800900a <UART_SetConfig+0x4ee>
        pclk = (uint32_t) CSI_VALUE;
 800907e:	482c      	ldr	r0, [pc, #176]	; (8009130 <UART_SetConfig+0x614>)
 8009080:	e003      	b.n	800908a <UART_SetConfig+0x56e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009082:	f7fb fa4b 	bl	800451c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009086:	2800      	cmp	r0, #0
 8009088:	d04d      	beq.n	8009126 <UART_SetConfig+0x60a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800908a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800908c:	4b29      	ldr	r3, [pc, #164]	; (8009134 <UART_SetConfig+0x618>)
 800908e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009092:	fbb0 f0f3 	udiv	r0, r0, r3
 8009096:	6863      	ldr	r3, [r4, #4]
 8009098:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800909c:	fbb0 f0f3 	udiv	r0, r0, r3
 80090a0:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090a2:	f1a0 0210 	sub.w	r2, r0, #16
 80090a6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d83d      	bhi.n	800912a <UART_SetConfig+0x60e>
        huart->Instance->BRR = usartdiv;
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	60d8      	str	r0, [r3, #12]
 80090b2:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80090b4:	2301      	movs	r3, #1
 80090b6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80090ba:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80090be:	2300      	movs	r3, #0
 80090c0:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 80090c2:	6723      	str	r3, [r4, #112]	; 0x70
}
 80090c4:	b007      	add	sp, #28
 80090c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80090ca:	f7fb fa39 	bl	8004540 <HAL_RCC_GetPCLK2Freq>
        break;
 80090ce:	e7da      	b.n	8009086 <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090d0:	a803      	add	r0, sp, #12
 80090d2:	f7fc f801 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090d6:	9804      	ldr	r0, [sp, #16]
        break;
 80090d8:	e7d5      	b.n	8009086 <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090da:	4668      	mov	r0, sp
 80090dc:	f7fc f8fa 	bl	80052d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090e0:	9801      	ldr	r0, [sp, #4]
        break;
 80090e2:	e7d0      	b.n	8009086 <UART_SetConfig+0x56a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090e4:	4b14      	ldr	r3, [pc, #80]	; (8009138 <UART_SetConfig+0x61c>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f013 0f20 	tst.w	r3, #32
 80090ec:	d009      	beq.n	8009102 <UART_SetConfig+0x5e6>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80090ee:	4b12      	ldr	r3, [pc, #72]	; (8009138 <UART_SetConfig+0x61c>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80090f6:	4811      	ldr	r0, [pc, #68]	; (800913c <UART_SetConfig+0x620>)
 80090f8:	40d8      	lsrs	r0, r3
 80090fa:	e7c4      	b.n	8009086 <UART_SetConfig+0x56a>
        pclk = (uint32_t) LSE_VALUE;
 80090fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009100:	e7c3      	b.n	800908a <UART_SetConfig+0x56e>
          pclk = (uint32_t) HSI_VALUE;
 8009102:	480e      	ldr	r0, [pc, #56]	; (800913c <UART_SetConfig+0x620>)
 8009104:	e7c1      	b.n	800908a <UART_SetConfig+0x56e>
 8009106:	2000      	movs	r0, #0
 8009108:	e7d4      	b.n	80090b4 <UART_SetConfig+0x598>
        ret = HAL_ERROR;
 800910a:	2001      	movs	r0, #1
 800910c:	e7d2      	b.n	80090b4 <UART_SetConfig+0x598>
 800910e:	2001      	movs	r0, #1
 8009110:	e7d0      	b.n	80090b4 <UART_SetConfig+0x598>
          ret = HAL_ERROR;
 8009112:	2001      	movs	r0, #1
 8009114:	e7ce      	b.n	80090b4 <UART_SetConfig+0x598>
        ret = HAL_ERROR;
 8009116:	2001      	movs	r0, #1
 8009118:	e7cc      	b.n	80090b4 <UART_SetConfig+0x598>
 800911a:	2000      	movs	r0, #0
 800911c:	e7ca      	b.n	80090b4 <UART_SetConfig+0x598>
        ret = HAL_ERROR;
 800911e:	2001      	movs	r0, #1
 8009120:	e7c8      	b.n	80090b4 <UART_SetConfig+0x598>
        ret = HAL_ERROR;
 8009122:	2001      	movs	r0, #1
 8009124:	e7c6      	b.n	80090b4 <UART_SetConfig+0x598>
 8009126:	2000      	movs	r0, #0
 8009128:	e7c4      	b.n	80090b4 <UART_SetConfig+0x598>
        ret = HAL_ERROR;
 800912a:	2001      	movs	r0, #1
 800912c:	e7c2      	b.n	80090b4 <UART_SetConfig+0x598>
 800912e:	bf00      	nop
 8009130:	003d0900 	.word	0x003d0900
 8009134:	0800f0dc 	.word	0x0800f0dc
 8009138:	58024400 	.word	0x58024400
 800913c:	03d09000 	.word	0x03d09000

08009140 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009140:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009142:	f013 0f01 	tst.w	r3, #1
 8009146:	d006      	beq.n	8009156 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009148:	6802      	ldr	r2, [r0, #0]
 800914a:	6853      	ldr	r3, [r2, #4]
 800914c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009150:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009152:	430b      	orrs	r3, r1
 8009154:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009156:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009158:	f013 0f02 	tst.w	r3, #2
 800915c:	d006      	beq.n	800916c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800915e:	6802      	ldr	r2, [r0, #0]
 8009160:	6853      	ldr	r3, [r2, #4]
 8009162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009166:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8009168:	430b      	orrs	r3, r1
 800916a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800916c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800916e:	f013 0f04 	tst.w	r3, #4
 8009172:	d006      	beq.n	8009182 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009174:	6802      	ldr	r2, [r0, #0]
 8009176:	6853      	ldr	r3, [r2, #4]
 8009178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800917c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800917e:	430b      	orrs	r3, r1
 8009180:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009182:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009184:	f013 0f08 	tst.w	r3, #8
 8009188:	d006      	beq.n	8009198 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800918a:	6802      	ldr	r2, [r0, #0]
 800918c:	6853      	ldr	r3, [r2, #4]
 800918e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009192:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8009194:	430b      	orrs	r3, r1
 8009196:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009198:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800919a:	f013 0f10 	tst.w	r3, #16
 800919e:	d006      	beq.n	80091ae <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091a0:	6802      	ldr	r2, [r0, #0]
 80091a2:	6893      	ldr	r3, [r2, #8]
 80091a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091a8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80091aa:	430b      	orrs	r3, r1
 80091ac:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80091b0:	f013 0f20 	tst.w	r3, #32
 80091b4:	d006      	beq.n	80091c4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091b6:	6802      	ldr	r2, [r0, #0]
 80091b8:	6893      	ldr	r3, [r2, #8]
 80091ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091be:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80091c0:	430b      	orrs	r3, r1
 80091c2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80091c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80091ca:	d00a      	beq.n	80091e2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091cc:	6802      	ldr	r2, [r0, #0]
 80091ce:	6853      	ldr	r3, [r2, #4]
 80091d0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80091d4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80091d6:	430b      	orrs	r3, r1
 80091d8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091da:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80091dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091e0:	d00b      	beq.n	80091fa <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80091e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80091e8:	d006      	beq.n	80091f8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091ea:	6802      	ldr	r2, [r0, #0]
 80091ec:	6853      	ldr	r3, [r2, #4]
 80091ee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80091f2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80091f4:	430b      	orrs	r3, r1
 80091f6:	6053      	str	r3, [r2, #4]
}
 80091f8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091fa:	6802      	ldr	r2, [r0, #0]
 80091fc:	6853      	ldr	r3, [r2, #4]
 80091fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009202:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8009204:	430b      	orrs	r3, r1
 8009206:	6053      	str	r3, [r2, #4]
 8009208:	e7eb      	b.n	80091e2 <UART_AdvFeatureConfig+0xa2>

0800920a <UART_WaitOnFlagUntilTimeout>:
{
 800920a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800920e:	4604      	mov	r4, r0
 8009210:	460f      	mov	r7, r1
 8009212:	4616      	mov	r6, r2
 8009214:	4698      	mov	r8, r3
 8009216:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	ea37 0303 	bics.w	r3, r7, r3
 8009220:	bf0c      	ite	eq
 8009222:	2301      	moveq	r3, #1
 8009224:	2300      	movne	r3, #0
 8009226:	42b3      	cmp	r3, r6
 8009228:	d13f      	bne.n	80092aa <UART_WaitOnFlagUntilTimeout+0xa0>
    if (Timeout != HAL_MAX_DELAY)
 800922a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800922e:	d0f3      	beq.n	8009218 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009230:	f7f7 fa86 	bl	8000740 <HAL_GetTick>
 8009234:	eba0 0008 	sub.w	r0, r0, r8
 8009238:	42a8      	cmp	r0, r5
 800923a:	d822      	bhi.n	8009282 <UART_WaitOnFlagUntilTimeout+0x78>
 800923c:	b30d      	cbz	r5, 8009282 <UART_WaitOnFlagUntilTimeout+0x78>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	f012 0f04 	tst.w	r2, #4
 8009246:	d0e7      	beq.n	8009218 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009248:	69da      	ldr	r2, [r3, #28]
 800924a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800924e:	d0e3      	beq.n	8009218 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009254:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009256:	6822      	ldr	r2, [r4, #0]
 8009258:	6813      	ldr	r3, [r2, #0]
 800925a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800925e:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009260:	6822      	ldr	r2, [r4, #0]
 8009262:	6893      	ldr	r3, [r2, #8]
 8009264:	f023 0301 	bic.w	r3, r3, #1
 8009268:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 800926a:	2320      	movs	r3, #32
 800926c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009270:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009274:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 8009278:	2300      	movs	r3, #0
 800927a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800927e:	2003      	movs	r0, #3
 8009280:	e014      	b.n	80092ac <UART_WaitOnFlagUntilTimeout+0xa2>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009282:	6822      	ldr	r2, [r4, #0]
 8009284:	6813      	ldr	r3, [r2, #0]
 8009286:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800928a:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800928c:	6822      	ldr	r2, [r4, #0]
 800928e:	6893      	ldr	r3, [r2, #8]
 8009290:	f023 0301 	bic.w	r3, r3, #1
 8009294:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8009296:	2320      	movs	r3, #32
 8009298:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800929c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80092a0:	2300      	movs	r3, #0
 80092a2:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 80092a6:	2003      	movs	r0, #3
 80092a8:	e000      	b.n	80092ac <UART_WaitOnFlagUntilTimeout+0xa2>
  return HAL_OK;
 80092aa:	2000      	movs	r0, #0
}
 80092ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080092b0 <UART_CheckIdleState>:
{
 80092b0:	b530      	push	{r4, r5, lr}
 80092b2:	b083      	sub	sp, #12
 80092b4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b6:	2300      	movs	r3, #0
 80092b8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 80092bc:	f7f7 fa40 	bl	8000740 <HAL_GetTick>
 80092c0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f013 0f08 	tst.w	r3, #8
 80092ca:	d10e      	bne.n	80092ea <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f013 0f04 	tst.w	r3, #4
 80092d4:	d117      	bne.n	8009306 <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 80092d6:	2320      	movs	r3, #32
 80092d8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80092dc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80092e0:	2000      	movs	r0, #0
 80092e2:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80092e6:	b003      	add	sp, #12
 80092e8:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	4603      	mov	r3, r0
 80092f2:	2200      	movs	r2, #0
 80092f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092f8:	4620      	mov	r0, r4
 80092fa:	f7ff ff86 	bl	800920a <UART_WaitOnFlagUntilTimeout>
 80092fe:	2800      	cmp	r0, #0
 8009300:	d0e4      	beq.n	80092cc <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8009302:	2003      	movs	r0, #3
 8009304:	e7ef      	b.n	80092e6 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009306:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	462b      	mov	r3, r5
 800930e:	2200      	movs	r2, #0
 8009310:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009314:	4620      	mov	r0, r4
 8009316:	f7ff ff78 	bl	800920a <UART_WaitOnFlagUntilTimeout>
 800931a:	2800      	cmp	r0, #0
 800931c:	d0db      	beq.n	80092d6 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800931e:	2003      	movs	r0, #3
 8009320:	e7e1      	b.n	80092e6 <UART_CheckIdleState+0x36>

08009322 <HAL_UART_Init>:
  if (huart == NULL)
 8009322:	b378      	cbz	r0, 8009384 <HAL_UART_Init+0x62>
{
 8009324:	b510      	push	{r4, lr}
 8009326:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009328:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800932c:	b30b      	cbz	r3, 8009372 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800932e:	2324      	movs	r3, #36	; 0x24
 8009330:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8009334:	6822      	ldr	r2, [r4, #0]
 8009336:	6813      	ldr	r3, [r2, #0]
 8009338:	f023 0301 	bic.w	r3, r3, #1
 800933c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800933e:	4620      	mov	r0, r4
 8009340:	f7ff fbec 	bl	8008b1c <UART_SetConfig>
 8009344:	2801      	cmp	r0, #1
 8009346:	d013      	beq.n	8009370 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009348:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800934a:	b9bb      	cbnz	r3, 800937c <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800934c:	6822      	ldr	r2, [r4, #0]
 800934e:	6853      	ldr	r3, [r2, #4]
 8009350:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8009354:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009356:	6822      	ldr	r2, [r4, #0]
 8009358:	6893      	ldr	r3, [r2, #8]
 800935a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800935e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8009360:	6822      	ldr	r2, [r4, #0]
 8009362:	6813      	ldr	r3, [r2, #0]
 8009364:	f043 0301 	orr.w	r3, r3, #1
 8009368:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800936a:	4620      	mov	r0, r4
 800936c:	f7ff ffa0 	bl	80092b0 <UART_CheckIdleState>
}
 8009370:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8009372:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8009376:	f004 f819 	bl	800d3ac <HAL_UART_MspInit>
 800937a:	e7d8      	b.n	800932e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800937c:	4620      	mov	r0, r4
 800937e:	f7ff fedf 	bl	8009140 <UART_AdvFeatureConfig>
 8009382:	e7e3      	b.n	800934c <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8009384:	2001      	movs	r0, #1
}
 8009386:	4770      	bx	lr

08009388 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009388:	b410      	push	{r4}
 800938a:	b085      	sub	sp, #20
 800938c:	4602      	mov	r2, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800938e:	4b1a      	ldr	r3, [pc, #104]	; (80093f8 <UARTEx_SetNbDataToProcess+0x70>)
 8009390:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009394:	ac04      	add	r4, sp, #16
 8009396:	e904 0003 	stmdb	r4, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800939a:	466c      	mov	r4, sp
 800939c:	3308      	adds	r3, #8
 800939e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80093a2:	e884 0003 	stmia.w	r4, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093a6:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80093a8:	b1fb      	cbz	r3, 80093ea <UARTEx_SetNbDataToProcess+0x62>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093aa:	6811      	ldr	r1, [r2, #0]
 80093ac:	688b      	ldr	r3, [r1, #8]
 80093ae:	f3c3 6342 	ubfx	r3, r3, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093b2:	6888      	ldr	r0, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80093b4:	a904      	add	r1, sp, #16
 80093b6:	eb01 7050 	add.w	r0, r1, r0, lsr #29
 80093ba:	f810 1c08 	ldrb.w	r1, [r0, #-8]
 80093be:	0109      	lsls	r1, r1, #4
 80093c0:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80093c4:	fb91 f1f0 	sdiv	r1, r1, r0
 80093c8:	f8a2 106a 	strh.w	r1, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80093cc:	a904      	add	r1, sp, #16
 80093ce:	440b      	add	r3, r1
 80093d0:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 80093d4:	0109      	lsls	r1, r1, #4
 80093d6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80093da:	fb91 f3f3 	sdiv	r3, r1, r3
 80093de:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
  }
}
 80093e2:	b005      	add	sp, #20
 80093e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093e8:	4770      	bx	lr
    huart->NbTxDataToProcess = 1U;
 80093ea:	2301      	movs	r3, #1
 80093ec:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80093f0:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
 80093f4:	e7f5      	b.n	80093e2 <UARTEx_SetNbDataToProcess+0x5a>
 80093f6:	bf00      	nop
 80093f8:	0800f0f4 	.word	0x0800f0f4

080093fc <HAL_UARTEx_WakeupCallback>:
}
 80093fc:	4770      	bx	lr

080093fe <HAL_UARTEx_RxFifoFullCallback>:
}
 80093fe:	4770      	bx	lr

08009400 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8009400:	4770      	bx	lr

08009402 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8009402:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8009406:	2b01      	cmp	r3, #1
 8009408:	d01d      	beq.n	8009446 <HAL_UARTEx_EnableFifoMode+0x44>
{
 800940a:	b510      	push	{r4, lr}
 800940c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800940e:	2301      	movs	r3, #1
 8009410:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8009414:	2324      	movs	r3, #36	; 0x24
 8009416:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800941a:	6802      	ldr	r2, [r0, #0]
 800941c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800941e:	6811      	ldr	r1, [r2, #0]
 8009420:	f021 0101 	bic.w	r1, r1, #1
 8009424:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009426:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800942a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800942e:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009430:	6802      	ldr	r2, [r0, #0]
 8009432:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8009434:	f7ff ffa8 	bl	8009388 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8009438:	2320      	movs	r3, #32
 800943a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800943e:	2000      	movs	r0, #0
 8009440:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8009444:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8009446:	2002      	movs	r0, #2
}
 8009448:	4770      	bx	lr

0800944a <HAL_UARTEx_SetTxFifoThreshold>:
{
 800944a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800944c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8009450:	2b01      	cmp	r3, #1
 8009452:	d01d      	beq.n	8009490 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8009454:	4604      	mov	r4, r0
 8009456:	2301      	movs	r3, #1
 8009458:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800945c:	2324      	movs	r3, #36	; 0x24
 800945e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009462:	6803      	ldr	r3, [r0, #0]
 8009464:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	f022 0201 	bic.w	r2, r2, #1
 800946c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800946e:	6802      	ldr	r2, [r0, #0]
 8009470:	6893      	ldr	r3, [r2, #8]
 8009472:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8009476:	4319      	orrs	r1, r3
 8009478:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800947a:	f7ff ff85 	bl	8009388 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009482:	2320      	movs	r3, #32
 8009484:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8009488:	2000      	movs	r0, #0
 800948a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800948e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8009490:	2002      	movs	r0, #2
 8009492:	e7fc      	b.n	800948e <HAL_UARTEx_SetTxFifoThreshold+0x44>

08009494 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8009494:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009496:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800949a:	2b01      	cmp	r3, #1
 800949c:	d01d      	beq.n	80094da <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800949e:	4604      	mov	r4, r0
 80094a0:	2301      	movs	r3, #1
 80094a2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80094a6:	2324      	movs	r3, #36	; 0x24
 80094a8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094ac:	6803      	ldr	r3, [r0, #0]
 80094ae:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	f022 0201 	bic.w	r2, r2, #1
 80094b6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80094b8:	6802      	ldr	r2, [r0, #0]
 80094ba:	6893      	ldr	r3, [r2, #8]
 80094bc:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80094c0:	4319      	orrs	r1, r3
 80094c2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80094c4:	f7ff ff60 	bl	8009388 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094c8:	6823      	ldr	r3, [r4, #0]
 80094ca:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80094cc:	2320      	movs	r3, #32
 80094ce:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80094d2:	2000      	movs	r0, #0
 80094d4:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80094d8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80094da:	2002      	movs	r0, #2
 80094dc:	e7fc      	b.n	80094d8 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

080094e0 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094e0:	4b0b      	ldr	r3, [pc, #44]	; (8009510 <SDMMC_GetCmdError+0x30>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a0b      	ldr	r2, [pc, #44]	; (8009514 <SDMMC_GetCmdError+0x34>)
 80094e6:	fba2 2303 	umull	r2, r3, r2, r3
 80094ea:	0a5a      	lsrs	r2, r3, #9
 80094ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80094f0:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 80094f4:	1e5a      	subs	r2, r3, #1
 80094f6:	b143      	cbz	r3, 800950a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80094f8:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 80094fa:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80094fc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009500:	d0f8      	beq.n	80094f4 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009502:	4b05      	ldr	r3, [pc, #20]	; (8009518 <SDMMC_GetCmdError+0x38>)
 8009504:	6383      	str	r3, [r0, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009506:	2000      	movs	r0, #0
 8009508:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800950a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800950e:	4770      	bx	lr
 8009510:	20000190 	.word	0x20000190
 8009514:	10624dd3 	.word	0x10624dd3
 8009518:	002000c5 	.word	0x002000c5

0800951c <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800951c:	4b15      	ldr	r3, [pc, #84]	; (8009574 <SDMMC_GetCmdResp2+0x58>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a15      	ldr	r2, [pc, #84]	; (8009578 <SDMMC_GetCmdResp2+0x5c>)
 8009522:	fba2 2303 	umull	r2, r3, r2, r3
 8009526:	0a5a      	lsrs	r2, r3, #9
 8009528:	f241 3388 	movw	r3, #5000	; 0x1388
 800952c:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8009530:	1e5a      	subs	r2, r3, #1
 8009532:	b1db      	cbz	r3, 800956c <SDMMC_GetCmdResp2+0x50>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8009534:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8009536:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009538:	f011 0f45 	tst.w	r1, #69	; 0x45
 800953c:	d0f8      	beq.n	8009530 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800953e:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 8009542:	d1f5      	bne.n	8009530 <SDMMC_GetCmdResp2+0x14>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009544:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009546:	f013 0f04 	tst.w	r3, #4
 800954a:	d107      	bne.n	800955c <SDMMC_GetCmdResp2+0x40>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800954c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800954e:	f013 0f01 	tst.w	r3, #1
 8009552:	d107      	bne.n	8009564 <SDMMC_GetCmdResp2+0x48>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009554:	4b09      	ldr	r3, [pc, #36]	; (800957c <SDMMC_GetCmdResp2+0x60>)
 8009556:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009558:	2000      	movs	r0, #0
 800955a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800955c:	2304      	movs	r3, #4
 800955e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009560:	4618      	mov	r0, r3
 8009562:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009564:	2301      	movs	r3, #1
 8009566:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009568:	4618      	mov	r0, r3
 800956a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800956c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	20000190 	.word	0x20000190
 8009578:	10624dd3 	.word	0x10624dd3
 800957c:	002000c5 	.word	0x002000c5

08009580 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009580:	4b11      	ldr	r3, [pc, #68]	; (80095c8 <SDMMC_GetCmdResp3+0x48>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a11      	ldr	r2, [pc, #68]	; (80095cc <SDMMC_GetCmdResp3+0x4c>)
 8009586:	fba2 2303 	umull	r2, r3, r2, r3
 800958a:	0a5a      	lsrs	r2, r3, #9
 800958c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009590:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 8009594:	1e5a      	subs	r2, r3, #1
 8009596:	b19b      	cbz	r3, 80095c0 <SDMMC_GetCmdResp3+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8009598:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800959a:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800959c:	f011 0f45 	tst.w	r1, #69	; 0x45
 80095a0:	d0f8      	beq.n	8009594 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095a2:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 80095a6:	d1f5      	bne.n	8009594 <SDMMC_GetCmdResp3+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80095a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80095aa:	f013 0f04 	tst.w	r3, #4
 80095ae:	d103      	bne.n	80095b8 <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80095b0:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <SDMMC_GetCmdResp3+0x50>)
 80095b2:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80095b4:	2000      	movs	r0, #0
 80095b6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095b8:	2304      	movs	r3, #4
 80095ba:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095bc:	4618      	mov	r0, r3
 80095be:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80095c0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	20000190 	.word	0x20000190
 80095cc:	10624dd3 	.word	0x10624dd3
 80095d0:	002000c5 	.word	0x002000c5

080095d4 <SDMMC_GetCmdResp7>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095d4:	4b18      	ldr	r3, [pc, #96]	; (8009638 <SDMMC_GetCmdResp7+0x64>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a18      	ldr	r2, [pc, #96]	; (800963c <SDMMC_GetCmdResp7+0x68>)
 80095da:	fba2 2303 	umull	r2, r3, r2, r3
 80095de:	0a5a      	lsrs	r2, r3, #9
 80095e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80095e4:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 80095e8:	1e5a      	subs	r2, r3, #1
 80095ea:	b1fb      	cbz	r3, 800962c <SDMMC_GetCmdResp7+0x58>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 80095ec:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80095ee:	4613      	mov	r3, r2
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80095f0:	f011 0f45 	tst.w	r1, #69	; 0x45
 80095f4:	d0f8      	beq.n	80095e8 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095f6:	f411 5f00 	tst.w	r1, #8192	; 0x2000
 80095fa:	d1f5      	bne.n	80095e8 <SDMMC_GetCmdResp7+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80095fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80095fe:	f013 0f04 	tst.w	r3, #4
 8009602:	d10b      	bne.n	800961c <SDMMC_GetCmdResp7+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009604:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009606:	f013 0f01 	tst.w	r3, #1
 800960a:	d10b      	bne.n	8009624 <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800960c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800960e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009612:	d00e      	beq.n	8009632 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009614:	2340      	movs	r3, #64	; 0x40
 8009616:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009618:	2000      	movs	r0, #0
 800961a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800961c:	2304      	movs	r3, #4
 800961e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009620:	4618      	mov	r0, r3
 8009622:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009624:	2301      	movs	r3, #1
 8009626:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009628:	4618      	mov	r0, r3
 800962a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800962c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009630:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 8009632:	2000      	movs	r0, #0

}
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	20000190 	.word	0x20000190
 800963c:	10624dd3 	.word	0x10624dd3

08009640 <SDMMC_Init>:
{
 8009640:	b084      	sub	sp, #16
 8009642:	b410      	push	{r4}
 8009644:	ac02      	add	r4, sp, #8
 8009646:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800964a:	460b      	mov	r3, r1
 800964c:	9a03      	ldr	r2, [sp, #12]
 800964e:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8009650:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 8009652:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8009654:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 8009656:	4313      	orrs	r3, r2
             Init.ClockDiv
 8009658:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 800965a:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800965c:	6841      	ldr	r1, [r0, #4]
 800965e:	4a04      	ldr	r2, [pc, #16]	; (8009670 <SDMMC_Init+0x30>)
 8009660:	400a      	ands	r2, r1
 8009662:	4313      	orrs	r3, r2
 8009664:	6043      	str	r3, [r0, #4]
}
 8009666:	2000      	movs	r0, #0
 8009668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800966c:	b004      	add	sp, #16
 800966e:	4770      	bx	lr
 8009670:	ffc02c00 	.word	0xffc02c00

08009674 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8009674:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8009678:	4770      	bx	lr

0800967a <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800967a:	680b      	ldr	r3, [r1, #0]
 800967c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8009680:	2000      	movs	r0, #0
 8009682:	4770      	bx	lr

08009684 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009684:	6803      	ldr	r3, [r0, #0]
 8009686:	f043 0303 	orr.w	r3, r3, #3
 800968a:	6003      	str	r3, [r0, #0]
}
 800968c:	2000      	movs	r0, #0
 800968e:	4770      	bx	lr

08009690 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009690:	6800      	ldr	r0, [r0, #0]
}
 8009692:	f000 0003 	and.w	r0, r0, #3
 8009696:	4770      	bx	lr

08009698 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8009698:	680b      	ldr	r3, [r1, #0]
 800969a:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800969c:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 800969e:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096a0:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 80096a2:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 80096a4:	4313      	orrs	r3, r2
                       Command->CPSM);
 80096a6:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 80096a8:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80096aa:	68c1      	ldr	r1, [r0, #12]
 80096ac:	4a02      	ldr	r2, [pc, #8]	; (80096b8 <SDMMC_SendCommand+0x20>)
 80096ae:	400a      	ands	r2, r1
 80096b0:	4313      	orrs	r3, r2
 80096b2:	60c3      	str	r3, [r0, #12]
}
 80096b4:	2000      	movs	r0, #0
 80096b6:	4770      	bx	lr
 80096b8:	fffee0c0 	.word	0xfffee0c0

080096bc <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 80096bc:	6900      	ldr	r0, [r0, #16]
}
 80096be:	b2c0      	uxtb	r0, r0
 80096c0:	4770      	bx	lr

080096c2 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80096c2:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 80096c4:	5840      	ldr	r0, [r0, r1]
}
 80096c6:	4770      	bx	lr

080096c8 <SDMMC_GetCmdResp1>:
{
 80096c8:	b538      	push	{r3, r4, r5, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80096ca:	4b53      	ldr	r3, [pc, #332]	; (8009818 <SDMMC_GetCmdResp1+0x150>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4c53      	ldr	r4, [pc, #332]	; (800981c <SDMMC_GetCmdResp1+0x154>)
 80096d0:	fba4 4303 	umull	r4, r3, r4, r3
 80096d4:	0a5b      	lsrs	r3, r3, #9
 80096d6:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 80096da:	1e54      	subs	r4, r2, #1
 80096dc:	2a00      	cmp	r2, #0
 80096de:	d061      	beq.n	80097a4 <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 80096e0:	6b45      	ldr	r5, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80096e2:	4b4f      	ldr	r3, [pc, #316]	; (8009820 <SDMMC_GetCmdResp1+0x158>)
 80096e4:	402b      	ands	r3, r5
 80096e6:	4622      	mov	r2, r4
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d0f6      	beq.n	80096da <SDMMC_GetCmdResp1+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80096ec:	f415 5f00 	tst.w	r5, #8192	; 0x2000
 80096f0:	d1f3      	bne.n	80096da <SDMMC_GetCmdResp1+0x12>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80096f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80096f4:	f013 0f04 	tst.w	r3, #4
 80096f8:	d107      	bne.n	800970a <SDMMC_GetCmdResp1+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80096fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80096fc:	f013 0f01 	tst.w	r3, #1
 8009700:	d007      	beq.n	8009712 <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009702:	2301      	movs	r3, #1
 8009704:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009706:	4618      	mov	r0, r3
 8009708:	e04e      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800970a:	2304      	movs	r3, #4
 800970c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800970e:	4618      	mov	r0, r3
 8009710:	e04a      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
 8009712:	460d      	mov	r5, r1
 8009714:	4604      	mov	r4, r0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009716:	4b43      	ldr	r3, [pc, #268]	; (8009824 <SDMMC_GetCmdResp1+0x15c>)
 8009718:	6383      	str	r3, [r0, #56]	; 0x38
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800971a:	f7ff ffcf 	bl	80096bc <SDMMC_GetCommandResponse>
 800971e:	42a8      	cmp	r0, r5
 8009720:	d001      	beq.n	8009726 <SDMMC_GetCmdResp1+0x5e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009722:	2001      	movs	r0, #1
 8009724:	e040      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009726:	2100      	movs	r1, #0
 8009728:	4620      	mov	r0, r4
 800972a:	f7ff ffca 	bl	80096c2 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800972e:	4b3e      	ldr	r3, [pc, #248]	; (8009828 <SDMMC_GetCmdResp1+0x160>)
 8009730:	4003      	ands	r3, r0
 8009732:	b3d3      	cbz	r3, 80097aa <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009734:	2800      	cmp	r0, #0
 8009736:	db3a      	blt.n	80097ae <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009738:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800973c:	d13a      	bne.n	80097b4 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800973e:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8009742:	d139      	bne.n	80097b8 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009744:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8009748:	d138      	bne.n	80097bc <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800974a:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 800974e:	d138      	bne.n	80097c2 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009750:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8009754:	d138      	bne.n	80097c8 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009756:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 800975a:	d138      	bne.n	80097ce <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800975c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8009760:	d138      	bne.n	80097d4 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009762:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8009766:	d138      	bne.n	80097da <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009768:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 800976c:	d138      	bne.n	80097e0 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800976e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8009772:	d138      	bne.n	80097e6 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009774:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8009778:	d138      	bne.n	80097ec <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800977a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 800977e:	d138      	bne.n	80097f2 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009780:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8009784:	d138      	bne.n	80097f8 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009786:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800978a:	d138      	bne.n	80097fe <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800978c:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8009790:	d138      	bne.n	8009804 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009792:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8009796:	d138      	bne.n	800980a <SDMMC_GetCmdResp1+0x142>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009798:	f010 0f08 	tst.w	r0, #8
 800979c:	d038      	beq.n	8009810 <SDMMC_GetCmdResp1+0x148>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800979e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80097a2:	e001      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 80097a4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80097a8:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 80097aa:	2000      	movs	r0, #0
 80097ac:	e7fc      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80097ae:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80097b2:	e7f9      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80097b4:	2040      	movs	r0, #64	; 0x40
 80097b6:	e7f7      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80097b8:	2080      	movs	r0, #128	; 0x80
 80097ba:	e7f5      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80097bc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80097c0:	e7f2      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80097c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80097c6:	e7ef      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80097c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80097cc:	e7ec      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80097ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80097d2:	e7e9      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80097d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80097d8:	e7e6      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80097da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80097de:	e7e3      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80097e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80097e4:	e7e0      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 80097e6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80097ea:	e7dd      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80097ec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80097f0:	e7da      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80097f2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80097f6:	e7d7      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80097f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80097fc:	e7d4      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80097fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009802:	e7d1      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009804:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8009808:	e7ce      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 800980a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800980e:	e7cb      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009810:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009814:	e7c8      	b.n	80097a8 <SDMMC_GetCmdResp1+0xe0>
 8009816:	bf00      	nop
 8009818:	20000190 	.word	0x20000190
 800981c:	10624dd3 	.word	0x10624dd3
 8009820:	00200045 	.word	0x00200045
 8009824:	002000c5 	.word	0x002000c5
 8009828:	fdffe008 	.word	0xfdffe008

0800982c <SDMMC_GetCmdResp6>:
{
 800982c:	b570      	push	{r4, r5, r6, lr}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800982e:	4b26      	ldr	r3, [pc, #152]	; (80098c8 <SDMMC_GetCmdResp6+0x9c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4c26      	ldr	r4, [pc, #152]	; (80098cc <SDMMC_GetCmdResp6+0xa0>)
 8009834:	fba4 4303 	umull	r4, r3, r4, r3
 8009838:	0a5c      	lsrs	r4, r3, #9
 800983a:	f241 3388 	movw	r3, #5000	; 0x1388
 800983e:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 8009842:	1e5c      	subs	r4, r3, #1
 8009844:	b3b3      	cbz	r3, 80098b4 <SDMMC_GetCmdResp6+0x88>
    sta_reg = SDMMCx->STA;
 8009846:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8009848:	4623      	mov	r3, r4
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800984a:	f015 0f45 	tst.w	r5, #69	; 0x45
 800984e:	d0f8      	beq.n	8009842 <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009850:	f415 5f00 	tst.w	r5, #8192	; 0x2000
 8009854:	d1f5      	bne.n	8009842 <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009856:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009858:	f013 0f04 	tst.w	r3, #4
 800985c:	d107      	bne.n	800986e <SDMMC_GetCmdResp6+0x42>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800985e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009860:	f013 0f01 	tst.w	r3, #1
 8009864:	d007      	beq.n	8009876 <SDMMC_GetCmdResp6+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009866:	2301      	movs	r3, #1
 8009868:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800986a:	4618      	mov	r0, r3
 800986c:	e024      	b.n	80098b8 <SDMMC_GetCmdResp6+0x8c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800986e:	2304      	movs	r3, #4
 8009870:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009872:	4618      	mov	r0, r3
 8009874:	e020      	b.n	80098b8 <SDMMC_GetCmdResp6+0x8c>
 8009876:	4616      	mov	r6, r2
 8009878:	460d      	mov	r5, r1
 800987a:	4604      	mov	r4, r0
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800987c:	f7ff ff1e 	bl	80096bc <SDMMC_GetCommandResponse>
 8009880:	42a8      	cmp	r0, r5
 8009882:	d001      	beq.n	8009888 <SDMMC_GetCmdResp6+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009884:	2001      	movs	r0, #1
 8009886:	e017      	b.n	80098b8 <SDMMC_GetCmdResp6+0x8c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009888:	4b11      	ldr	r3, [pc, #68]	; (80098d0 <SDMMC_GetCmdResp6+0xa4>)
 800988a:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800988c:	2100      	movs	r1, #0
 800988e:	4620      	mov	r0, r4
 8009890:	f7ff ff17 	bl	80096c2 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009894:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8009898:	d008      	beq.n	80098ac <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800989a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800989e:	d10c      	bne.n	80098ba <SDMMC_GetCmdResp6+0x8e>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80098a0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80098a4:	d00c      	beq.n	80098c0 <SDMMC_GetCmdResp6+0x94>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80098a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80098aa:	e005      	b.n	80098b8 <SDMMC_GetCmdResp6+0x8c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80098ac:	0c00      	lsrs	r0, r0, #16
 80098ae:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 80098b0:	2000      	movs	r0, #0
 80098b2:	e001      	b.n	80098b8 <SDMMC_GetCmdResp6+0x8c>
      return SDMMC_ERROR_TIMEOUT;
 80098b4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80098b8:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 80098ba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80098be:	e7fb      	b.n	80098b8 <SDMMC_GetCmdResp6+0x8c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80098c0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80098c4:	e7f8      	b.n	80098b8 <SDMMC_GetCmdResp6+0x8c>
 80098c6:	bf00      	nop
 80098c8:	20000190 	.word	0x20000190
 80098cc:	10624dd3 	.word	0x10624dd3
 80098d0:	002000c5 	.word	0x002000c5

080098d4 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 80098d4:	680b      	ldr	r3, [r1, #0]
 80098d6:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 80098d8:	684b      	ldr	r3, [r1, #4]
 80098da:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80098dc:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 80098de:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80098e0:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 80098e2:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 80098e4:	4313      	orrs	r3, r2
                       Data->DPSM);
 80098e6:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 80098e8:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80098ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80098ec:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80098f0:	4313      	orrs	r3, r2
 80098f2:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80098f4:	2000      	movs	r0, #0
 80098f6:	4770      	bx	lr

080098f8 <SDMMC_CmdBlockLength>:
{
 80098f8:	b530      	push	{r4, r5, lr}
 80098fa:	b087      	sub	sp, #28
 80098fc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80098fe:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009900:	2410      	movs	r4, #16
 8009902:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009908:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800990a:	2300      	movs	r3, #0
 800990c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800990e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009912:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009914:	a901      	add	r1, sp, #4
 8009916:	f7ff febf 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800991a:	f241 3288 	movw	r2, #5000	; 0x1388
 800991e:	4621      	mov	r1, r4
 8009920:	4628      	mov	r0, r5
 8009922:	f7ff fed1 	bl	80096c8 <SDMMC_GetCmdResp1>
}
 8009926:	b007      	add	sp, #28
 8009928:	bd30      	pop	{r4, r5, pc}

0800992a <SDMMC_CmdReadSingleBlock>:
{
 800992a:	b530      	push	{r4, r5, lr}
 800992c:	b087      	sub	sp, #28
 800992e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009930:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009932:	2411      	movs	r4, #17
 8009934:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800993a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800993c:	2300      	movs	r3, #0
 800993e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009944:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009946:	a901      	add	r1, sp, #4
 8009948:	f7ff fea6 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800994c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009950:	4621      	mov	r1, r4
 8009952:	4628      	mov	r0, r5
 8009954:	f7ff feb8 	bl	80096c8 <SDMMC_GetCmdResp1>
}
 8009958:	b007      	add	sp, #28
 800995a:	bd30      	pop	{r4, r5, pc}

0800995c <SDMMC_CmdReadMultiBlock>:
{
 800995c:	b530      	push	{r4, r5, lr}
 800995e:	b087      	sub	sp, #28
 8009960:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009962:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009964:	2412      	movs	r4, #18
 8009966:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800996c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800996e:	2300      	movs	r3, #0
 8009970:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009976:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009978:	a901      	add	r1, sp, #4
 800997a:	f7ff fe8d 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800997e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009982:	4621      	mov	r1, r4
 8009984:	4628      	mov	r0, r5
 8009986:	f7ff fe9f 	bl	80096c8 <SDMMC_GetCmdResp1>
}
 800998a:	b007      	add	sp, #28
 800998c:	bd30      	pop	{r4, r5, pc}

0800998e <SDMMC_CmdWriteSingleBlock>:
{
 800998e:	b530      	push	{r4, r5, lr}
 8009990:	b087      	sub	sp, #28
 8009992:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009994:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009996:	2418      	movs	r4, #24
 8009998:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800999a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800999e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099a0:	2300      	movs	r3, #0
 80099a2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099a8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099aa:	a901      	add	r1, sp, #4
 80099ac:	f7ff fe74 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80099b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099b4:	4621      	mov	r1, r4
 80099b6:	4628      	mov	r0, r5
 80099b8:	f7ff fe86 	bl	80096c8 <SDMMC_GetCmdResp1>
}
 80099bc:	b007      	add	sp, #28
 80099be:	bd30      	pop	{r4, r5, pc}

080099c0 <SDMMC_CmdWriteMultiBlock>:
{
 80099c0:	b530      	push	{r4, r5, lr}
 80099c2:	b087      	sub	sp, #28
 80099c4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80099c6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80099c8:	2419      	movs	r4, #25
 80099ca:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099d0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099d2:	2300      	movs	r3, #0
 80099d4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099da:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099dc:	a901      	add	r1, sp, #4
 80099de:	f7ff fe5b 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80099e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80099e6:	4621      	mov	r1, r4
 80099e8:	4628      	mov	r0, r5
 80099ea:	f7ff fe6d 	bl	80096c8 <SDMMC_GetCmdResp1>
}
 80099ee:	b007      	add	sp, #28
 80099f0:	bd30      	pop	{r4, r5, pc}
	...

080099f4 <SDMMC_CmdStopTransfer>:
{
 80099f4:	b530      	push	{r4, r5, lr}
 80099f6:	b087      	sub	sp, #28
 80099f8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80099fa:	2300      	movs	r3, #0
 80099fc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80099fe:	250c      	movs	r5, #12
 8009a00:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a06:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a08:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a0e:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009a10:	68c3      	ldr	r3, [r0, #12]
 8009a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a16:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009a18:	68c3      	ldr	r3, [r0, #12]
 8009a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a1e:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a20:	a901      	add	r1, sp, #4
 8009a22:	f7ff fe39 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009a26:	4a08      	ldr	r2, [pc, #32]	; (8009a48 <SDMMC_CmdStopTransfer+0x54>)
 8009a28:	4629      	mov	r1, r5
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f7ff fe4c 	bl	80096c8 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009a30:	68e3      	ldr	r3, [r4, #12]
 8009a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a36:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009a38:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8009a3c:	d001      	beq.n	8009a42 <SDMMC_CmdStopTransfer+0x4e>
}
 8009a3e:	b007      	add	sp, #28
 8009a40:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
 8009a42:	2000      	movs	r0, #0
  return errorstate;
 8009a44:	e7fb      	b.n	8009a3e <SDMMC_CmdStopTransfer+0x4a>
 8009a46:	bf00      	nop
 8009a48:	05f5e100 	.word	0x05f5e100

08009a4c <SDMMC_CmdSelDesel>:
{
 8009a4c:	b530      	push	{r4, r5, lr}
 8009a4e:	b087      	sub	sp, #28
 8009a50:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009a52:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009a54:	2407      	movs	r4, #7
 8009a56:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a5c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a66:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a68:	a901      	add	r1, sp, #4
 8009a6a:	f7ff fe15 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a72:	4621      	mov	r1, r4
 8009a74:	4628      	mov	r0, r5
 8009a76:	f7ff fe27 	bl	80096c8 <SDMMC_GetCmdResp1>
}
 8009a7a:	b007      	add	sp, #28
 8009a7c:	bd30      	pop	{r4, r5, pc}

08009a7e <SDMMC_CmdGoIdleState>:
{
 8009a7e:	b510      	push	{r4, lr}
 8009a80:	b086      	sub	sp, #24
 8009a82:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8009a84:	2300      	movs	r3, #0
 8009a86:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009a88:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009a8a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a8c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a92:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a94:	a901      	add	r1, sp, #4
 8009a96:	f7ff fdff 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f7ff fd20 	bl	80094e0 <SDMMC_GetCmdError>
}
 8009aa0:	b006      	add	sp, #24
 8009aa2:	bd10      	pop	{r4, pc}

08009aa4 <SDMMC_CmdOperCond>:
{
 8009aa4:	b510      	push	{r4, lr}
 8009aa6:	b086      	sub	sp, #24
 8009aa8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009aaa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009aae:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009ab0:	2308      	movs	r3, #8
 8009ab2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ab8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aba:	2300      	movs	r3, #0
 8009abc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ac2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ac4:	a901      	add	r1, sp, #4
 8009ac6:	f7ff fde7 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009aca:	4620      	mov	r0, r4
 8009acc:	f7ff fd82 	bl	80095d4 <SDMMC_GetCmdResp7>
}
 8009ad0:	b006      	add	sp, #24
 8009ad2:	bd10      	pop	{r4, pc}

08009ad4 <SDMMC_CmdAppCommand>:
{
 8009ad4:	b530      	push	{r4, r5, lr}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009ada:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009adc:	2437      	movs	r4, #55	; 0x37
 8009ade:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ae4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009aee:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009af0:	a901      	add	r1, sp, #4
 8009af2:	f7ff fdd1 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009afa:	4621      	mov	r1, r4
 8009afc:	4628      	mov	r0, r5
 8009afe:	f7ff fde3 	bl	80096c8 <SDMMC_GetCmdResp1>
}
 8009b02:	b007      	add	sp, #28
 8009b04:	bd30      	pop	{r4, r5, pc}

08009b06 <SDMMC_CmdAppOperCommand>:
{
 8009b06:	b510      	push	{r4, lr}
 8009b08:	b086      	sub	sp, #24
 8009b0a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8009b0c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009b0e:	2329      	movs	r3, #41	; 0x29
 8009b10:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b16:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b20:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b22:	a901      	add	r1, sp, #4
 8009b24:	f7ff fdb8 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f7ff fd29 	bl	8009580 <SDMMC_GetCmdResp3>
}
 8009b2e:	b006      	add	sp, #24
 8009b30:	bd10      	pop	{r4, pc}

08009b32 <SDMMC_CmdBusWidth>:
{
 8009b32:	b530      	push	{r4, r5, lr}
 8009b34:	b087      	sub	sp, #28
 8009b36:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009b38:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009b3a:	2406      	movs	r4, #6
 8009b3c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b42:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b44:	2300      	movs	r3, #0
 8009b46:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b4c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b4e:	a901      	add	r1, sp, #4
 8009b50:	f7ff fda2 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b58:	4621      	mov	r1, r4
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	f7ff fdb4 	bl	80096c8 <SDMMC_GetCmdResp1>
}
 8009b60:	b007      	add	sp, #28
 8009b62:	bd30      	pop	{r4, r5, pc}

08009b64 <SDMMC_CmdSendSCR>:
{
 8009b64:	b530      	push	{r4, r5, lr}
 8009b66:	b087      	sub	sp, #28
 8009b68:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009b6e:	2433      	movs	r4, #51	; 0x33
 8009b70:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b76:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b78:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b7e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b80:	a901      	add	r1, sp, #4
 8009b82:	f7ff fd89 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	f7ff fd9b 	bl	80096c8 <SDMMC_GetCmdResp1>
}
 8009b92:	b007      	add	sp, #28
 8009b94:	bd30      	pop	{r4, r5, pc}

08009b96 <SDMMC_CmdSendCID>:
{
 8009b96:	b510      	push	{r4, lr}
 8009b98:	b086      	sub	sp, #24
 8009b9a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009ba0:	2202      	movs	r2, #2
 8009ba2:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009ba4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8009ba8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009baa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bb0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bb2:	a901      	add	r1, sp, #4
 8009bb4:	f7ff fd70 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f7ff fcaf 	bl	800951c <SDMMC_GetCmdResp2>
}
 8009bbe:	b006      	add	sp, #24
 8009bc0:	bd10      	pop	{r4, pc}

08009bc2 <SDMMC_CmdSendCSD>:
{
 8009bc2:	b510      	push	{r4, lr}
 8009bc4:	b086      	sub	sp, #24
 8009bc6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8009bc8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009bca:	2309      	movs	r3, #9
 8009bcc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009bce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009bd2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bdc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bde:	a901      	add	r1, sp, #4
 8009be0:	f7ff fd5a 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009be4:	4620      	mov	r0, r4
 8009be6:	f7ff fc99 	bl	800951c <SDMMC_GetCmdResp2>
}
 8009bea:	b006      	add	sp, #24
 8009bec:	bd10      	pop	{r4, pc}

08009bee <SDMMC_CmdSetRelAdd>:
{
 8009bee:	b570      	push	{r4, r5, r6, lr}
 8009bf0:	b086      	sub	sp, #24
 8009bf2:	4605      	mov	r5, r0
 8009bf4:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009bfa:	2403      	movs	r4, #3
 8009bfc:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c02:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c04:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c0a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c0c:	a901      	add	r1, sp, #4
 8009c0e:	f7ff fd43 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009c12:	4632      	mov	r2, r6
 8009c14:	4621      	mov	r1, r4
 8009c16:	4628      	mov	r0, r5
 8009c18:	f7ff fe08 	bl	800982c <SDMMC_GetCmdResp6>
}
 8009c1c:	b006      	add	sp, #24
 8009c1e:	bd70      	pop	{r4, r5, r6, pc}

08009c20 <SDMMC_CmdSendStatus>:
{
 8009c20:	b530      	push	{r4, r5, lr}
 8009c22:	b087      	sub	sp, #28
 8009c24:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8009c26:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009c28:	240d      	movs	r4, #13
 8009c2a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c30:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c32:	2300      	movs	r3, #0
 8009c34:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c3a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c3c:	a901      	add	r1, sp, #4
 8009c3e:	f7ff fd2b 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c46:	4621      	mov	r1, r4
 8009c48:	4628      	mov	r0, r5
 8009c4a:	f7ff fd3d 	bl	80096c8 <SDMMC_GetCmdResp1>
}
 8009c4e:	b007      	add	sp, #28
 8009c50:	bd30      	pop	{r4, r5, pc}

08009c52 <SDMMC_CmdStatusRegister>:
{
 8009c52:	b530      	push	{r4, r5, lr}
 8009c54:	b087      	sub	sp, #28
 8009c56:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009c5c:	240d      	movs	r4, #13
 8009c5e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c64:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c66:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c6c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c6e:	a901      	add	r1, sp, #4
 8009c70:	f7ff fd12 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c78:	4621      	mov	r1, r4
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	f7ff fd24 	bl	80096c8 <SDMMC_GetCmdResp1>
}
 8009c80:	b007      	add	sp, #28
 8009c82:	bd30      	pop	{r4, r5, pc}

08009c84 <SDMMC_CmdVoltageSwitch>:
{
 8009c84:	b530      	push	{r4, r5, lr}
 8009c86:	b087      	sub	sp, #28
 8009c88:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8009c8e:	240b      	movs	r4, #11
 8009c90:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c96:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c98:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c9e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ca0:	a901      	add	r1, sp, #4
 8009ca2:	f7ff fcf9 	bl	8009698 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8009ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009caa:	4621      	mov	r1, r4
 8009cac:	4628      	mov	r0, r5
 8009cae:	f7ff fd0b 	bl	80096c8 <SDMMC_GetCmdResp1>
}
 8009cb2:	b007      	add	sp, #28
 8009cb4:	bd30      	pop	{r4, r5, pc}
	...

08009cb8 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8009cb8:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009cba:	3301      	adds	r3, #1
 8009cbc:	4a0c      	ldr	r2, [pc, #48]	; (8009cf0 <USB_CoreReset+0x38>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d811      	bhi.n	8009ce6 <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cc2:	6902      	ldr	r2, [r0, #16]
 8009cc4:	2a00      	cmp	r2, #0
 8009cc6:	daf8      	bge.n	8009cba <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009cc8:	6903      	ldr	r3, [r0, #16]
 8009cca:	f043 0301 	orr.w	r3, r3, #1
 8009cce:	6103      	str	r3, [r0, #16]
  count = 0U;
 8009cd0:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	4a06      	ldr	r2, [pc, #24]	; (8009cf0 <USB_CoreReset+0x38>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d807      	bhi.n	8009cea <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009cda:	6902      	ldr	r2, [r0, #16]
 8009cdc:	f012 0f01 	tst.w	r2, #1
 8009ce0:	d1f7      	bne.n	8009cd2 <USB_CoreReset+0x1a>

  return HAL_OK;
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009ce6:	2003      	movs	r0, #3
 8009ce8:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009cea:	2003      	movs	r0, #3
}
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	00030d40 	.word	0x00030d40

08009cf4 <USB_CoreInit>:
{
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	b510      	push	{r4, lr}
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	a803      	add	r0, sp, #12
 8009cfc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d00:	9b08      	ldr	r3, [sp, #32]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d11d      	bne.n	8009d42 <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d0c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009d0e:	68e2      	ldr	r2, [r4, #12]
 8009d10:	4b1a      	ldr	r3, [pc, #104]	; (8009d7c <USB_CoreInit+0x88>)
 8009d12:	4013      	ands	r3, r2
 8009d14:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009d16:	68e3      	ldr	r3, [r4, #12]
 8009d18:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009d1c:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8009d1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d009      	beq.n	8009d38 <USB_CoreInit+0x44>
    ret = USB_CoreReset(USBx);
 8009d24:	4620      	mov	r0, r4
 8009d26:	f7ff ffc7 	bl	8009cb8 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8009d2a:	9b06      	ldr	r3, [sp, #24]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d01b      	beq.n	8009d68 <USB_CoreInit+0x74>
}
 8009d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d34:	b004      	add	sp, #16
 8009d36:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009d38:	68e3      	ldr	r3, [r4, #12]
 8009d3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d3e:	60e3      	str	r3, [r4, #12]
 8009d40:	e7f0      	b.n	8009d24 <USB_CoreInit+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009d42:	68e3      	ldr	r3, [r4, #12]
 8009d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d48:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f7ff ffb4 	bl	8009cb8 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8009d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d52:	b923      	cbnz	r3, 8009d5e <USB_CoreInit+0x6a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d5a:	63a3      	str	r3, [r4, #56]	; 0x38
 8009d5c:	e7e5      	b.n	8009d2a <USB_CoreInit+0x36>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d64:	63a3      	str	r3, [r4, #56]	; 0x38
 8009d66:	e7e0      	b.n	8009d2a <USB_CoreInit+0x36>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009d68:	68a3      	ldr	r3, [r4, #8]
 8009d6a:	f043 0306 	orr.w	r3, r3, #6
 8009d6e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009d70:	68a3      	ldr	r3, [r4, #8]
 8009d72:	f043 0320 	orr.w	r3, r3, #32
 8009d76:	60a3      	str	r3, [r4, #8]
 8009d78:	e7da      	b.n	8009d30 <USB_CoreInit+0x3c>
 8009d7a:	bf00      	nop
 8009d7c:	ffbdffbf 	.word	0xffbdffbf

08009d80 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8009d80:	2a02      	cmp	r2, #2
 8009d82:	d00a      	beq.n	8009d9a <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009d84:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009d86:	68c2      	ldr	r2, [r0, #12]
 8009d88:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8009d8c:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009d8e:	68c3      	ldr	r3, [r0, #12]
 8009d90:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8009d94:	60c3      	str	r3, [r0, #12]
}
 8009d96:	2000      	movs	r0, #0
 8009d98:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009d9a:	4b27      	ldr	r3, [pc, #156]	; (8009e38 <USB_SetTurnaroundTime+0xb8>)
 8009d9c:	440b      	add	r3, r1
 8009d9e:	4a27      	ldr	r2, [pc, #156]	; (8009e3c <USB_SetTurnaroundTime+0xbc>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d939      	bls.n	8009e18 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009da4:	4b26      	ldr	r3, [pc, #152]	; (8009e40 <USB_SetTurnaroundTime+0xc0>)
 8009da6:	440b      	add	r3, r1
 8009da8:	4a26      	ldr	r2, [pc, #152]	; (8009e44 <USB_SetTurnaroundTime+0xc4>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d936      	bls.n	8009e1c <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009dae:	4b26      	ldr	r3, [pc, #152]	; (8009e48 <USB_SetTurnaroundTime+0xc8>)
 8009db0:	440b      	add	r3, r1
 8009db2:	4a26      	ldr	r2, [pc, #152]	; (8009e4c <USB_SetTurnaroundTime+0xcc>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d933      	bls.n	8009e20 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009db8:	4b25      	ldr	r3, [pc, #148]	; (8009e50 <USB_SetTurnaroundTime+0xd0>)
 8009dba:	440b      	add	r3, r1
 8009dbc:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8009dc0:	32a0      	adds	r2, #160	; 0xa0
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d92e      	bls.n	8009e24 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009dc6:	4b23      	ldr	r3, [pc, #140]	; (8009e54 <USB_SetTurnaroundTime+0xd4>)
 8009dc8:	440b      	add	r3, r1
 8009dca:	4a23      	ldr	r2, [pc, #140]	; (8009e58 <USB_SetTurnaroundTime+0xd8>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d92b      	bls.n	8009e28 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009dd0:	4b22      	ldr	r3, [pc, #136]	; (8009e5c <USB_SetTurnaroundTime+0xdc>)
 8009dd2:	440b      	add	r3, r1
 8009dd4:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 8009dd8:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d925      	bls.n	8009e2c <USB_SetTurnaroundTime+0xac>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009de0:	4b1f      	ldr	r3, [pc, #124]	; (8009e60 <USB_SetTurnaroundTime+0xe0>)
 8009de2:	440b      	add	r3, r1
 8009de4:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 8009de8:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d91f      	bls.n	8009e30 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009df0:	4b1c      	ldr	r3, [pc, #112]	; (8009e64 <USB_SetTurnaroundTime+0xe4>)
 8009df2:	440b      	add	r3, r1
 8009df4:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8009df8:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d919      	bls.n	8009e34 <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009e00:	4b19      	ldr	r3, [pc, #100]	; (8009e68 <USB_SetTurnaroundTime+0xe8>)
 8009e02:	440b      	add	r3, r1
 8009e04:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 8009e08:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d901      	bls.n	8009e14 <USB_SetTurnaroundTime+0x94>
      UsbTrd = 0x6U;
 8009e10:	2106      	movs	r1, #6
 8009e12:	e7b8      	b.n	8009d86 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x7U;
 8009e14:	2107      	movs	r1, #7
 8009e16:	e7b6      	b.n	8009d86 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8009e18:	210f      	movs	r1, #15
 8009e1a:	e7b4      	b.n	8009d86 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8009e1c:	210e      	movs	r1, #14
 8009e1e:	e7b2      	b.n	8009d86 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8009e20:	210d      	movs	r1, #13
 8009e22:	e7b0      	b.n	8009d86 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8009e24:	210c      	movs	r1, #12
 8009e26:	e7ae      	b.n	8009d86 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8009e28:	210b      	movs	r1, #11
 8009e2a:	e7ac      	b.n	8009d86 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8009e2c:	210a      	movs	r1, #10
 8009e2e:	e7aa      	b.n	8009d86 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8009e30:	2109      	movs	r1, #9
 8009e32:	e7a8      	b.n	8009d86 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8009e34:	2108      	movs	r1, #8
 8009e36:	e7a6      	b.n	8009d86 <USB_SetTurnaroundTime+0x6>
 8009e38:	ff275340 	.word	0xff275340
 8009e3c:	000c34ff 	.word	0x000c34ff
 8009e40:	ff1b1e40 	.word	0xff1b1e40
 8009e44:	000f423f 	.word	0x000f423f
 8009e48:	ff0bdc00 	.word	0xff0bdc00
 8009e4c:	00124f7f 	.word	0x00124f7f
 8009e50:	fef98c80 	.word	0xfef98c80
 8009e54:	fee5b660 	.word	0xfee5b660
 8009e58:	0016e35f 	.word	0x0016e35f
 8009e5c:	feced300 	.word	0xfeced300
 8009e60:	feb35bc0 	.word	0xfeb35bc0
 8009e64:	fe91ca00 	.word	0xfe91ca00
 8009e68:	fe5954e0 	.word	0xfe5954e0

08009e6c <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009e6c:	6883      	ldr	r3, [r0, #8]
 8009e6e:	f043 0301 	orr.w	r3, r3, #1
 8009e72:	6083      	str	r3, [r0, #8]
}
 8009e74:	2000      	movs	r0, #0
 8009e76:	4770      	bx	lr

08009e78 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009e78:	6883      	ldr	r3, [r0, #8]
 8009e7a:	f023 0301 	bic.w	r3, r3, #1
 8009e7e:	6083      	str	r3, [r0, #8]
}
 8009e80:	2000      	movs	r0, #0
 8009e82:	4770      	bx	lr

08009e84 <USB_SetCurrentMode>:
{
 8009e84:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009e86:	68c3      	ldr	r3, [r0, #12]
 8009e88:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009e8c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8009e8e:	2901      	cmp	r1, #1
 8009e90:	d009      	beq.n	8009ea6 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 8009e92:	b969      	cbnz	r1, 8009eb0 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e94:	68c3      	ldr	r3, [r0, #12]
 8009e96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e9a:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8009e9c:	2032      	movs	r0, #50	; 0x32
 8009e9e:	f7f6 fc55 	bl	800074c <HAL_Delay>
  return HAL_OK;
 8009ea2:	2000      	movs	r0, #0
}
 8009ea4:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009ea6:	68c3      	ldr	r3, [r0, #12]
 8009ea8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009eac:	60c3      	str	r3, [r0, #12]
 8009eae:	e7f5      	b.n	8009e9c <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 8009eb0:	2001      	movs	r0, #1
 8009eb2:	e7f7      	b.n	8009ea4 <USB_SetCurrentMode+0x20>

08009eb4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009eb4:	0189      	lsls	r1, r1, #6
 8009eb6:	f041 0120 	orr.w	r1, r1, #32
 8009eba:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 8009ebc:	2300      	movs	r3, #0
    if (++count > 200000U)
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	4a05      	ldr	r2, [pc, #20]	; (8009ed8 <USB_FlushTxFifo+0x24>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d805      	bhi.n	8009ed2 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ec6:	6902      	ldr	r2, [r0, #16]
 8009ec8:	f012 0f20 	tst.w	r2, #32
 8009ecc:	d1f7      	bne.n	8009ebe <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8009ece:	2000      	movs	r0, #0
 8009ed0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009ed2:	2003      	movs	r0, #3
}
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	00030d40 	.word	0x00030d40

08009edc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009edc:	2310      	movs	r3, #16
 8009ede:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8009ee0:	2300      	movs	r3, #0
    if (++count > 200000U)
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	4a05      	ldr	r2, [pc, #20]	; (8009efc <USB_FlushRxFifo+0x20>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d805      	bhi.n	8009ef6 <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009eea:	6902      	ldr	r2, [r0, #16]
 8009eec:	f012 0f10 	tst.w	r2, #16
 8009ef0:	d1f7      	bne.n	8009ee2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009ef6:	2003      	movs	r0, #3
}
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	00030d40 	.word	0x00030d40

08009f00 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8009f00:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8009f04:	4319      	orrs	r1, r3
 8009f06:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	4770      	bx	lr
	...

08009f10 <USB_DevInit>:
{
 8009f10:	b084      	sub	sp, #16
 8009f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f16:	4604      	mov	r4, r0
 8009f18:	a807      	add	r0, sp, #28
 8009f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f1e:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 8009f20:	2300      	movs	r3, #0
 8009f22:	e006      	b.n	8009f32 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 8009f24:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8009f28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8009f30:	3301      	adds	r3, #1
 8009f32:	2b0e      	cmp	r3, #14
 8009f34:	d9f6      	bls.n	8009f24 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 8009f36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f38:	bb23      	cbnz	r3, 8009f84 <USB_DevInit+0x74>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f3a:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8009f3e:	f043 0302 	orr.w	r3, r3, #2
 8009f42:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009f46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f4c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f54:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f5c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009f64:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8009f68:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8009f6c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d110      	bne.n	8009f98 <USB_DevInit+0x88>
    if (cfg.speed == USBD_HS_SPEED)
 8009f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f78:	b94b      	cbnz	r3, 8009f8e <USB_DevInit+0x7e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f7ff ffbf 	bl	8009f00 <USB_SetDevSpeed>
 8009f82:	e00d      	b.n	8009fa0 <USB_DevInit+0x90>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009f84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f8a:	63a3      	str	r3, [r4, #56]	; 0x38
 8009f8c:	e7e7      	b.n	8009f5e <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009f8e:	2101      	movs	r1, #1
 8009f90:	4620      	mov	r0, r4
 8009f92:	f7ff ffb5 	bl	8009f00 <USB_SetDevSpeed>
 8009f96:	e003      	b.n	8009fa0 <USB_DevInit+0x90>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009f98:	2103      	movs	r1, #3
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	f7ff ffb0 	bl	8009f00 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009fa0:	2110      	movs	r1, #16
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f7ff ff86 	bl	8009eb4 <USB_FlushTxFifo>
 8009fa8:	4680      	mov	r8, r0
 8009faa:	b108      	cbz	r0, 8009fb0 <USB_DevInit+0xa0>
    ret = HAL_ERROR;
 8009fac:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f7ff ff93 	bl	8009edc <USB_FlushRxFifo>
 8009fb6:	b108      	cbz	r0, 8009fbc <USB_DevInit+0xac>
    ret = HAL_ERROR;
 8009fb8:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009fc0:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009fc2:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fc4:	e00a      	b.n	8009fdc <USB_DevInit+0xcc>
      if (i == 0U)
 8009fc6:	b9c3      	cbnz	r3, 8009ffa <USB_DevInit+0xea>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009fc8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8009fcc:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009fd4:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8009fd8:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fda:	3301      	adds	r3, #1
 8009fdc:	9907      	ldr	r1, [sp, #28]
 8009fde:	4299      	cmp	r1, r3
 8009fe0:	d910      	bls.n	800a004 <USB_DevInit+0xf4>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009fe2:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8009fe6:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8009fea:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	dbe9      	blt.n	8009fc6 <USB_DevInit+0xb6>
      USBx_INEP(i)->DIEPCTL = 0U;
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8009ff8:	e7ea      	b.n	8009fd0 <USB_DevInit+0xc0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ffe:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 800a002:	e7e5      	b.n	8009fd0 <USB_DevInit+0xc0>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a004:	2300      	movs	r3, #0
 800a006:	e00a      	b.n	800a01e <USB_DevInit+0x10e>
      if (i == 0U)
 800a008:	b1bb      	cbz	r3, 800a03a <USB_DevInit+0x12a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a00a:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 800a00e:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a012:	2200      	movs	r2, #0
 800a014:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a016:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800a01a:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a01c:	3301      	adds	r3, #1
 800a01e:	4299      	cmp	r1, r3
 800a020:	d910      	bls.n	800a044 <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a022:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 800a026:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 800a02a:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 800a02e:	2f00      	cmp	r7, #0
 800a030:	dbea      	blt.n	800a008 <USB_DevInit+0xf8>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a032:	2700      	movs	r7, #0
 800a034:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 800a038:	e7eb      	b.n	800a012 <USB_DevInit+0x102>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a03a:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 800a03e:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 800a042:	e7e6      	b.n	800a012 <USB_DevInit+0x102>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a044:	6933      	ldr	r3, [r6, #16]
 800a046:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a04a:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800a04c:	2300      	movs	r3, #0
 800a04e:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a050:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800a054:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800a056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a058:	b91b      	cbnz	r3, 800a062 <USB_DevInit+0x152>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a05a:	69a3      	ldr	r3, [r4, #24]
 800a05c:	f043 0310 	orr.w	r3, r3, #16
 800a060:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a062:	69a2      	ldr	r2, [r4, #24]
 800a064:	4b0a      	ldr	r3, [pc, #40]	; (800a090 <USB_DevInit+0x180>)
 800a066:	4313      	orrs	r3, r2
 800a068:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800a06a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a06c:	b11b      	cbz	r3, 800a076 <USB_DevInit+0x166>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a06e:	69a3      	ldr	r3, [r4, #24]
 800a070:	f043 0308 	orr.w	r3, r3, #8
 800a074:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800a076:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d004      	beq.n	800a086 <USB_DevInit+0x176>
}
 800a07c:	4640      	mov	r0, r8
 800a07e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a082:	b004      	add	sp, #16
 800a084:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a086:	69a2      	ldr	r2, [r4, #24]
 800a088:	4b02      	ldr	r3, [pc, #8]	; (800a094 <USB_DevInit+0x184>)
 800a08a:	4313      	orrs	r3, r2
 800a08c:	61a3      	str	r3, [r4, #24]
 800a08e:	e7f5      	b.n	800a07c <USB_DevInit+0x16c>
 800a090:	803c3800 	.word	0x803c3800
 800a094:	40000004 	.word	0x40000004

0800a098 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a098:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a09c:	f013 0306 	ands.w	r3, r3, #6
 800a0a0:	d005      	beq.n	800a0ae <USB_GetDevSpeed+0x16>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a0a2:	2b06      	cmp	r3, #6
 800a0a4:	bf18      	it	ne
 800a0a6:	2b02      	cmpne	r3, #2
 800a0a8:	d103      	bne.n	800a0b2 <USB_GetDevSpeed+0x1a>
    speed = USBD_FS_SPEED;
 800a0aa:	2002      	movs	r0, #2
 800a0ac:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	4770      	bx	lr
    speed = 0xFU;
 800a0b2:	200f      	movs	r0, #15
}
 800a0b4:	4770      	bx	lr
	...

0800a0b8 <USB_ActivateEndpoint>:
{
 800a0b8:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800a0ba:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a0bc:	784a      	ldrb	r2, [r1, #1]
 800a0be:	2a01      	cmp	r2, #1
 800a0c0:	d020      	beq.n	800a104 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a0c2:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800a0c6:	f003 060f 	and.w	r6, r3, #15
 800a0ca:	2401      	movs	r4, #1
 800a0cc:	40b4      	lsls	r4, r6
 800a0ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a0d2:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a0d6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a0da:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a0de:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a0e2:	d10c      	bne.n	800a0fe <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a0e4:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800a0e8:	688b      	ldr	r3, [r1, #8]
 800a0ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a0ee:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a0f0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	4a13      	ldr	r2, [pc, #76]	; (800a144 <USB_ActivateEndpoint+0x8c>)
 800a0f8:	431a      	orrs	r2, r3
 800a0fa:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 800a0fe:	2000      	movs	r0, #0
 800a100:	bc70      	pop	{r4, r5, r6}
 800a102:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a104:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 800a108:	f003 060f 	and.w	r6, r3, #15
 800a10c:	40b2      	lsls	r2, r6
 800a10e:	b292      	uxth	r2, r2
 800a110:	4322      	orrs	r2, r4
 800a112:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a116:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a11a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800a11e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800a122:	d1ec      	bne.n	800a0fe <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a124:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 800a128:	688a      	ldr	r2, [r1, #8]
 800a12a:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a12e:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a130:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a134:	ea42 5383 	orr.w	r3, r2, r3, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a138:	4323      	orrs	r3, r4
 800a13a:	4a02      	ldr	r2, [pc, #8]	; (800a144 <USB_ActivateEndpoint+0x8c>)
 800a13c:	431a      	orrs	r2, r3
 800a13e:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 800a142:	e7dc      	b.n	800a0fe <USB_ActivateEndpoint+0x46>
 800a144:	10008000 	.word	0x10008000

0800a148 <USB_DeactivateEndpoint>:
{
 800a148:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800a14a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a14c:	784a      	ldrb	r2, [r1, #1]
 800a14e:	2a01      	cmp	r2, #1
 800a150:	d024      	beq.n	800a19c <USB_DeactivateEndpoint+0x54>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a152:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a156:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a15a:	2a00      	cmp	r2, #0
 800a15c:	db50      	blt.n	800a200 <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a15e:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 800a162:	780a      	ldrb	r2, [r1, #0]
 800a164:	f002 020f 	and.w	r2, r2, #15
 800a168:	2401      	movs	r4, #1
 800a16a:	fa04 f202 	lsl.w	r2, r4, r2
 800a16e:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 800a172:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a176:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800a17a:	7809      	ldrb	r1, [r1, #0]
 800a17c:	f001 010f 	and.w	r1, r1, #15
 800a180:	408c      	lsls	r4, r1
 800a182:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 800a186:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a18a:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800a18e:	4a23      	ldr	r2, [pc, #140]	; (800a21c <USB_DeactivateEndpoint+0xd4>)
 800a190:	400a      	ands	r2, r1
 800a192:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800a196:	2000      	movs	r0, #0
 800a198:	bc30      	pop	{r4, r5}
 800a19a:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a19c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a1a0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a1a4:	2a00      	cmp	r2, #0
 800a1a6:	db1e      	blt.n	800a1e6 <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a1a8:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 800a1ac:	780a      	ldrb	r2, [r1, #0]
 800a1ae:	f002 020f 	and.w	r2, r2, #15
 800a1b2:	2401      	movs	r4, #1
 800a1b4:	fa04 f202 	lsl.w	r2, r4, r2
 800a1b8:	b292      	uxth	r2, r2
 800a1ba:	ea25 0202 	bic.w	r2, r5, r2
 800a1be:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a1c2:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800a1c6:	7809      	ldrb	r1, [r1, #0]
 800a1c8:	f001 010f 	and.w	r1, r1, #15
 800a1cc:	408c      	lsls	r4, r1
 800a1ce:	b2a4      	uxth	r4, r4
 800a1d0:	ea22 0404 	bic.w	r4, r2, r4
 800a1d4:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a1d8:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800a1dc:	4a10      	ldr	r2, [pc, #64]	; (800a220 <USB_DeactivateEndpoint+0xd8>)
 800a1de:	400a      	ands	r2, r1
 800a1e0:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800a1e4:	e7d7      	b.n	800a196 <USB_DeactivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a1e6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a1ea:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a1ee:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a1f2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a1f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a1fa:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800a1fe:	e7d3      	b.n	800a1a8 <USB_DeactivateEndpoint+0x60>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a200:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a204:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a208:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a20c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a210:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a214:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800a218:	e7a1      	b.n	800a15e <USB_DeactivateEndpoint+0x16>
 800a21a:	bf00      	nop
 800a21c:	eff37800 	.word	0xeff37800
 800a220:	ec337800 	.word	0xec337800

0800a224 <USB_EP0StartXfer>:
{
 800a224:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800a226:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a228:	784c      	ldrb	r4, [r1, #1]
 800a22a:	2c01      	cmp	r4, #1
 800a22c:	d024      	beq.n	800a278 <USB_EP0StartXfer+0x54>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a22e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a232:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800a236:	691d      	ldr	r5, [r3, #16]
 800a238:	4c3e      	ldr	r4, [pc, #248]	; (800a334 <USB_EP0StartXfer+0x110>)
 800a23a:	402c      	ands	r4, r5
 800a23c:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a23e:	691d      	ldr	r5, [r3, #16]
 800a240:	4c3d      	ldr	r4, [pc, #244]	; (800a338 <USB_EP0StartXfer+0x114>)
 800a242:	402c      	ands	r4, r5
 800a244:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 800a246:	694c      	ldr	r4, [r1, #20]
 800a248:	b10c      	cbz	r4, 800a24e <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 800a24a:	688c      	ldr	r4, [r1, #8]
 800a24c:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a24e:	691c      	ldr	r4, [r3, #16]
 800a250:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a254:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a256:	691c      	ldr	r4, [r3, #16]
 800a258:	688d      	ldr	r5, [r1, #8]
 800a25a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800a25e:	432c      	orrs	r4, r5
 800a260:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800a262:	2a01      	cmp	r2, #1
 800a264:	d061      	beq.n	800a32a <USB_EP0StartXfer+0x106>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a266:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a26a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a26e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a272:	2000      	movs	r0, #0
 800a274:	bc70      	pop	{r4, r5, r6}
 800a276:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 800a278:	694c      	ldr	r4, [r1, #20]
 800a27a:	bb5c      	cbnz	r4, 800a2d4 <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a27c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800a280:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800a284:	4d2c      	ldr	r5, [pc, #176]	; (800a338 <USB_EP0StartXfer+0x114>)
 800a286:	4035      	ands	r5, r6
 800a288:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a28c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800a290:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800a294:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a298:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800a29c:	4d25      	ldr	r5, [pc, #148]	; (800a334 <USB_EP0StartXfer+0x110>)
 800a29e:	4035      	ands	r5, r6
 800a2a0:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 800a2a4:	2a01      	cmp	r2, #1
 800a2a6:	d031      	beq.n	800a30c <USB_EP0StartXfer+0xe8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2a8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a2ac:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a2b0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a2b4:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800a2b8:	694b      	ldr	r3, [r1, #20]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d0d9      	beq.n	800a272 <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a2be:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800a2c2:	7809      	ldrb	r1, [r1, #0]
 800a2c4:	f001 040f 	and.w	r4, r1, #15
 800a2c8:	2101      	movs	r1, #1
 800a2ca:	40a1      	lsls	r1, r4
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 800a2d2:	e7ce      	b.n	800a272 <USB_EP0StartXfer+0x4e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a2d4:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800a2d8:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 800a2dc:	6926      	ldr	r6, [r4, #16]
 800a2de:	4d15      	ldr	r5, [pc, #84]	; (800a334 <USB_EP0StartXfer+0x110>)
 800a2e0:	4035      	ands	r5, r6
 800a2e2:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2e4:	6926      	ldr	r6, [r4, #16]
 800a2e6:	4d14      	ldr	r5, [pc, #80]	; (800a338 <USB_EP0StartXfer+0x114>)
 800a2e8:	4035      	ands	r5, r6
 800a2ea:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 800a2ec:	694e      	ldr	r6, [r1, #20]
 800a2ee:	688d      	ldr	r5, [r1, #8]
 800a2f0:	42ae      	cmp	r6, r5
 800a2f2:	d900      	bls.n	800a2f6 <USB_EP0StartXfer+0xd2>
        ep->xfer_len = ep->maxpacket;
 800a2f4:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a2f6:	6925      	ldr	r5, [r4, #16]
 800a2f8:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800a2fc:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a2fe:	6925      	ldr	r5, [r4, #16]
 800a300:	694e      	ldr	r6, [r1, #20]
 800a302:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800a306:	4335      	orrs	r5, r6
 800a308:	6125      	str	r5, [r4, #16]
 800a30a:	e7cb      	b.n	800a2a4 <USB_EP0StartXfer+0x80>
      if ((uint32_t)ep->dma_addr != 0U)
 800a30c:	690a      	ldr	r2, [r1, #16]
 800a30e:	b11a      	cbz	r2, 800a318 <USB_EP0StartXfer+0xf4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a310:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800a314:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a318:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a31c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800a320:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a324:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 800a328:	e7a3      	b.n	800a272 <USB_EP0StartXfer+0x4e>
      if ((uint32_t)ep->xfer_buff != 0U)
 800a32a:	68ca      	ldr	r2, [r1, #12]
 800a32c:	2a00      	cmp	r2, #0
 800a32e:	d09a      	beq.n	800a266 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a330:	615a      	str	r2, [r3, #20]
 800a332:	e798      	b.n	800a266 <USB_EP0StartXfer+0x42>
 800a334:	fff80000 	.word	0xfff80000
 800a338:	e007ffff 	.word	0xe007ffff

0800a33c <USB_WritePacket>:
{
 800a33c:	b470      	push	{r4, r5, r6}
 800a33e:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 800a342:	b964      	cbnz	r4, 800a35e <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 800a344:	3303      	adds	r3, #3
 800a346:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 800a348:	e007      	b.n	800a35a <USB_WritePacket+0x1e>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a34a:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 800a34e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a352:	f851 6b04 	ldr.w	r6, [r1], #4
 800a356:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 800a358:	3401      	adds	r4, #1
 800a35a:	42ac      	cmp	r4, r5
 800a35c:	d3f5      	bcc.n	800a34a <USB_WritePacket+0xe>
}
 800a35e:	2000      	movs	r0, #0
 800a360:	bc70      	pop	{r4, r5, r6}
 800a362:	4770      	bx	lr

0800a364 <USB_EPStartXfer>:
{
 800a364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a366:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 800a368:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a36a:	784c      	ldrb	r4, [r1, #1]
 800a36c:	2c01      	cmp	r4, #1
 800a36e:	d029      	beq.n	800a3c4 <USB_EPStartXfer+0x60>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a370:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a374:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 800a378:	6926      	ldr	r6, [r4, #16]
 800a37a:	4d7d      	ldr	r5, [pc, #500]	; (800a570 <USB_EPStartXfer+0x20c>)
 800a37c:	4035      	ands	r5, r6
 800a37e:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a380:	6926      	ldr	r6, [r4, #16]
 800a382:	4d7c      	ldr	r5, [pc, #496]	; (800a574 <USB_EPStartXfer+0x210>)
 800a384:	4035      	ands	r5, r6
 800a386:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 800a388:	694d      	ldr	r5, [r1, #20]
 800a38a:	2d00      	cmp	r5, #0
 800a38c:	f040 80c1 	bne.w	800a512 <USB_EPStartXfer+0x1ae>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a390:	6925      	ldr	r5, [r4, #16]
 800a392:	688e      	ldr	r6, [r1, #8]
 800a394:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800a398:	4335      	orrs	r5, r6
 800a39a:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a39c:	6925      	ldr	r5, [r4, #16]
 800a39e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800a3a2:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 800a3a4:	2a01      	cmp	r2, #1
 800a3a6:	f000 80c9 	beq.w	800a53c <USB_EPStartXfer+0x1d8>
    if (ep->type == EP_TYPE_ISOC)
 800a3aa:	78ca      	ldrb	r2, [r1, #3]
 800a3ac:	2a01      	cmp	r2, #1
 800a3ae:	f000 80cb 	beq.w	800a548 <USB_EPStartXfer+0x1e4>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a3b2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a3b6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a3ba:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800a3be:	2000      	movs	r0, #0
 800a3c0:	b003      	add	sp, #12
 800a3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 800a3c4:	694c      	ldr	r4, [r1, #20]
 800a3c6:	bb74      	cbnz	r4, 800a426 <USB_EPStartXfer+0xc2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3c8:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800a3cc:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800a3d0:	4d68      	ldr	r5, [pc, #416]	; (800a574 <USB_EPStartXfer+0x210>)
 800a3d2:	4035      	ands	r5, r6
 800a3d4:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a3d8:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800a3dc:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800a3e0:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3e4:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800a3e8:	4d61      	ldr	r5, [pc, #388]	; (800a570 <USB_EPStartXfer+0x20c>)
 800a3ea:	4035      	ands	r5, r6
 800a3ec:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 800a3f0:	2a01      	cmp	r2, #1
 800a3f2:	d04a      	beq.n	800a48a <USB_EPStartXfer+0x126>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a3f4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a3f8:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800a3fc:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800a400:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800a404:	78cc      	ldrb	r4, [r1, #3]
 800a406:	2c01      	cmp	r4, #1
 800a408:	d068      	beq.n	800a4dc <USB_EPStartXfer+0x178>
        if (ep->xfer_len > 0U)
 800a40a:	694b      	ldr	r3, [r1, #20]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d0d6      	beq.n	800a3be <USB_EPStartXfer+0x5a>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a410:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800a414:	7809      	ldrb	r1, [r1, #0]
 800a416:	f001 040f 	and.w	r4, r1, #15
 800a41a:	2101      	movs	r1, #1
 800a41c:	40a1      	lsls	r1, r4
 800a41e:	430a      	orrs	r2, r1
 800a420:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 800a424:	e7cb      	b.n	800a3be <USB_EPStartXfer+0x5a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a426:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800a42a:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800a42e:	4d50      	ldr	r5, [pc, #320]	; (800a570 <USB_EPStartXfer+0x20c>)
 800a430:	4035      	ands	r5, r6
 800a432:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a436:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800a43a:	4d4e      	ldr	r5, [pc, #312]	; (800a574 <USB_EPStartXfer+0x210>)
 800a43c:	4035      	ands	r5, r6
 800a43e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a442:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800a446:	694d      	ldr	r5, [r1, #20]
 800a448:	688f      	ldr	r7, [r1, #8]
 800a44a:	443d      	add	r5, r7
 800a44c:	3d01      	subs	r5, #1
 800a44e:	fbb5 f5f7 	udiv	r5, r5, r7
 800a452:	4f49      	ldr	r7, [pc, #292]	; (800a578 <USB_EPStartXfer+0x214>)
 800a454:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 800a458:	4335      	orrs	r5, r6
 800a45a:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a45e:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800a462:	694e      	ldr	r6, [r1, #20]
 800a464:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800a468:	4335      	orrs	r5, r6
 800a46a:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a46e:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800a472:	78cd      	ldrb	r5, [r1, #3]
 800a474:	2d01      	cmp	r5, #1
 800a476:	d1bb      	bne.n	800a3f0 <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a478:	6925      	ldr	r5, [r4, #16]
 800a47a:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800a47e:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a480:	6925      	ldr	r5, [r4, #16]
 800a482:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a486:	6125      	str	r5, [r4, #16]
 800a488:	e7b2      	b.n	800a3f0 <USB_EPStartXfer+0x8c>
      if ((uint32_t)ep->dma_addr != 0U)
 800a48a:	690a      	ldr	r2, [r1, #16]
 800a48c:	b11a      	cbz	r2, 800a496 <USB_EPStartXfer+0x132>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a48e:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800a492:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 800a496:	78ca      	ldrb	r2, [r1, #3]
 800a498:	2a01      	cmp	r2, #1
 800a49a:	d008      	beq.n	800a4ae <USB_EPStartXfer+0x14a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a49c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a4a0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a4a4:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a4a8:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800a4ac:	e787      	b.n	800a3be <USB_EPStartXfer+0x5a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a4ae:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800a4b2:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a4b6:	d108      	bne.n	800a4ca <USB_EPStartXfer+0x166>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a4b8:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800a4bc:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 800a4c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a4c4:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 800a4c8:	e7e8      	b.n	800a49c <USB_EPStartXfer+0x138>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a4ca:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800a4ce:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 800a4d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a4d6:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 800a4da:	e7df      	b.n	800a49c <USB_EPStartXfer+0x138>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a4dc:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800a4e0:	f414 7f80 	tst.w	r4, #256	; 0x100
 800a4e4:	d10e      	bne.n	800a504 <USB_EPStartXfer+0x1a0>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a4e6:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800a4ea:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800a4ee:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 800a4f2:	4614      	mov	r4, r2
 800a4f4:	460b      	mov	r3, r1
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a4f6:	68c9      	ldr	r1, [r1, #12]
 800a4f8:	781a      	ldrb	r2, [r3, #0]
 800a4fa:	8a9b      	ldrh	r3, [r3, #20]
 800a4fc:	9400      	str	r4, [sp, #0]
 800a4fe:	f7ff ff1d 	bl	800a33c <USB_WritePacket>
 800a502:	e75c      	b.n	800a3be <USB_EPStartXfer+0x5a>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a504:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800a508:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800a50c:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 800a510:	e7ef      	b.n	800a4f2 <USB_EPStartXfer+0x18e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a512:	688e      	ldr	r6, [r1, #8]
 800a514:	4435      	add	r5, r6
 800a516:	3d01      	subs	r5, #1
 800a518:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a51c:	6926      	ldr	r6, [r4, #16]
 800a51e:	4f16      	ldr	r7, [pc, #88]	; (800a578 <USB_EPStartXfer+0x214>)
 800a520:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 800a524:	433e      	orrs	r6, r7
 800a526:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a528:	6927      	ldr	r7, [r4, #16]
 800a52a:	688e      	ldr	r6, [r1, #8]
 800a52c:	b2ad      	uxth	r5, r5
 800a52e:	fb06 f505 	mul.w	r5, r6, r5
 800a532:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800a536:	433d      	orrs	r5, r7
 800a538:	6125      	str	r5, [r4, #16]
 800a53a:	e733      	b.n	800a3a4 <USB_EPStartXfer+0x40>
      if ((uint32_t)ep->xfer_buff != 0U)
 800a53c:	68ca      	ldr	r2, [r1, #12]
 800a53e:	2a00      	cmp	r2, #0
 800a540:	f43f af33 	beq.w	800a3aa <USB_EPStartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a544:	6162      	str	r2, [r4, #20]
 800a546:	e730      	b.n	800a3aa <USB_EPStartXfer+0x46>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a548:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800a54c:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a550:	d106      	bne.n	800a560 <USB_EPStartXfer+0x1fc>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a552:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a556:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a55a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800a55e:	e728      	b.n	800a3b2 <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a560:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a564:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a568:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800a56c:	e721      	b.n	800a3b2 <USB_EPStartXfer+0x4e>
 800a56e:	bf00      	nop
 800a570:	fff80000 	.word	0xfff80000
 800a574:	e007ffff 	.word	0xe007ffff
 800a578:	1ff80000 	.word	0x1ff80000

0800a57c <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a57c:	3203      	adds	r2, #3
 800a57e:	0892      	lsrs	r2, r2, #2
  for (i = 0U; i < count32b; i++)
 800a580:	2300      	movs	r3, #0
 800a582:	4293      	cmp	r3, r2
 800a584:	d20c      	bcs.n	800a5a0 <USB_ReadPacket+0x24>
{
 800a586:	b410      	push	{r4}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a588:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 800a58c:	6824      	ldr	r4, [r4, #0]
 800a58e:	f841 4b04 	str.w	r4, [r1], #4
  for (i = 0U; i < count32b; i++)
 800a592:	3301      	adds	r3, #1
 800a594:	4293      	cmp	r3, r2
 800a596:	d3f7      	bcc.n	800a588 <USB_ReadPacket+0xc>
}
 800a598:	4608      	mov	r0, r1
 800a59a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	4608      	mov	r0, r1
 800a5a2:	4770      	bx	lr

0800a5a4 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800a5a4:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a5a6:	784a      	ldrb	r2, [r1, #1]
 800a5a8:	2a01      	cmp	r2, #1
 800a5aa:	d014      	beq.n	800a5d6 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a5ac:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a5b0:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800a5b4:	2a00      	cmp	r2, #0
 800a5b6:	db06      	blt.n	800a5c6 <USB_EPSetStall+0x22>
 800a5b8:	b12b      	cbz	r3, 800a5c6 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a5ba:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a5be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a5c2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a5c6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a5ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a5ce:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a5d6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a5da:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800a5de:	2a00      	cmp	r2, #0
 800a5e0:	db06      	blt.n	800a5f0 <USB_EPSetStall+0x4c>
 800a5e2:	b12b      	cbz	r3, 800a5f0 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a5e4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a5e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a5ec:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a5f0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a5f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a5f8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800a5fc:	e7e9      	b.n	800a5d2 <USB_EPSetStall+0x2e>

0800a5fe <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800a5fe:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a600:	784a      	ldrb	r2, [r1, #1]
 800a602:	2a01      	cmp	r2, #1
 800a604:	d00e      	beq.n	800a624 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a606:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a60a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a60e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a612:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a616:	78cb      	ldrb	r3, [r1, #3]
 800a618:	3b02      	subs	r3, #2
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d915      	bls.n	800a64c <USB_EPClearStall+0x4e>
}
 800a620:	2000      	movs	r0, #0
 800a622:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a624:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a628:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a62c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a630:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a634:	78cb      	ldrb	r3, [r1, #3]
 800a636:	3b02      	subs	r3, #2
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d8f0      	bhi.n	800a620 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a63e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a646:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800a64a:	e7e9      	b.n	800a620 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a64c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a654:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800a658:	e7e2      	b.n	800a620 <USB_EPClearStall+0x22>

0800a65a <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a65a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800a65e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a662:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a666:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800a66a:	0109      	lsls	r1, r1, #4
 800a66c:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800a670:	430b      	orrs	r3, r1
 800a672:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
}
 800a676:	2000      	movs	r0, #0
 800a678:	4770      	bx	lr

0800a67a <USB_DevConnect>:
{
 800a67a:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a67c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800a680:	f023 0302 	bic.w	r3, r3, #2
 800a684:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800a688:	2003      	movs	r0, #3
 800a68a:	f7f6 f85f 	bl	800074c <HAL_Delay>
}
 800a68e:	2000      	movs	r0, #0
 800a690:	bd08      	pop	{r3, pc}

0800a692 <USB_DevDisconnect>:
{
 800a692:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a694:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800a698:	f043 0302 	orr.w	r3, r3, #2
 800a69c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800a6a0:	2003      	movs	r0, #3
 800a6a2:	f7f6 f853 	bl	800074c <HAL_Delay>
}
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	bd08      	pop	{r3, pc}

0800a6aa <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800a6aa:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800a6ac:	6980      	ldr	r0, [r0, #24]
}
 800a6ae:	4010      	ands	r0, r2
 800a6b0:	4770      	bx	lr

0800a6b2 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a6b2:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800a6b6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a6ba:	69c0      	ldr	r0, [r0, #28]
 800a6bc:	4018      	ands	r0, r3
}
 800a6be:	0c00      	lsrs	r0, r0, #16
 800a6c0:	4770      	bx	lr

0800a6c2 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a6c2:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800a6c6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a6ca:	69c0      	ldr	r0, [r0, #28]
 800a6cc:	4018      	ands	r0, r3
}
 800a6ce:	b280      	uxth	r0, r0
 800a6d0:	4770      	bx	lr

0800a6d2 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a6d2:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800a6d6:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a6da:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800a6de:	6940      	ldr	r0, [r0, #20]
}
 800a6e0:	4010      	ands	r0, r2
 800a6e2:	4770      	bx	lr

0800a6e4 <USB_ReadDevInEPInterrupt>:
{
 800a6e4:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 800a6e6:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a6ea:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a6ee:	f001 020f 	and.w	r2, r1, #15
 800a6f2:	40d3      	lsrs	r3, r2
 800a6f4:	01db      	lsls	r3, r3, #7
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a6fa:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800a6fe:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800a702:	6880      	ldr	r0, [r0, #8]
}
 800a704:	4018      	ands	r0, r3
 800a706:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800a70c:	6940      	ldr	r0, [r0, #20]
}
 800a70e:	f000 0001 	and.w	r0, r0, #1
 800a712:	4770      	bx	lr

0800a714 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a714:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800a718:	4b05      	ldr	r3, [pc, #20]	; (800a730 <USB_ActivateSetup+0x1c>)
 800a71a:	4013      	ands	r3, r2
 800a71c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a720:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800a724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a728:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800a72c:	2000      	movs	r0, #0
 800a72e:	4770      	bx	lr
 800a730:	fffff800 	.word	0xfffff800

0800a734 <USB_EP0_OutStart>:
{
 800a734:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a736:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a738:	4b15      	ldr	r3, [pc, #84]	; (800a790 <USB_EP0_OutStart+0x5c>)
 800a73a:	429c      	cmp	r4, r3
 800a73c:	d903      	bls.n	800a746 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a73e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a742:	2b00      	cmp	r3, #0
 800a744:	db16      	blt.n	800a774 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a746:	2400      	movs	r4, #0
 800a748:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a74c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800a750:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a754:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a758:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800a75c:	f044 0418 	orr.w	r4, r4, #24
 800a760:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a764:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800a768:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800a76c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 800a770:	2901      	cmp	r1, #1
 800a772:	d003      	beq.n	800a77c <USB_EP0_OutStart+0x48>
}
 800a774:	2000      	movs	r0, #0
 800a776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a77a:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a77c:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a780:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a784:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a788:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800a78c:	e7f2      	b.n	800a774 <USB_EP0_OutStart+0x40>
 800a78e:	bf00      	nop
 800a790:	4f54300a 	.word	0x4f54300a

0800a794 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a794:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a796:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a79a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800a79e:	b15b      	cbz	r3, 800a7b8 <USBD_CDC_EP0_RxReady+0x24>
 800a7a0:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800a7a4:	28ff      	cmp	r0, #255	; 0xff
 800a7a6:	d007      	beq.n	800a7b8 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800a7ae:	4621      	mov	r1, r4
 800a7b0:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800a7b2:	23ff      	movs	r3, #255	; 0xff
 800a7b4:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	bd10      	pop	{r4, pc}

0800a7bc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a7bc:	2343      	movs	r3, #67	; 0x43
 800a7be:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800a7c0:	4800      	ldr	r0, [pc, #0]	; (800a7c4 <USBD_CDC_GetFSCfgDesc+0x8>)
 800a7c2:	4770      	bx	lr
 800a7c4:	20000008 	.word	0x20000008

0800a7c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a7c8:	2343      	movs	r3, #67	; 0x43
 800a7ca:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800a7cc:	4800      	ldr	r0, [pc, #0]	; (800a7d0 <USBD_CDC_GetHSCfgDesc+0x8>)
 800a7ce:	4770      	bx	lr
 800a7d0:	2000004c 	.word	0x2000004c

0800a7d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a7d4:	2343      	movs	r3, #67	; 0x43
 800a7d6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800a7d8:	4800      	ldr	r0, [pc, #0]	; (800a7dc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800a7da:	4770      	bx	lr
 800a7dc:	20000090 	.word	0x20000090

0800a7e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a7e0:	230a      	movs	r3, #10
 800a7e2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800a7e4:	4800      	ldr	r0, [pc, #0]	; (800a7e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800a7e6:	4770      	bx	lr
 800a7e8:	200000d4 	.word	0x200000d4

0800a7ec <USBD_CDC_DataOut>:
{
 800a7ec:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7ee:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800a7f2:	b175      	cbz	r5, 800a812 <USBD_CDC_DataOut+0x26>
 800a7f4:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a7f6:	f003 fc20 	bl	800e03a <USBD_LL_GetRxDataSize>
 800a7fa:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a7fe:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800a808:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800a80c:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800a80e:	2000      	movs	r0, #0
}
 800a810:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800a812:	2003      	movs	r0, #3
 800a814:	e7fc      	b.n	800a810 <USBD_CDC_DataOut+0x24>

0800a816 <USBD_CDC_DataIn>:
{
 800a816:	b570      	push	{r4, r5, r6, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a818:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 800a81c:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 800a820:	b355      	cbz	r5, 800a878 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a822:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800a826:	0093      	lsls	r3, r2, #2
 800a828:	4403      	add	r3, r0
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	b96b      	cbnz	r3, 800a84a <USBD_CDC_DataIn+0x34>
    hcdc->TxState = 0U;
 800a82e:	2400      	movs	r4, #0
 800a830:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a834:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	460a      	mov	r2, r1
 800a83c:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800a840:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 800a844:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800a846:	4620      	mov	r0, r4
}
 800a848:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a84a:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 800a84e:	00b2      	lsls	r2, r6, #2
 800a850:	4414      	add	r4, r2
 800a852:	6c64      	ldr	r4, [r4, #68]	; 0x44
 800a854:	fbb3 f2f4 	udiv	r2, r3, r4
 800a858:	fb04 3312 	mls	r3, r4, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1e6      	bne.n	800a82e <USBD_CDC_DataIn+0x18>
    pdev->ep_in[epnum].total_length = 0U;
 800a860:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800a864:	0093      	lsls	r3, r2, #2
 800a866:	4403      	add	r3, r0
 800a868:	2400      	movs	r4, #0
 800a86a:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a86c:	4623      	mov	r3, r4
 800a86e:	4622      	mov	r2, r4
 800a870:	f003 fc25 	bl	800e0be <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800a874:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a876:	e7e7      	b.n	800a848 <USBD_CDC_DataIn+0x32>
    return (uint8_t)USBD_FAIL;
 800a878:	2003      	movs	r0, #3
 800a87a:	e7e5      	b.n	800a848 <USBD_CDC_DataIn+0x32>

0800a87c <USBD_CDC_Setup>:
{
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	4605      	mov	r5, r0
 800a882:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a884:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800a888:	2300      	movs	r3, #0
 800a88a:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800a88e:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a892:	780b      	ldrb	r3, [r1, #0]
 800a894:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 800a898:	d027      	beq.n	800a8ea <USBD_CDC_Setup+0x6e>
 800a89a:	2a20      	cmp	r2, #32
 800a89c:	d15b      	bne.n	800a956 <USBD_CDC_Setup+0xda>
    if (req->wLength != 0U)
 800a89e:	88ca      	ldrh	r2, [r1, #6]
 800a8a0:	b93a      	cbnz	r2, 800a8b2 <USBD_CDC_Setup+0x36>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a8a2:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	7848      	ldrb	r0, [r1, #1]
 800a8ac:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	e054      	b.n	800a95c <USBD_CDC_Setup+0xe0>
      if ((req->bmRequest & 0x80U) != 0U)
 800a8b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a8b6:	d00c      	beq.n	800a8d2 <USBD_CDC_Setup+0x56>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a8b8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	4631      	mov	r1, r6
 800a8c0:	7860      	ldrb	r0, [r4, #1]
 800a8c2:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a8c4:	88e2      	ldrh	r2, [r4, #6]
 800a8c6:	4631      	mov	r1, r6
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f000 fdef 	bl	800b4ac <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	e044      	b.n	800a95c <USBD_CDC_Setup+0xe0>
        hcdc->CmdOpCode = req->bRequest;
 800a8d2:	784b      	ldrb	r3, [r1, #1]
 800a8d4:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800a8d8:	798b      	ldrb	r3, [r1, #6]
 800a8da:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a8de:	88ca      	ldrh	r2, [r1, #6]
 800a8e0:	4631      	mov	r1, r6
 800a8e2:	f000 fdf8 	bl	800b4d6 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	e038      	b.n	800a95c <USBD_CDC_Setup+0xe0>
    switch (req->bRequest)
 800a8ea:	784b      	ldrb	r3, [r1, #1]
 800a8ec:	2b0b      	cmp	r3, #11
 800a8ee:	d82e      	bhi.n	800a94e <USBD_CDC_Setup+0xd2>
 800a8f0:	e8df f003 	tbb	[pc, r3]
 800a8f4:	2d2d3606 	.word	0x2d2d3606
 800a8f8:	2d2d2d2d 	.word	0x2d2d2d2d
 800a8fc:	23142d2d 	.word	0x23142d2d
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a900:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a904:	2b03      	cmp	r3, #3
 800a906:	d105      	bne.n	800a914 <USBD_CDC_Setup+0x98>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a908:	2202      	movs	r2, #2
 800a90a:	a901      	add	r1, sp, #4
 800a90c:	f000 fdce 	bl	800b4ac <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a910:	2000      	movs	r0, #0
 800a912:	e023      	b.n	800a95c <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 800a914:	f000 fa80 	bl	800ae18 <USBD_CtlError>
        ret = USBD_FAIL;
 800a918:	2003      	movs	r0, #3
 800a91a:	e01f      	b.n	800a95c <USBD_CDC_Setup+0xe0>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a91c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a920:	2b03      	cmp	r3, #3
 800a922:	d106      	bne.n	800a932 <USBD_CDC_Setup+0xb6>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a924:	2201      	movs	r2, #1
 800a926:	f10d 0107 	add.w	r1, sp, #7
 800a92a:	f000 fdbf 	bl	800b4ac <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a92e:	2000      	movs	r0, #0
 800a930:	e014      	b.n	800a95c <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 800a932:	f000 fa71 	bl	800ae18 <USBD_CtlError>
        ret = USBD_FAIL;
 800a936:	2003      	movs	r0, #3
 800a938:	e010      	b.n	800a95c <USBD_CDC_Setup+0xe0>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a93a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a93e:	2b03      	cmp	r3, #3
 800a940:	d101      	bne.n	800a946 <USBD_CDC_Setup+0xca>
  USBD_StatusTypeDef ret = USBD_OK;
 800a942:	2000      	movs	r0, #0
 800a944:	e00a      	b.n	800a95c <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 800a946:	f000 fa67 	bl	800ae18 <USBD_CtlError>
        ret = USBD_FAIL;
 800a94a:	2003      	movs	r0, #3
 800a94c:	e006      	b.n	800a95c <USBD_CDC_Setup+0xe0>
      USBD_CtlError(pdev, req);
 800a94e:	f000 fa63 	bl	800ae18 <USBD_CtlError>
      ret = USBD_FAIL;
 800a952:	2003      	movs	r0, #3
      break;
 800a954:	e002      	b.n	800a95c <USBD_CDC_Setup+0xe0>
    USBD_CtlError(pdev, req);
 800a956:	f000 fa5f 	bl	800ae18 <USBD_CtlError>
    ret = USBD_FAIL;
 800a95a:	2003      	movs	r0, #3
}
 800a95c:	b002      	add	sp, #8
 800a95e:	bd70      	pop	{r4, r5, r6, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 800a960:	2000      	movs	r0, #0
 800a962:	e7fb      	b.n	800a95c <USBD_CDC_Setup+0xe0>

0800a964 <USBD_CDC_DeInit>:
{
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a968:	2181      	movs	r1, #129	; 0x81
 800a96a:	f003 fb88 	bl	800e07e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a96e:	2500      	movs	r5, #0
 800a970:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a972:	2101      	movs	r1, #1
 800a974:	4620      	mov	r0, r4
 800a976:	f003 fb82 	bl	800e07e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a97a:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a97e:	2182      	movs	r1, #130	; 0x82
 800a980:	4620      	mov	r0, r4
 800a982:	f003 fb7c 	bl	800e07e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a986:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a98a:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 800a98e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800a992:	b14b      	cbz	r3, 800a9a8 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a994:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a99c:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800a9a0:	f003 fc8c 	bl	800e2bc <free>
    pdev->pClassData = NULL;
 800a9a4:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	bd38      	pop	{r3, r4, r5, pc}

0800a9ac <USBD_CDC_Init>:
{
 800a9ac:	b570      	push	{r4, r5, r6, lr}
 800a9ae:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a9b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a9b4:	f003 fc7a 	bl	800e2ac <malloc>
  if (hcdc == NULL)
 800a9b8:	b3b0      	cbz	r0, 800aa28 <USBD_CDC_Init+0x7c>
 800a9ba:	4605      	mov	r5, r0
  pdev->pClassData = (void *)hcdc;
 800a9bc:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9c0:	7c23      	ldrb	r3, [r4, #16]
 800a9c2:	bbb3      	cbnz	r3, 800aa32 <USBD_CDC_Init+0x86>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a9c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9c8:	2202      	movs	r2, #2
 800a9ca:	2181      	movs	r1, #129	; 0x81
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f003 fb4b 	bl	800e068 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a9d2:	2601      	movs	r6, #1
 800a9d4:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a9d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9da:	2202      	movs	r2, #2
 800a9dc:	4631      	mov	r1, r6
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f003 fb42 	bl	800e068 <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a9e4:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a9e8:	2310      	movs	r3, #16
 800a9ea:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a9ee:	2308      	movs	r3, #8
 800a9f0:	2203      	movs	r2, #3
 800a9f2:	2182      	movs	r1, #130	; 0x82
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f003 fb37 	bl	800e068 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800aa00:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4798      	blx	r3
  hcdc->TxState = 0U;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800aa0e:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa12:	7c23      	ldrb	r3, [r4, #16]
 800aa14:	b30b      	cbz	r3, 800aa5a <USBD_CDC_Init+0xae>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aa16:	2340      	movs	r3, #64	; 0x40
 800aa18:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800aa1c:	2101      	movs	r1, #1
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f003 fb55 	bl	800e0ce <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800aa24:	2000      	movs	r0, #0
}
 800aa26:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800aa2e:	2002      	movs	r0, #2
 800aa30:	e7f9      	b.n	800aa26 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aa32:	2340      	movs	r3, #64	; 0x40
 800aa34:	2202      	movs	r2, #2
 800aa36:	2181      	movs	r1, #129	; 0x81
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f003 fb15 	bl	800e068 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aa3e:	2601      	movs	r6, #1
 800aa40:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aa42:	2340      	movs	r3, #64	; 0x40
 800aa44:	2202      	movs	r2, #2
 800aa46:	4631      	mov	r1, r6
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f003 fb0d 	bl	800e068 <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aa4e:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aa52:	2310      	movs	r3, #16
 800aa54:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800aa58:	e7c9      	b.n	800a9ee <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aa5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa5e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800aa62:	2101      	movs	r1, #1
 800aa64:	4620      	mov	r0, r4
 800aa66:	f003 fb32 	bl	800e0ce <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	e7db      	b.n	800aa26 <USBD_CDC_Init+0x7a>

0800aa6e <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800aa6e:	b119      	cbz	r1, 800aa78 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800aa70:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800aa74:	2000      	movs	r0, #0
 800aa76:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800aa78:	2003      	movs	r0, #3
}
 800aa7a:	4770      	bx	lr

0800aa7c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa7c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
 800aa80:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aa84:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
}
 800aa88:	2000      	movs	r0, #0
 800aa8a:	4770      	bx	lr

0800aa8c <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa8c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->RxBuffer = pbuff;
 800aa90:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
}
 800aa94:	2000      	movs	r0, #0
 800aa96:	4770      	bx	lr

0800aa98 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa98:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800aa9c:	b1a2      	cbz	r2, 800aac8 <USBD_CDC_TransmitPacket+0x30>
{
 800aa9e:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800aaa0:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 800aaa4:	b10b      	cbz	r3, 800aaaa <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800aaa6:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800aaa8:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800aab0:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800aab4:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800aab6:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800aaba:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800aabe:	2181      	movs	r1, #129	; 0x81
 800aac0:	f003 fafd 	bl	800e0be <USBD_LL_Transmit>
    ret = USBD_OK;
 800aac4:	2000      	movs	r0, #0
 800aac6:	e7ef      	b.n	800aaa8 <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 800aac8:	2003      	movs	r0, #3
}
 800aaca:	4770      	bx	lr

0800aacc <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aacc:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800aad0:	b19a      	cbz	r2, 800aafa <USBD_CDC_ReceivePacket+0x2e>
{
 800aad2:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aad4:	7c03      	ldrb	r3, [r0, #16]
 800aad6:	b13b      	cbz	r3, 800aae8 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aad8:	2340      	movs	r3, #64	; 0x40
 800aada:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800aade:	2101      	movs	r1, #1
 800aae0:	f003 faf5 	bl	800e0ce <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aae4:	2000      	movs	r0, #0
}
 800aae6:	bd08      	pop	{r3, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aaec:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800aaf0:	2101      	movs	r1, #1
 800aaf2:	f003 faec 	bl	800e0ce <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	e7f5      	b.n	800aae6 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 800aafa:	2003      	movs	r0, #3
}
 800aafc:	4770      	bx	lr

0800aafe <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aafe:	b1c0      	cbz	r0, 800ab32 <USBD_Init+0x34>
{
 800ab00:	b508      	push	{r3, lr}
 800ab02:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800ab04:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 800ab08:	b110      	cbz	r0, 800ab10 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800ab10:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 800ab14:	b110      	cbz	r0, 800ab1c <USBD_Init+0x1e>
  {
    pdev->pConfDesc = NULL;
 800ab16:	2000      	movs	r0, #0
 800ab18:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ab1c:	b109      	cbz	r1, 800ab22 <USBD_Init+0x24>
  {
    pdev->pDesc = pdesc;
 800ab1e:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
 800ab22:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab24:	2301      	movs	r3, #1
 800ab26:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 800ab2a:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ab2c:	f003 fa34 	bl	800df98 <USBD_LL_Init>

  return ret;
}
 800ab30:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800ab32:	2003      	movs	r0, #3
}
 800ab34:	4770      	bx	lr

0800ab36 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ab36:	b510      	push	{r4, lr}
 800ab38:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800ab40:	b159      	cbz	r1, 800ab5a <USBD_RegisterClass+0x24>
 800ab42:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ab44:	f8c4 12b8 	str.w	r1, [r4, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ab48:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800ab4a:	f10d 0006 	add.w	r0, sp, #6
 800ab4e:	4798      	blx	r3
 800ab50:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800ab54:	2000      	movs	r0, #0
}
 800ab56:	b002      	add	sp, #8
 800ab58:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800ab5a:	2003      	movs	r0, #3
 800ab5c:	e7fb      	b.n	800ab56 <USBD_RegisterClass+0x20>

0800ab5e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab5e:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ab60:	f003 fa7a 	bl	800e058 <USBD_LL_Start>
}
 800ab64:	bd08      	pop	{r3, pc}

0800ab66 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab66:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800ab68:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ab6c:	b113      	cbz	r3, 800ab74 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4798      	blx	r3
  }

  return ret;
}
 800ab72:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ab74:	2003      	movs	r0, #3
 800ab76:	e7fc      	b.n	800ab72 <USBD_SetClassConfig+0xc>

0800ab78 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab78:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ab7a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ab7e:	b10b      	cbz	r3, 800ab84 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	4798      	blx	r3
  }

  return USBD_OK;
}
 800ab84:	2000      	movs	r0, #0
 800ab86:	bd08      	pop	{r3, pc}

0800ab88 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ab8c:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800ab90:	4628      	mov	r0, r5
 800ab92:	f000 f92d 	bl	800adf0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ab96:	2301      	movs	r3, #1
 800ab98:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ab9c:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800aba0:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aba4:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800aba8:	f001 031f 	and.w	r3, r1, #31
 800abac:	2b01      	cmp	r3, #1
 800abae:	d00d      	beq.n	800abcc <USBD_LL_SetupStage+0x44>
 800abb0:	b13b      	cbz	r3, 800abc2 <USBD_LL_SetupStage+0x3a>
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	d00f      	beq.n	800abd6 <USBD_LL_SetupStage+0x4e>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800abb6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800abba:	4620      	mov	r0, r4
 800abbc:	f003 fa67 	bl	800e08e <USBD_LL_StallEP>
      break;
 800abc0:	e003      	b.n	800abca <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800abc2:	4629      	mov	r1, r5
 800abc4:	4620      	mov	r0, r4
 800abc6:	f000 face 	bl	800b166 <USBD_StdDevReq>
  }

  return ret;
}
 800abca:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800abcc:	4629      	mov	r1, r5
 800abce:	4620      	mov	r0, r4
 800abd0:	f000 fb04 	bl	800b1dc <USBD_StdItfReq>
      break;
 800abd4:	e7f9      	b.n	800abca <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800abd6:	4629      	mov	r1, r5
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 fb33 	bl	800b244 <USBD_StdEPReq>
      break;
 800abde:	e7f4      	b.n	800abca <USBD_LL_SetupStage+0x42>

0800abe0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800abe0:	b510      	push	{r4, lr}
 800abe2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800abe4:	bb29      	cbnz	r1, 800ac32 <USBD_LL_DataOutStage+0x52>
 800abe6:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800abe8:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800abec:	2a03      	cmp	r2, #3
 800abee:	d001      	beq.n	800abf4 <USBD_LL_DataOutStage+0x14>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800abf0:	2000      	movs	r0, #0
 800abf2:	e029      	b.n	800ac48 <USBD_LL_DataOutStage+0x68>
      if (pep->rem_length > pep->maxpacket)
 800abf4:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800abf8:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800abfc:	4291      	cmp	r1, r2
 800abfe:	d80d      	bhi.n	800ac1c <USBD_LL_DataOutStage+0x3c>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ac00:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	b123      	cbz	r3, 800ac12 <USBD_LL_DataOutStage+0x32>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac08:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ac0c:	2a03      	cmp	r2, #3
 800ac0e:	d100      	bne.n	800ac12 <USBD_LL_DataOutStage+0x32>
          pdev->pClass->EP0_RxReady(pdev);
 800ac10:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 800ac12:	4620      	mov	r0, r4
 800ac14:	f000 fc76 	bl	800b504 <USBD_CtlSendStatus>
  return USBD_OK;
 800ac18:	2000      	movs	r0, #0
 800ac1a:	e015      	b.n	800ac48 <USBD_LL_DataOutStage+0x68>
        pep->rem_length -= pep->maxpacket;
 800ac1c:	1a89      	subs	r1, r1, r2
 800ac1e:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ac22:	428a      	cmp	r2, r1
 800ac24:	bf28      	it	cs
 800ac26:	460a      	movcs	r2, r1
 800ac28:	4619      	mov	r1, r3
 800ac2a:	f000 fc63 	bl	800b4f4 <USBD_CtlContinueRx>
  return USBD_OK;
 800ac2e:	2000      	movs	r0, #0
 800ac30:	e00a      	b.n	800ac48 <USBD_LL_DataOutStage+0x68>
 800ac32:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataOut != NULL) &&
 800ac34:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	b133      	cbz	r3, 800ac4a <USBD_LL_DataOutStage+0x6a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac3c:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ac40:	2903      	cmp	r1, #3
 800ac42:	d104      	bne.n	800ac4e <USBD_LL_DataOutStage+0x6e>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ac44:	4611      	mov	r1, r2
 800ac46:	4798      	blx	r3
}
 800ac48:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800ac4a:	2003      	movs	r0, #3
 800ac4c:	e7fc      	b.n	800ac48 <USBD_LL_DataOutStage+0x68>
 800ac4e:	2003      	movs	r0, #3
 800ac50:	e7fa      	b.n	800ac48 <USBD_LL_DataOutStage+0x68>

0800ac52 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ac52:	b510      	push	{r4, lr}
 800ac54:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ac56:	2900      	cmp	r1, #0
 800ac58:	d146      	bne.n	800ace8 <USBD_LL_DataInStage+0x96>
 800ac5a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac5c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800ac60:	2a02      	cmp	r2, #2
 800ac62:	d005      	beq.n	800ac70 <USBD_LL_DataInStage+0x1e>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ac64:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d039      	beq.n	800ace0 <USBD_LL_DataInStage+0x8e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	e046      	b.n	800acfe <USBD_LL_DataInStage+0xac>
      if (pep->rem_length > pep->maxpacket)
 800ac70:	69c2      	ldr	r2, [r0, #28]
 800ac72:	6a01      	ldr	r1, [r0, #32]
 800ac74:	428a      	cmp	r2, r1
 800ac76:	d813      	bhi.n	800aca0 <USBD_LL_DataInStage+0x4e>
        if ((pep->maxpacket == pep->rem_length) &&
 800ac78:	428a      	cmp	r2, r1
 800ac7a:	d01d      	beq.n	800acb8 <USBD_LL_DataInStage+0x66>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ac7c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	b12b      	cbz	r3, 800ac90 <USBD_LL_DataInStage+0x3e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac84:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ac88:	2a03      	cmp	r2, #3
 800ac8a:	d101      	bne.n	800ac90 <USBD_LL_DataInStage+0x3e>
            pdev->pClass->EP0_TxSent(pdev);
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac90:	2180      	movs	r1, #128	; 0x80
 800ac92:	4620      	mov	r0, r4
 800ac94:	f003 f9fb 	bl	800e08e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f000 fc3e 	bl	800b51a <USBD_CtlReceiveStatus>
 800ac9e:	e7e1      	b.n	800ac64 <USBD_LL_DataInStage+0x12>
        pep->rem_length -= pep->maxpacket;
 800aca0:	1a52      	subs	r2, r2, r1
 800aca2:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aca4:	4619      	mov	r1, r3
 800aca6:	f000 fc0e 	bl	800b4c6 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acaa:	2300      	movs	r3, #0
 800acac:	461a      	mov	r2, r3
 800acae:	4619      	mov	r1, r3
 800acb0:	4620      	mov	r0, r4
 800acb2:	f003 fa0c 	bl	800e0ce <USBD_LL_PrepareReceive>
 800acb6:	e7d5      	b.n	800ac64 <USBD_LL_DataInStage+0x12>
            (pep->total_length >= pep->maxpacket) &&
 800acb8:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800acba:	4299      	cmp	r1, r3
 800acbc:	d8de      	bhi.n	800ac7c <USBD_LL_DataInStage+0x2a>
            (pep->total_length < pdev->ep0_data_len))
 800acbe:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d2da      	bcs.n	800ac7c <USBD_LL_DataInStage+0x2a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800acc6:	2200      	movs	r2, #0
 800acc8:	4611      	mov	r1, r2
 800acca:	f000 fbfc 	bl	800b4c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800acce:	2100      	movs	r1, #0
 800acd0:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acd4:	460b      	mov	r3, r1
 800acd6:	460a      	mov	r2, r1
 800acd8:	4620      	mov	r0, r4
 800acda:	f003 f9f8 	bl	800e0ce <USBD_LL_PrepareReceive>
 800acde:	e7c1      	b.n	800ac64 <USBD_LL_DataInStage+0x12>
      pdev->dev_test_mode = 0U;
 800ace0:	2000      	movs	r0, #0
 800ace2:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 800ace6:	e00a      	b.n	800acfe <USBD_LL_DataInStage+0xac>
 800ace8:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataIn != NULL) &&
 800acea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800acee:	695b      	ldr	r3, [r3, #20]
 800acf0:	b133      	cbz	r3, 800ad00 <USBD_LL_DataInStage+0xae>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800acf2:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800acf6:	2903      	cmp	r1, #3
 800acf8:	d104      	bne.n	800ad04 <USBD_LL_DataInStage+0xb2>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800acfa:	4611      	mov	r1, r2
 800acfc:	4798      	blx	r3
}
 800acfe:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800ad00:	2003      	movs	r0, #3
 800ad02:	e7fc      	b.n	800acfe <USBD_LL_DataInStage+0xac>
 800ad04:	2003      	movs	r0, #3
 800ad06:	e7fa      	b.n	800acfe <USBD_LL_DataInStage+0xac>

0800ad08 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	4604      	mov	r4, r0
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ad12:	2300      	movs	r3, #0
 800ad14:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800ad18:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800ad1a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800ad1e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800ad22:	b123      	cbz	r3, 800ad2e <USBD_LL_Reset+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ad24:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad2e:	2340      	movs	r3, #64	; 0x40
 800ad30:	2200      	movs	r2, #0
 800ad32:	4611      	mov	r1, r2
 800ad34:	4620      	mov	r0, r4
 800ad36:	f003 f997 	bl	800e068 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ad3a:	2601      	movs	r6, #1
 800ad3c:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad40:	2540      	movs	r5, #64	; 0x40
 800ad42:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad46:	462b      	mov	r3, r5
 800ad48:	2200      	movs	r2, #0
 800ad4a:	2180      	movs	r1, #128	; 0x80
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	f003 f98b 	bl	800e068 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ad52:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad54:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 800ad56:	2000      	movs	r0, #0
 800ad58:	bd70      	pop	{r4, r5, r6, pc}

0800ad5a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800ad5a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	4770      	bx	lr

0800ad60 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800ad60:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ad64:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ad68:	2304      	movs	r3, #4
 800ad6a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800ad6e:	2000      	movs	r0, #0
 800ad70:	4770      	bx	lr

0800ad72 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ad72:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ad76:	2b04      	cmp	r3, #4
 800ad78:	d001      	beq.n	800ad7e <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800ad7a:	2000      	movs	r0, #0
 800ad7c:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800ad7e:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800ad82:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800ad86:	e7f8      	b.n	800ad7a <USBD_LL_Resume+0x8>

0800ad88 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ad88:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad8a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ad8e:	2b03      	cmp	r3, #3
 800ad90:	d001      	beq.n	800ad96 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 800ad92:	2000      	movs	r0, #0
 800ad94:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800ad96:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ad9a:	69db      	ldr	r3, [r3, #28]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d0f8      	beq.n	800ad92 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 800ada0:	4798      	blx	r3
 800ada2:	e7f6      	b.n	800ad92 <USBD_LL_SOF+0xa>

0800ada4 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800ada4:	2000      	movs	r0, #0
 800ada6:	4770      	bx	lr

0800ada8 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800ada8:	2000      	movs	r0, #0
 800adaa:	4770      	bx	lr

0800adac <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800adac:	2000      	movs	r0, #0
 800adae:	4770      	bx	lr

0800adb0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800adb0:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adb2:	2301      	movs	r3, #1
 800adb4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800adb8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800adbc:	b113      	cbz	r3, 800adc4 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	7901      	ldrb	r1, [r0, #4]
 800adc2:	4798      	blx	r3
  }

  return USBD_OK;
}
 800adc4:	2000      	movs	r0, #0
 800adc6:	bd08      	pop	{r3, pc}

0800adc8 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
 800adc8:	2300      	movs	r3, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800adca:	e002      	b.n	800add2 <USBD_GetLen+0xa>
  {
    len++;
 800adcc:	3301      	adds	r3, #1
 800adce:	b2db      	uxtb	r3, r3
    pbuff++;
 800add0:	3001      	adds	r0, #1
  while (*pbuff != (uint8_t)'\0')
 800add2:	7802      	ldrb	r2, [r0, #0]
 800add4:	2a00      	cmp	r2, #0
 800add6:	d1f9      	bne.n	800adcc <USBD_GetLen+0x4>
  }

  return len;
}
 800add8:	4618      	mov	r0, r3
 800adda:	4770      	bx	lr

0800addc <USBD_SetFeature>:
{
 800addc:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800adde:	884b      	ldrh	r3, [r1, #2]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d000      	beq.n	800ade6 <USBD_SetFeature+0xa>
}
 800ade4:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800ade6:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800adea:	f000 fb8b 	bl	800b504 <USBD_CtlSendStatus>
}
 800adee:	e7f9      	b.n	800ade4 <USBD_SetFeature+0x8>

0800adf0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800adf0:	780b      	ldrb	r3, [r1, #0]
 800adf2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800adf4:	784b      	ldrb	r3, [r1, #1]
 800adf6:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800adf8:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800adfa:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800adfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800ae00:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800ae02:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800ae04:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ae06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800ae0a:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800ae0c:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800ae0e:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ae10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800ae14:	80c3      	strh	r3, [r0, #6]
}
 800ae16:	4770      	bx	lr

0800ae18 <USBD_CtlError>:
{
 800ae18:	b510      	push	{r4, lr}
 800ae1a:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae1c:	2180      	movs	r1, #128	; 0x80
 800ae1e:	f003 f936 	bl	800e08e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ae22:	2100      	movs	r1, #0
 800ae24:	4620      	mov	r0, r4
 800ae26:	f003 f932 	bl	800e08e <USBD_LL_StallEP>
}
 800ae2a:	bd10      	pop	{r4, pc}

0800ae2c <USBD_GetDescriptor>:
{
 800ae2c:	b530      	push	{r4, r5, lr}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	4604      	mov	r4, r0
 800ae32:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800ae34:	2300      	movs	r3, #0
 800ae36:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800ae3a:	884a      	ldrh	r2, [r1, #2]
 800ae3c:	0a13      	lsrs	r3, r2, #8
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	2b06      	cmp	r3, #6
 800ae42:	f200 80ab 	bhi.w	800af9c <USBD_GetDescriptor+0x170>
 800ae46:	e8df f003 	tbb	[pc, r3]
 800ae4a:	1f04      	.short	0x1f04
 800ae4c:	8da9a933 	.word	0x8da9a933
 800ae50:	9a          	.byte	0x9a
 800ae51:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ae52:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f10d 0106 	add.w	r1, sp, #6
 800ae5c:	7c00      	ldrb	r0, [r0, #16]
 800ae5e:	4798      	blx	r3
    if (req->wLength != 0U)
 800ae60:	88ea      	ldrh	r2, [r5, #6]
 800ae62:	2a00      	cmp	r2, #0
 800ae64:	f000 80a3 	beq.w	800afae <USBD_GetDescriptor+0x182>
      if (len != 0U)
 800ae68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 8099 	beq.w	800afa4 <USBD_GetDescriptor+0x178>
        len = MIN(len, req->wLength);
 800ae72:	429a      	cmp	r2, r3
 800ae74:	bf28      	it	cs
 800ae76:	461a      	movcs	r2, r3
 800ae78:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae7c:	4601      	mov	r1, r0
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f000 fb14 	bl	800b4ac <USBD_CtlSendData>
}
 800ae84:	b003      	add	sp, #12
 800ae86:	bd30      	pop	{r4, r5, pc}
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae88:	7c03      	ldrb	r3, [r0, #16]
 800ae8a:	b943      	cbnz	r3, 800ae9e <USBD_GetDescriptor+0x72>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ae8c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ae90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae92:	f10d 0006 	add.w	r0, sp, #6
 800ae96:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae98:	2302      	movs	r3, #2
 800ae9a:	7043      	strb	r3, [r0, #1]
 800ae9c:	e7e0      	b.n	800ae60 <USBD_GetDescriptor+0x34>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ae9e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800aea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea4:	f10d 0006 	add.w	r0, sp, #6
 800aea8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aeaa:	2302      	movs	r3, #2
 800aeac:	7043      	strb	r3, [r0, #1]
 800aeae:	e7d7      	b.n	800ae60 <USBD_GetDescriptor+0x34>
    switch ((uint8_t)(req->wValue))
 800aeb0:	b2d2      	uxtb	r2, r2
 800aeb2:	2a05      	cmp	r2, #5
 800aeb4:	d852      	bhi.n	800af5c <USBD_GetDescriptor+0x130>
 800aeb6:	e8df f002 	tbb	[pc, r2]
 800aeba:	1003      	.short	0x1003
 800aebc:	44372a1d 	.word	0x44372a1d
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aec0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	b123      	cbz	r3, 800aed2 <USBD_GetDescriptor+0xa6>
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aec8:	f10d 0106 	add.w	r1, sp, #6
 800aecc:	7c00      	ldrb	r0, [r0, #16]
 800aece:	4798      	blx	r3
 800aed0:	e7c6      	b.n	800ae60 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800aed2:	4629      	mov	r1, r5
 800aed4:	f7ff ffa0 	bl	800ae18 <USBD_CtlError>
 800aed8:	e7d4      	b.n	800ae84 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aeda:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	b123      	cbz	r3, 800aeec <USBD_GetDescriptor+0xc0>
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aee2:	f10d 0106 	add.w	r1, sp, #6
 800aee6:	7c00      	ldrb	r0, [r0, #16]
 800aee8:	4798      	blx	r3
 800aeea:	e7b9      	b.n	800ae60 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800aeec:	4629      	mov	r1, r5
 800aeee:	f7ff ff93 	bl	800ae18 <USBD_CtlError>
 800aef2:	e7c7      	b.n	800ae84 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aef4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	b123      	cbz	r3, 800af06 <USBD_GetDescriptor+0xda>
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aefc:	f10d 0106 	add.w	r1, sp, #6
 800af00:	7c00      	ldrb	r0, [r0, #16]
 800af02:	4798      	blx	r3
 800af04:	e7ac      	b.n	800ae60 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800af06:	4629      	mov	r1, r5
 800af08:	f7ff ff86 	bl	800ae18 <USBD_CtlError>
 800af0c:	e7ba      	b.n	800ae84 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800af0e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	b123      	cbz	r3, 800af20 <USBD_GetDescriptor+0xf4>
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af16:	f10d 0106 	add.w	r1, sp, #6
 800af1a:	7c00      	ldrb	r0, [r0, #16]
 800af1c:	4798      	blx	r3
 800af1e:	e79f      	b.n	800ae60 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800af20:	4629      	mov	r1, r5
 800af22:	f7ff ff79 	bl	800ae18 <USBD_CtlError>
 800af26:	e7ad      	b.n	800ae84 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af28:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	b123      	cbz	r3, 800af3a <USBD_GetDescriptor+0x10e>
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af30:	f10d 0106 	add.w	r1, sp, #6
 800af34:	7c00      	ldrb	r0, [r0, #16]
 800af36:	4798      	blx	r3
 800af38:	e792      	b.n	800ae60 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800af3a:	4629      	mov	r1, r5
 800af3c:	f7ff ff6c 	bl	800ae18 <USBD_CtlError>
 800af40:	e7a0      	b.n	800ae84 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af42:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800af46:	699b      	ldr	r3, [r3, #24]
 800af48:	b123      	cbz	r3, 800af54 <USBD_GetDescriptor+0x128>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af4a:	f10d 0106 	add.w	r1, sp, #6
 800af4e:	7c00      	ldrb	r0, [r0, #16]
 800af50:	4798      	blx	r3
 800af52:	e785      	b.n	800ae60 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800af54:	4629      	mov	r1, r5
 800af56:	f7ff ff5f 	bl	800ae18 <USBD_CtlError>
 800af5a:	e793      	b.n	800ae84 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800af5c:	4629      	mov	r1, r5
 800af5e:	f7ff ff5b 	bl	800ae18 <USBD_CtlError>
 800af62:	e78f      	b.n	800ae84 <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af64:	7c03      	ldrb	r3, [r0, #16]
 800af66:	b933      	cbnz	r3, 800af76 <USBD_GetDescriptor+0x14a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800af68:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800af6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af6e:	f10d 0006 	add.w	r0, sp, #6
 800af72:	4798      	blx	r3
 800af74:	e774      	b.n	800ae60 <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 800af76:	4629      	mov	r1, r5
 800af78:	f7ff ff4e 	bl	800ae18 <USBD_CtlError>
 800af7c:	e782      	b.n	800ae84 <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af7e:	7c03      	ldrb	r3, [r0, #16]
 800af80:	b943      	cbnz	r3, 800af94 <USBD_GetDescriptor+0x168>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800af82:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800af86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af88:	f10d 0006 	add.w	r0, sp, #6
 800af8c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af8e:	2307      	movs	r3, #7
 800af90:	7043      	strb	r3, [r0, #1]
 800af92:	e765      	b.n	800ae60 <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 800af94:	4629      	mov	r1, r5
 800af96:	f7ff ff3f 	bl	800ae18 <USBD_CtlError>
 800af9a:	e773      	b.n	800ae84 <USBD_GetDescriptor+0x58>
    USBD_CtlError(pdev, req);
 800af9c:	4629      	mov	r1, r5
 800af9e:	f7ff ff3b 	bl	800ae18 <USBD_CtlError>
 800afa2:	e76f      	b.n	800ae84 <USBD_GetDescriptor+0x58>
        USBD_CtlError(pdev, req);
 800afa4:	4629      	mov	r1, r5
 800afa6:	4620      	mov	r0, r4
 800afa8:	f7ff ff36 	bl	800ae18 <USBD_CtlError>
 800afac:	e76a      	b.n	800ae84 <USBD_GetDescriptor+0x58>
      (void)USBD_CtlSendStatus(pdev);
 800afae:	4620      	mov	r0, r4
 800afb0:	f000 faa8 	bl	800b504 <USBD_CtlSendStatus>
 800afb4:	e766      	b.n	800ae84 <USBD_GetDescriptor+0x58>

0800afb6 <USBD_SetAddress>:
{
 800afb6:	b538      	push	{r3, r4, r5, lr}
 800afb8:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800afba:	888b      	ldrh	r3, [r1, #4]
 800afbc:	b9f3      	cbnz	r3, 800affc <USBD_SetAddress+0x46>
 800afbe:	88cb      	ldrh	r3, [r1, #6]
 800afc0:	b9e3      	cbnz	r3, 800affc <USBD_SetAddress+0x46>
 800afc2:	884b      	ldrh	r3, [r1, #2]
 800afc4:	2b7f      	cmp	r3, #127	; 0x7f
 800afc6:	d819      	bhi.n	800affc <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800afc8:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afcc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d00c      	beq.n	800afee <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 800afd4:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800afd8:	4629      	mov	r1, r5
 800afda:	f003 f868 	bl	800e0ae <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800afde:	4620      	mov	r0, r4
 800afe0:	f000 fa90 	bl	800b504 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800afe4:	b135      	cbz	r5, 800aff4 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afe6:	2302      	movs	r3, #2
 800afe8:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800afec:	e009      	b.n	800b002 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 800afee:	f7ff ff13 	bl	800ae18 <USBD_CtlError>
 800aff2:	e006      	b.n	800b002 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aff4:	2301      	movs	r3, #1
 800aff6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800affa:	e002      	b.n	800b002 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 800affc:	4620      	mov	r0, r4
 800affe:	f7ff ff0b 	bl	800ae18 <USBD_CtlError>
}
 800b002:	bd38      	pop	{r3, r4, r5, pc}

0800b004 <USBD_SetConfig>:
{
 800b004:	b570      	push	{r4, r5, r6, lr}
 800b006:	4604      	mov	r4, r0
 800b008:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 800b00a:	7889      	ldrb	r1, [r1, #2]
 800b00c:	4b2e      	ldr	r3, [pc, #184]	; (800b0c8 <USBD_SetConfig+0xc4>)
 800b00e:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b010:	2901      	cmp	r1, #1
 800b012:	d80f      	bhi.n	800b034 <USBD_SetConfig+0x30>
  switch (pdev->dev_state)
 800b014:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d011      	beq.n	800b040 <USBD_SetConfig+0x3c>
 800b01c:	2b03      	cmp	r3, #3
 800b01e:	d025      	beq.n	800b06c <USBD_SetConfig+0x68>
    USBD_CtlError(pdev, req);
 800b020:	4629      	mov	r1, r5
 800b022:	f7ff fef9 	bl	800ae18 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b026:	4b28      	ldr	r3, [pc, #160]	; (800b0c8 <USBD_SetConfig+0xc4>)
 800b028:	7819      	ldrb	r1, [r3, #0]
 800b02a:	4620      	mov	r0, r4
 800b02c:	f7ff fda4 	bl	800ab78 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b030:	2603      	movs	r6, #3
    break;
 800b032:	e003      	b.n	800b03c <USBD_SetConfig+0x38>
    USBD_CtlError(pdev, req);
 800b034:	4629      	mov	r1, r5
 800b036:	f7ff feef 	bl	800ae18 <USBD_CtlError>
    return USBD_FAIL;
 800b03a:	2603      	movs	r6, #3
}
 800b03c:	4630      	mov	r0, r6
 800b03e:	bd70      	pop	{r4, r5, r6, pc}
    if (cfgidx != 0U)
 800b040:	b181      	cbz	r1, 800b064 <USBD_SetConfig+0x60>
      pdev->dev_config = cfgidx;
 800b042:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b044:	f7ff fd8f 	bl	800ab66 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800b048:	4606      	mov	r6, r0
 800b04a:	b120      	cbz	r0, 800b056 <USBD_SetConfig+0x52>
        USBD_CtlError(pdev, req);
 800b04c:	4629      	mov	r1, r5
 800b04e:	4620      	mov	r0, r4
 800b050:	f7ff fee2 	bl	800ae18 <USBD_CtlError>
 800b054:	e7f2      	b.n	800b03c <USBD_SetConfig+0x38>
        (void)USBD_CtlSendStatus(pdev);
 800b056:	4620      	mov	r0, r4
 800b058:	f000 fa54 	bl	800b504 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b05c:	2303      	movs	r3, #3
 800b05e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800b062:	e7eb      	b.n	800b03c <USBD_SetConfig+0x38>
      (void)USBD_CtlSendStatus(pdev);
 800b064:	f000 fa4e 	bl	800b504 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800b068:	2600      	movs	r6, #0
 800b06a:	e7e7      	b.n	800b03c <USBD_SetConfig+0x38>
    if (cfgidx == 0U)
 800b06c:	b1c9      	cbz	r1, 800b0a2 <USBD_SetConfig+0x9e>
    else if (cfgidx != pdev->dev_config)
 800b06e:	6843      	ldr	r3, [r0, #4]
 800b070:	4299      	cmp	r1, r3
 800b072:	d025      	beq.n	800b0c0 <USBD_SetConfig+0xbc>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b074:	b2d9      	uxtb	r1, r3
 800b076:	f7ff fd7f 	bl	800ab78 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b07a:	4b13      	ldr	r3, [pc, #76]	; (800b0c8 <USBD_SetConfig+0xc4>)
 800b07c:	7819      	ldrb	r1, [r3, #0]
 800b07e:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b080:	4620      	mov	r0, r4
 800b082:	f7ff fd70 	bl	800ab66 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800b086:	4606      	mov	r6, r0
 800b088:	b1b0      	cbz	r0, 800b0b8 <USBD_SetConfig+0xb4>
        USBD_CtlError(pdev, req);
 800b08a:	4629      	mov	r1, r5
 800b08c:	4620      	mov	r0, r4
 800b08e:	f7ff fec3 	bl	800ae18 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b092:	7921      	ldrb	r1, [r4, #4]
 800b094:	4620      	mov	r0, r4
 800b096:	f7ff fd6f 	bl	800ab78 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b09a:	2302      	movs	r3, #2
 800b09c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800b0a0:	e7cc      	b.n	800b03c <USBD_SetConfig+0x38>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0a2:	2302      	movs	r3, #2
 800b0a4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b0a8:	6041      	str	r1, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0aa:	f7ff fd65 	bl	800ab78 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f000 fa28 	bl	800b504 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800b0b4:	2600      	movs	r6, #0
 800b0b6:	e7c1      	b.n	800b03c <USBD_SetConfig+0x38>
        (void)USBD_CtlSendStatus(pdev);
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f000 fa23 	bl	800b504 <USBD_CtlSendStatus>
 800b0be:	e7bd      	b.n	800b03c <USBD_SetConfig+0x38>
      (void)USBD_CtlSendStatus(pdev);
 800b0c0:	f000 fa20 	bl	800b504 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800b0c4:	2600      	movs	r6, #0
 800b0c6:	e7b9      	b.n	800b03c <USBD_SetConfig+0x38>
 800b0c8:	2000027c 	.word	0x2000027c

0800b0cc <USBD_GetConfig>:
{
 800b0cc:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800b0ce:	88cb      	ldrh	r3, [r1, #6]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d10b      	bne.n	800b0ec <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800b0d4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b0d8:	b19b      	cbz	r3, 800b102 <USBD_GetConfig+0x36>
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d909      	bls.n	800b0f2 <USBD_GetConfig+0x26>
 800b0de:	2b03      	cmp	r3, #3
 800b0e0:	d10f      	bne.n	800b102 <USBD_GetConfig+0x36>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	1d01      	adds	r1, r0, #4
 800b0e6:	f000 f9e1 	bl	800b4ac <USBD_CtlSendData>
      break;
 800b0ea:	e001      	b.n	800b0f0 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800b0ec:	f7ff fe94 	bl	800ae18 <USBD_CtlError>
}
 800b0f0:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0U;
 800b0f2:	4601      	mov	r1, r0
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f000 f9d6 	bl	800b4ac <USBD_CtlSendData>
      break;
 800b100:	e7f6      	b.n	800b0f0 <USBD_GetConfig+0x24>
      USBD_CtlError(pdev, req);
 800b102:	f7ff fe89 	bl	800ae18 <USBD_CtlError>
}
 800b106:	e7f3      	b.n	800b0f0 <USBD_GetConfig+0x24>

0800b108 <USBD_GetStatus>:
{
 800b108:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800b10a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b10e:	3b01      	subs	r3, #1
 800b110:	2b02      	cmp	r3, #2
 800b112:	d812      	bhi.n	800b13a <USBD_GetStatus+0x32>
    if (req->wLength != 0x2U)
 800b114:	88cb      	ldrh	r3, [r1, #6]
 800b116:	2b02      	cmp	r3, #2
 800b118:	d10c      	bne.n	800b134 <USBD_GetStatus+0x2c>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b11a:	2301      	movs	r3, #1
 800b11c:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 800b11e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800b122:	b10b      	cbz	r3, 800b128 <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b124:	2303      	movs	r3, #3
 800b126:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b128:	2202      	movs	r2, #2
 800b12a:	f100 010c 	add.w	r1, r0, #12
 800b12e:	f000 f9bd 	bl	800b4ac <USBD_CtlSendData>
}
 800b132:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 800b134:	f7ff fe70 	bl	800ae18 <USBD_CtlError>
      break;
 800b138:	e7fb      	b.n	800b132 <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev, req);
 800b13a:	f7ff fe6d 	bl	800ae18 <USBD_CtlError>
}
 800b13e:	e7f8      	b.n	800b132 <USBD_GetStatus+0x2a>

0800b140 <USBD_ClrFeature>:
{
 800b140:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800b142:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b146:	3b01      	subs	r3, #1
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d809      	bhi.n	800b160 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b14c:	884b      	ldrh	r3, [r1, #2]
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d000      	beq.n	800b154 <USBD_ClrFeature+0x14>
}
 800b152:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800b154:	2300      	movs	r3, #0
 800b156:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b15a:	f000 f9d3 	bl	800b504 <USBD_CtlSendStatus>
 800b15e:	e7f8      	b.n	800b152 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800b160:	f7ff fe5a 	bl	800ae18 <USBD_CtlError>
}
 800b164:	e7f5      	b.n	800b152 <USBD_ClrFeature+0x12>

0800b166 <USBD_StdDevReq>:
{
 800b166:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b168:	780b      	ldrb	r3, [r1, #0]
 800b16a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b16e:	2b20      	cmp	r3, #32
 800b170:	d006      	beq.n	800b180 <USBD_StdDevReq+0x1a>
 800b172:	2b40      	cmp	r3, #64	; 0x40
 800b174:	d004      	beq.n	800b180 <USBD_StdDevReq+0x1a>
 800b176:	b143      	cbz	r3, 800b18a <USBD_StdDevReq+0x24>
    USBD_CtlError(pdev, req);
 800b178:	f7ff fe4e 	bl	800ae18 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b17c:	2000      	movs	r0, #0
    break;
 800b17e:	e003      	b.n	800b188 <USBD_StdDevReq+0x22>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b180:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b184:	689b      	ldr	r3, [r3, #8]
 800b186:	4798      	blx	r3
}
 800b188:	bd08      	pop	{r3, pc}
    switch (req->bRequest)
 800b18a:	784b      	ldrb	r3, [r1, #1]
 800b18c:	2b09      	cmp	r3, #9
 800b18e:	d821      	bhi.n	800b1d4 <USBD_StdDevReq+0x6e>
 800b190:	e8df f003 	tbb	[pc, r3]
 800b194:	18201c14 	.word	0x18201c14
 800b198:	20050920 	.word	0x20050920
 800b19c:	0d10      	.short	0x0d10
      USBD_GetDescriptor(pdev, req);
 800b19e:	f7ff fe45 	bl	800ae2c <USBD_GetDescriptor>
  USBD_StatusTypeDef ret = USBD_OK;
 800b1a2:	2000      	movs	r0, #0
      break;
 800b1a4:	e7f0      	b.n	800b188 <USBD_StdDevReq+0x22>
      USBD_SetAddress(pdev, req);
 800b1a6:	f7ff ff06 	bl	800afb6 <USBD_SetAddress>
  USBD_StatusTypeDef ret = USBD_OK;
 800b1aa:	2000      	movs	r0, #0
      break;
 800b1ac:	e7ec      	b.n	800b188 <USBD_StdDevReq+0x22>
      ret = USBD_SetConfig(pdev, req);
 800b1ae:	f7ff ff29 	bl	800b004 <USBD_SetConfig>
      break;
 800b1b2:	e7e9      	b.n	800b188 <USBD_StdDevReq+0x22>
      USBD_GetConfig(pdev, req);
 800b1b4:	f7ff ff8a 	bl	800b0cc <USBD_GetConfig>
  USBD_StatusTypeDef ret = USBD_OK;
 800b1b8:	2000      	movs	r0, #0
      break;
 800b1ba:	e7e5      	b.n	800b188 <USBD_StdDevReq+0x22>
      USBD_GetStatus(pdev, req);
 800b1bc:	f7ff ffa4 	bl	800b108 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800b1c0:	2000      	movs	r0, #0
      break;
 800b1c2:	e7e1      	b.n	800b188 <USBD_StdDevReq+0x22>
      USBD_SetFeature(pdev, req);
 800b1c4:	f7ff fe0a 	bl	800addc <USBD_SetFeature>
  USBD_StatusTypeDef ret = USBD_OK;
 800b1c8:	2000      	movs	r0, #0
      break;
 800b1ca:	e7dd      	b.n	800b188 <USBD_StdDevReq+0x22>
      USBD_ClrFeature(pdev, req);
 800b1cc:	f7ff ffb8 	bl	800b140 <USBD_ClrFeature>
  USBD_StatusTypeDef ret = USBD_OK;
 800b1d0:	2000      	movs	r0, #0
      break;
 800b1d2:	e7d9      	b.n	800b188 <USBD_StdDevReq+0x22>
      USBD_CtlError(pdev, req);
 800b1d4:	f7ff fe20 	bl	800ae18 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b1d8:	2000      	movs	r0, #0
      break;
 800b1da:	e7d5      	b.n	800b188 <USBD_StdDevReq+0x22>

0800b1dc <USBD_StdItfReq>:
{
 800b1dc:	b570      	push	{r4, r5, r6, lr}
 800b1de:	4605      	mov	r5, r0
 800b1e0:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1e2:	780b      	ldrb	r3, [r1, #0]
 800b1e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1e8:	2b20      	cmp	r3, #32
 800b1ea:	d007      	beq.n	800b1fc <USBD_StdItfReq+0x20>
 800b1ec:	2b40      	cmp	r3, #64	; 0x40
 800b1ee:	d005      	beq.n	800b1fc <USBD_StdItfReq+0x20>
 800b1f0:	b123      	cbz	r3, 800b1fc <USBD_StdItfReq+0x20>
    USBD_CtlError(pdev, req);
 800b1f2:	f7ff fe11 	bl	800ae18 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b1f6:	2600      	movs	r6, #0
}
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 800b1fc:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800b200:	3b01      	subs	r3, #1
 800b202:	2b02      	cmp	r3, #2
 800b204:	d818      	bhi.n	800b238 <USBD_StdItfReq+0x5c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b206:	7923      	ldrb	r3, [r4, #4]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d80f      	bhi.n	800b22c <USBD_StdItfReq+0x50>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b20c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	4621      	mov	r1, r4
 800b214:	4628      	mov	r0, r5
 800b216:	4798      	blx	r3
 800b218:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b21a:	88e3      	ldrh	r3, [r4, #6]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d1eb      	bne.n	800b1f8 <USBD_StdItfReq+0x1c>
 800b220:	2800      	cmp	r0, #0
 800b222:	d1e9      	bne.n	800b1f8 <USBD_StdItfReq+0x1c>
          (void)USBD_CtlSendStatus(pdev);
 800b224:	4628      	mov	r0, r5
 800b226:	f000 f96d 	bl	800b504 <USBD_CtlSendStatus>
 800b22a:	e7e5      	b.n	800b1f8 <USBD_StdItfReq+0x1c>
        USBD_CtlError(pdev, req);
 800b22c:	4621      	mov	r1, r4
 800b22e:	4628      	mov	r0, r5
 800b230:	f7ff fdf2 	bl	800ae18 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b234:	2600      	movs	r6, #0
 800b236:	e7df      	b.n	800b1f8 <USBD_StdItfReq+0x1c>
      USBD_CtlError(pdev, req);
 800b238:	4621      	mov	r1, r4
 800b23a:	4628      	mov	r0, r5
 800b23c:	f7ff fdec 	bl	800ae18 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b240:	2600      	movs	r6, #0
      break;
 800b242:	e7d9      	b.n	800b1f8 <USBD_StdItfReq+0x1c>

0800b244 <USBD_StdEPReq>:
{
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	4605      	mov	r5, r0
 800b248:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 800b24a:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b24c:	780b      	ldrb	r3, [r1, #0]
 800b24e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b252:	2b20      	cmp	r3, #32
 800b254:	d008      	beq.n	800b268 <USBD_StdEPReq+0x24>
 800b256:	b2d1      	uxtb	r1, r2
 800b258:	2b40      	cmp	r3, #64	; 0x40
 800b25a:	d005      	beq.n	800b268 <USBD_StdEPReq+0x24>
 800b25c:	b15b      	cbz	r3, 800b276 <USBD_StdEPReq+0x32>
    USBD_CtlError(pdev, req);
 800b25e:	4621      	mov	r1, r4
 800b260:	f7ff fdda 	bl	800ae18 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b264:	2000      	movs	r0, #0
    break;
 800b266:	e005      	b.n	800b274 <USBD_StdEPReq+0x30>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b268:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	4621      	mov	r1, r4
 800b270:	4628      	mov	r0, r5
 800b272:	4798      	blx	r3
}
 800b274:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 800b276:	7863      	ldrb	r3, [r4, #1]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d038      	beq.n	800b2ee <USBD_StdEPReq+0xaa>
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d06b      	beq.n	800b358 <USBD_StdEPReq+0x114>
 800b280:	2b03      	cmp	r3, #3
 800b282:	f040 80f0 	bne.w	800b466 <USBD_StdEPReq+0x222>
      switch (pdev->dev_state)
 800b286:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b28a:	2b02      	cmp	r3, #2
 800b28c:	d006      	beq.n	800b29c <USBD_StdEPReq+0x58>
 800b28e:	2b03      	cmp	r3, #3
 800b290:	d019      	beq.n	800b2c6 <USBD_StdEPReq+0x82>
        USBD_CtlError(pdev, req);
 800b292:	4621      	mov	r1, r4
 800b294:	f7ff fdc0 	bl	800ae18 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b298:	2000      	movs	r0, #0
        break;
 800b29a:	e7eb      	b.n	800b274 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b29c:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 800b2a0:	bf18      	it	ne
 800b2a2:	2301      	movne	r3, #1
 800b2a4:	2900      	cmp	r1, #0
 800b2a6:	bf08      	it	eq
 800b2a8:	2300      	moveq	r3, #0
 800b2aa:	b13b      	cbz	r3, 800b2bc <USBD_StdEPReq+0x78>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2ac:	f002 feef 	bl	800e08e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2b0:	2180      	movs	r1, #128	; 0x80
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	f002 feeb 	bl	800e08e <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	e7db      	b.n	800b274 <USBD_StdEPReq+0x30>
          USBD_CtlError(pdev, req);
 800b2bc:	4621      	mov	r1, r4
 800b2be:	f7ff fdab 	bl	800ae18 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	e7d6      	b.n	800b274 <USBD_StdEPReq+0x30>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b2c6:	8863      	ldrh	r3, [r4, #2]
 800b2c8:	b94b      	cbnz	r3, 800b2de <USBD_StdEPReq+0x9a>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b2ca:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 800b2ce:	bf18      	it	ne
 800b2d0:	2301      	movne	r3, #1
 800b2d2:	2900      	cmp	r1, #0
 800b2d4:	bf08      	it	eq
 800b2d6:	2300      	moveq	r3, #0
 800b2d8:	b10b      	cbz	r3, 800b2de <USBD_StdEPReq+0x9a>
 800b2da:	88e3      	ldrh	r3, [r4, #6]
 800b2dc:	b123      	cbz	r3, 800b2e8 <USBD_StdEPReq+0xa4>
        (void)USBD_CtlSendStatus(pdev);
 800b2de:	4628      	mov	r0, r5
 800b2e0:	f000 f910 	bl	800b504 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800b2e4:	2000      	movs	r0, #0
        break;
 800b2e6:	e7c5      	b.n	800b274 <USBD_StdEPReq+0x30>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2e8:	f002 fed1 	bl	800e08e <USBD_LL_StallEP>
 800b2ec:	e7f7      	b.n	800b2de <USBD_StdEPReq+0x9a>
      switch (pdev->dev_state)
 800b2ee:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d006      	beq.n	800b304 <USBD_StdEPReq+0xc0>
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d019      	beq.n	800b32e <USBD_StdEPReq+0xea>
        USBD_CtlError(pdev, req);
 800b2fa:	4621      	mov	r1, r4
 800b2fc:	f7ff fd8c 	bl	800ae18 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b300:	2000      	movs	r0, #0
        break;
 800b302:	e7b7      	b.n	800b274 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b304:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 800b308:	bf18      	it	ne
 800b30a:	2301      	movne	r3, #1
 800b30c:	2900      	cmp	r1, #0
 800b30e:	bf08      	it	eq
 800b310:	2300      	moveq	r3, #0
 800b312:	b13b      	cbz	r3, 800b324 <USBD_StdEPReq+0xe0>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b314:	f002 febb 	bl	800e08e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b318:	2180      	movs	r1, #128	; 0x80
 800b31a:	4628      	mov	r0, r5
 800b31c:	f002 feb7 	bl	800e08e <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800b320:	2000      	movs	r0, #0
 800b322:	e7a7      	b.n	800b274 <USBD_StdEPReq+0x30>
          USBD_CtlError(pdev, req);
 800b324:	4621      	mov	r1, r4
 800b326:	f7ff fd77 	bl	800ae18 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b32a:	2000      	movs	r0, #0
 800b32c:	e7a2      	b.n	800b274 <USBD_StdEPReq+0x30>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b32e:	8863      	ldrh	r3, [r4, #2]
 800b330:	2b00      	cmp	r3, #0
 800b332:	f040 809d 	bne.w	800b470 <USBD_StdEPReq+0x22c>
          if ((ep_addr & 0x7FU) != 0x00U)
 800b336:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800b33a:	d10a      	bne.n	800b352 <USBD_StdEPReq+0x10e>
          (void)USBD_CtlSendStatus(pdev);
 800b33c:	4628      	mov	r0, r5
 800b33e:	f000 f8e1 	bl	800b504 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b342:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	4621      	mov	r1, r4
 800b34a:	4628      	mov	r0, r5
 800b34c:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800b34e:	2000      	movs	r0, #0
 800b350:	e790      	b.n	800b274 <USBD_StdEPReq+0x30>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b352:	f002 fea4 	bl	800e09e <USBD_LL_ClearStallEP>
 800b356:	e7f1      	b.n	800b33c <USBD_StdEPReq+0xf8>
      switch (pdev->dev_state)
 800b358:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b35c:	2b02      	cmp	r3, #2
 800b35e:	d006      	beq.n	800b36e <USBD_StdEPReq+0x12a>
 800b360:	2b03      	cmp	r3, #3
 800b362:	d02f      	beq.n	800b3c4 <USBD_StdEPReq+0x180>
        USBD_CtlError(pdev, req);
 800b364:	4621      	mov	r1, r4
 800b366:	f7ff fd57 	bl	800ae18 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b36a:	2000      	movs	r0, #0
        break;
 800b36c:	e782      	b.n	800b274 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b36e:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 800b372:	bf18      	it	ne
 800b374:	2301      	movne	r3, #1
 800b376:	2900      	cmp	r1, #0
 800b378:	bf08      	it	eq
 800b37a:	2300      	moveq	r3, #0
 800b37c:	b99b      	cbnz	r3, 800b3a6 <USBD_StdEPReq+0x162>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b37e:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b382:	d115      	bne.n	800b3b0 <USBD_StdEPReq+0x16c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b384:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b388:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b38c:	008b      	lsls	r3, r1, #2
 800b38e:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 800b392:	4401      	add	r1, r0
 800b394:	3104      	adds	r1, #4
        pep->status = 0x0000U;
 800b396:	2400      	movs	r4, #0
 800b398:	600c      	str	r4, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b39a:	2202      	movs	r2, #2
 800b39c:	4628      	mov	r0, r5
 800b39e:	f000 f885 	bl	800b4ac <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800b3a2:	4620      	mov	r0, r4
        break;
 800b3a4:	e766      	b.n	800b274 <USBD_StdEPReq+0x30>
          USBD_CtlError(pdev, req);
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	f7ff fd36 	bl	800ae18 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ac:	2000      	movs	r0, #0
          break;
 800b3ae:	e761      	b.n	800b274 <USBD_StdEPReq+0x30>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3b0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800b3b4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b3b8:	008b      	lsls	r3, r1, #2
 800b3ba:	f103 0110 	add.w	r1, r3, #16
 800b3be:	4401      	add	r1, r0
 800b3c0:	3104      	adds	r1, #4
 800b3c2:	e7e8      	b.n	800b396 <USBD_StdEPReq+0x152>
        if ((ep_addr & 0x80U) == 0x80U)
 800b3c4:	b252      	sxtb	r2, r2
 800b3c6:	2a00      	cmp	r2, #0
 800b3c8:	db24      	blt.n	800b414 <USBD_StdEPReq+0x1d0>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b3ca:	f001 030f 	and.w	r3, r1, #15
 800b3ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b3d2:	0098      	lsls	r0, r3, #2
 800b3d4:	4428      	add	r0, r5
 800b3d6:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
 800b3da:	b353      	cbz	r3, 800b432 <USBD_StdEPReq+0x1ee>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3dc:	2a00      	cmp	r2, #0
 800b3de:	db2e      	blt.n	800b43e <USBD_StdEPReq+0x1fa>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b3e0:	f001 027f 	and.w	r2, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3e4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b3e8:	0093      	lsls	r3, r2, #2
 800b3ea:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 800b3ee:	442c      	add	r4, r5
 800b3f0:	3404      	adds	r4, #4
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b3f2:	2980      	cmp	r1, #128	; 0x80
 800b3f4:	bf14      	ite	ne
 800b3f6:	2300      	movne	r3, #0
 800b3f8:	2301      	moveq	r3, #1
 800b3fa:	2900      	cmp	r1, #0
 800b3fc:	bf08      	it	eq
 800b3fe:	2301      	moveq	r3, #1
 800b400:	b33b      	cbz	r3, 800b452 <USBD_StdEPReq+0x20e>
            pep->status = 0x0000U;
 800b402:	2300      	movs	r3, #0
 800b404:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b406:	2202      	movs	r2, #2
 800b408:	4621      	mov	r1, r4
 800b40a:	4628      	mov	r0, r5
 800b40c:	f000 f84e 	bl	800b4ac <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800b410:	2000      	movs	r0, #0
          break;
 800b412:	e72f      	b.n	800b274 <USBD_StdEPReq+0x30>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b414:	f001 030f 	and.w	r3, r1, #15
 800b418:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b41c:	0098      	lsls	r0, r3, #2
 800b41e:	4428      	add	r0, r5
 800b420:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1da      	bne.n	800b3dc <USBD_StdEPReq+0x198>
            USBD_CtlError(pdev, req);
 800b426:	4621      	mov	r1, r4
 800b428:	4628      	mov	r0, r5
 800b42a:	f7ff fcf5 	bl	800ae18 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b42e:	2000      	movs	r0, #0
            break;
 800b430:	e720      	b.n	800b274 <USBD_StdEPReq+0x30>
            USBD_CtlError(pdev, req);
 800b432:	4621      	mov	r1, r4
 800b434:	4628      	mov	r0, r5
 800b436:	f7ff fcef 	bl	800ae18 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b43a:	2000      	movs	r0, #0
            break;
 800b43c:	e71a      	b.n	800b274 <USBD_StdEPReq+0x30>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b43e:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 800b442:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b446:	0093      	lsls	r3, r2, #2
 800b448:	f103 0410 	add.w	r4, r3, #16
 800b44c:	442c      	add	r4, r5
 800b44e:	3404      	adds	r4, #4
 800b450:	e7cf      	b.n	800b3f2 <USBD_StdEPReq+0x1ae>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b452:	4628      	mov	r0, r5
 800b454:	f002 fdda 	bl	800e00c <USBD_LL_IsStallEP>
 800b458:	b110      	cbz	r0, 800b460 <USBD_StdEPReq+0x21c>
            pep->status = 0x0001U;
 800b45a:	2301      	movs	r3, #1
 800b45c:	6023      	str	r3, [r4, #0]
 800b45e:	e7d2      	b.n	800b406 <USBD_StdEPReq+0x1c2>
            pep->status = 0x0000U;
 800b460:	2300      	movs	r3, #0
 800b462:	6023      	str	r3, [r4, #0]
 800b464:	e7cf      	b.n	800b406 <USBD_StdEPReq+0x1c2>
      USBD_CtlError(pdev, req);
 800b466:	4621      	mov	r1, r4
 800b468:	f7ff fcd6 	bl	800ae18 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b46c:	2000      	movs	r0, #0
      break;
 800b46e:	e701      	b.n	800b274 <USBD_StdEPReq+0x30>
  USBD_StatusTypeDef ret = USBD_OK;
 800b470:	2000      	movs	r0, #0
 800b472:	e6ff      	b.n	800b274 <USBD_StdEPReq+0x30>

0800b474 <USBD_GetString>:
  if (desc == NULL)
 800b474:	b1c8      	cbz	r0, 800b4aa <USBD_GetString+0x36>
{
 800b476:	b570      	push	{r4, r5, r6, lr}
 800b478:	460d      	mov	r5, r1
 800b47a:	4616      	mov	r6, r2
 800b47c:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b47e:	f7ff fca3 	bl	800adc8 <USBD_GetLen>
 800b482:	3001      	adds	r0, #1
 800b484:	0040      	lsls	r0, r0, #1
 800b486:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800b488:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b48a:	2303      	movs	r3, #3
 800b48c:	706b      	strb	r3, [r5, #1]
  idx++;
 800b48e:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800b490:	e007      	b.n	800b4a2 <USBD_GetString+0x2e>
    unicode[idx] = *pdesc;
 800b492:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800b494:	3401      	adds	r4, #1
    idx++;
 800b496:	1c5a      	adds	r2, r3, #1
 800b498:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800b49a:	2100      	movs	r1, #0
 800b49c:	54a9      	strb	r1, [r5, r2]
    idx++;
 800b49e:	3302      	adds	r3, #2
 800b4a0:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800b4a2:	7822      	ldrb	r2, [r4, #0]
 800b4a4:	2a00      	cmp	r2, #0
 800b4a6:	d1f4      	bne.n	800b492 <USBD_GetString+0x1e>
}
 800b4a8:	bd70      	pop	{r4, r5, r6, pc}
 800b4aa:	4770      	bx	lr

0800b4ac <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b4ac:	b510      	push	{r4, lr}
 800b4ae:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b4b0:	2202      	movs	r2, #2
 800b4b2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b4b6:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;
 800b4b8:	61c3      	str	r3, [r0, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4ba:	460a      	mov	r2, r1
 800b4bc:	2100      	movs	r1, #0
 800b4be:	f002 fdfe 	bl	800e0be <USBD_LL_Transmit>

  return USBD_OK;
}
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	bd10      	pop	{r4, pc}

0800b4c6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b4c6:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	460a      	mov	r2, r1
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	f002 fdf6 	bl	800e0be <USBD_LL_Transmit>

  return USBD_OK;
}
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	bd08      	pop	{r3, pc}

0800b4d6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b4d6:	b510      	push	{r4, lr}
 800b4d8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b4da:	2203      	movs	r2, #3
 800b4dc:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b4e0:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b4e4:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4e8:	460a      	mov	r2, r1
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	f002 fdef 	bl	800e0ce <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	bd10      	pop	{r4, pc}

0800b4f4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b4f4:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	460a      	mov	r2, r1
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	f002 fde7 	bl	800e0ce <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b500:	2000      	movs	r0, #0
 800b502:	bd08      	pop	{r3, pc}

0800b504 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b504:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b506:	2304      	movs	r3, #4
 800b508:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b50c:	2300      	movs	r3, #0
 800b50e:	461a      	mov	r2, r3
 800b510:	4619      	mov	r1, r3
 800b512:	f002 fdd4 	bl	800e0be <USBD_LL_Transmit>

  return USBD_OK;
}
 800b516:	2000      	movs	r0, #0
 800b518:	bd08      	pop	{r3, pc}

0800b51a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b51a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b51c:	2305      	movs	r3, #5
 800b51e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b522:	2300      	movs	r3, #0
 800b524:	461a      	mov	r2, r3
 800b526:	4619      	mov	r1, r3
 800b528:	f002 fdd1 	bl	800e0ce <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b52c:	2000      	movs	r0, #0
 800b52e:	bd08      	pop	{r3, pc}

0800b530 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800b530:	4b10      	ldr	r3, [pc, #64]	; (800b574 <FATFS_LinkDriverEx+0x44>)
 800b532:	7a5b      	ldrb	r3, [r3, #9]
 800b534:	b9db      	cbnz	r3, 800b56e <FATFS_LinkDriverEx+0x3e>
{
 800b536:	b430      	push	{r4, r5}
  {
    disk.is_initialized[disk.nbr] = 0;
 800b538:	4b0e      	ldr	r3, [pc, #56]	; (800b574 <FATFS_LinkDriverEx+0x44>)
 800b53a:	7a5d      	ldrb	r5, [r3, #9]
 800b53c:	b2ed      	uxtb	r5, r5
 800b53e:	2400      	movs	r4, #0
 800b540:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800b542:	7a5d      	ldrb	r5, [r3, #9]
 800b544:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b548:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800b54a:	7a58      	ldrb	r0, [r3, #9]
 800b54c:	4418      	add	r0, r3
 800b54e:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800b550:	7a5a      	ldrb	r2, [r3, #9]
 800b552:	b2d2      	uxtb	r2, r2
 800b554:	1c50      	adds	r0, r2, #1
 800b556:	b2c0      	uxtb	r0, r0
 800b558:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
 800b55a:	3230      	adds	r2, #48	; 0x30
 800b55c:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800b55e:	233a      	movs	r3, #58	; 0x3a
 800b560:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800b562:	232f      	movs	r3, #47	; 0x2f
 800b564:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800b566:	70cc      	strb	r4, [r1, #3]
    ret = 0;
 800b568:	4620      	mov	r0, r4
  }

  return ret;
}
 800b56a:	bc30      	pop	{r4, r5}
 800b56c:	4770      	bx	lr
  uint8_t ret = 1;
 800b56e:	2001      	movs	r0, #1
}
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	20000280 	.word	0x20000280

0800b578 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b578:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800b57a:	2200      	movs	r2, #0
 800b57c:	f7ff ffd8 	bl	800b530 <FATFS_LinkDriverEx>
}
 800b580:	bd08      	pop	{r3, pc}

0800b582 <ad7779_compute_crc8>:
 */
uint8_t ad7779_compute_crc8(uint8_t *data,
							uint8_t data_size)
{
	uint8_t i;
	uint8_t crc = 0;
 800b582:	2300      	movs	r3, #0

	while (data_size) {
 800b584:	b311      	cbz	r1, 800b5cc <ad7779_compute_crc8+0x4a>
		for (i = 0x80; i != 0; i >>= 1) {
 800b586:	2280      	movs	r2, #128	; 0x80
 800b588:	b1e2      	cbz	r2, 800b5c4 <ad7779_compute_crc8+0x42>
{
 800b58a:	b410      	push	{r4}
 800b58c:	e003      	b.n	800b596 <ad7779_compute_crc8+0x14>
			if (((crc & 0x80) != 0) != ((*data & i) != 0)) {
				crc <<= 1;
				crc ^= AD7779_CRC8_POLY;
			} else
				crc <<= 1;
 800b58e:	005b      	lsls	r3, r3, #1
 800b590:	b2db      	uxtb	r3, r3
		for (i = 0x80; i != 0; i >>= 1) {
 800b592:	0852      	lsrs	r2, r2, #1
 800b594:	b162      	cbz	r2, 800b5b0 <ad7779_compute_crc8+0x2e>
			if (((crc & 0x80) != 0) != ((*data & i) != 0)) {
 800b596:	7804      	ldrb	r4, [r0, #0]
 800b598:	4214      	tst	r4, r2
 800b59a:	bf14      	ite	ne
 800b59c:	2401      	movne	r4, #1
 800b59e:	2400      	moveq	r4, #0
 800b5a0:	ebb4 1fd3 	cmp.w	r4, r3, lsr #7
 800b5a4:	d0f3      	beq.n	800b58e <ad7779_compute_crc8+0xc>
				crc <<= 1;
 800b5a6:	005b      	lsls	r3, r3, #1
 800b5a8:	b2db      	uxtb	r3, r3
				crc ^= AD7779_CRC8_POLY;
 800b5aa:	f083 0307 	eor.w	r3, r3, #7
 800b5ae:	e7f0      	b.n	800b592 <ad7779_compute_crc8+0x10>
		}
		data++;
 800b5b0:	3001      	adds	r0, #1
		data_size--;
 800b5b2:	3901      	subs	r1, #1
 800b5b4:	b2c9      	uxtb	r1, r1
	while (data_size) {
 800b5b6:	b109      	cbz	r1, 800b5bc <ad7779_compute_crc8+0x3a>
		for (i = 0x80; i != 0; i >>= 1) {
 800b5b8:	2280      	movs	r2, #128	; 0x80
 800b5ba:	e7eb      	b.n	800b594 <ad7779_compute_crc8+0x12>
	}

	return crc;
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5c2:	4770      	bx	lr
		data++;
 800b5c4:	3001      	adds	r0, #1
		data_size--;
 800b5c6:	3901      	subs	r1, #1
 800b5c8:	b2c9      	uxtb	r1, r1
 800b5ca:	e7db      	b.n	800b584 <ad7779_compute_crc8+0x2>
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	4770      	bx	lr

0800b5d0 <ad7779_spi_int_reg_read>:
 * @return SUCCESS in case of success, negative error code otherwise.
 */
int32_t ad7779_spi_int_reg_read(ad7779_dev *dev,
								uint8_t reg_addr,
								uint8_t *reg_data)
{
 800b5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	4617      	mov	r7, r2
  uint8_t rxbuf[3];
	uint8_t buf_size = 2;
	uint8_t crc;
	int32_t ret;

	txbuf[0] = 0x80 | (reg_addr & 0x7F);
 800b5d8:	f041 0580 	orr.w	r5, r1, #128	; 0x80
 800b5dc:	f88d 500c 	strb.w	r5, [sp, #12]
	txbuf[1] = 0x00;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f88d 300d 	strb.w	r3, [sp, #13]
	txbuf[2] = 0x00;
 800b5e6:	f88d 300e 	strb.w	r3, [sp, #14]
	if (dev->spi_crc_en == AD7779_ENABLE)
 800b5ea:	f890 30d7 	ldrb.w	r3, [r0, #215]	; 0xd7
 800b5ee:	b19b      	cbz	r3, 800b618 <ad7779_spi_int_reg_read+0x48>
	uint8_t buf_size = 2;
 800b5f0:	2302      	movs	r3, #2
		buf_size = 3;
	ret = spi_write_and_read(dev->spi_dev.dev, dev->spi_dev.chip_select_port, dev->spi_dev.chip_select_pin, txbuf, rxbuf, buf_size);
 800b5f2:	7a22      	ldrb	r2, [r4, #8]
 800b5f4:	9301      	str	r3, [sp, #4]
 800b5f6:	ab02      	add	r3, sp, #8
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	ab03      	add	r3, sp, #12
 800b5fc:	6861      	ldr	r1, [r4, #4]
 800b5fe:	6820      	ldr	r0, [r4, #0]
 800b600:	f001 fa88 	bl	800cb14 <spi_write_and_read>
 800b604:	4606      	mov	r6, r0

	*reg_data = rxbuf[1];
 800b606:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800b60a:	703b      	strb	r3, [r7, #0]
	if (dev->spi_crc_en == AD7779_ENABLE) {
 800b60c:	f894 30d7 	ldrb.w	r3, [r4, #215]	; 0xd7
 800b610:	b123      	cbz	r3, 800b61c <ad7779_spi_int_reg_read+0x4c>
			ret = FAILURE;
		}
	}

	return ret;
}
 800b612:	4630      	mov	r0, r6
 800b614:	b005      	add	sp, #20
 800b616:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf_size = 3;
 800b618:	2303      	movs	r3, #3
 800b61a:	e7ea      	b.n	800b5f2 <ad7779_spi_int_reg_read+0x22>
		rxbuf[0] = 0x80 | (reg_addr & 0x7F);
 800b61c:	a804      	add	r0, sp, #16
 800b61e:	f800 5d08 	strb.w	r5, [r0, #-8]!
		crc = ad7779_compute_crc8(&rxbuf[0], 2);
 800b622:	2102      	movs	r1, #2
 800b624:	f7ff ffad 	bl	800b582 <ad7779_compute_crc8>
		if (crc != rxbuf[2]) {
 800b628:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800b62c:	4283      	cmp	r3, r0
 800b62e:	d0f0      	beq.n	800b612 <ad7779_spi_int_reg_read+0x42>
			printf("%s: CRC Error.\n", __func__);
 800b630:	4902      	ldr	r1, [pc, #8]	; (800b63c <ad7779_spi_int_reg_read+0x6c>)
 800b632:	4803      	ldr	r0, [pc, #12]	; (800b640 <ad7779_spi_int_reg_read+0x70>)
 800b634:	f002 ff06 	bl	800e444 <iprintf>
			ret = FAILURE;
 800b638:	2600      	movs	r6, #0
	return ret;
 800b63a:	e7ea      	b.n	800b612 <ad7779_spi_int_reg_read+0x42>
 800b63c:	0800f104 	.word	0x0800f104
 800b640:	0800f2dc 	.word	0x0800f2dc

0800b644 <ad7779_spi_int_reg_write>:
 * @return SUCCESS in case of success, negative error code otherwise.
 */
int32_t ad7779_spi_int_reg_write(ad7779_dev *dev,
								 uint8_t reg_addr,
								 uint8_t reg_data)
{
 800b644:	b570      	push	{r4, r5, r6, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	4604      	mov	r4, r0
 800b64a:	460e      	mov	r6, r1
 800b64c:	4615      	mov	r5, r2
  uint8_t txbuf[3];
  uint8_t rxbuf[3];
	uint8_t buf_size = 2;
	int32_t ret;

	txbuf[0] = 0x00 | (reg_addr & 0x7F);
 800b64e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800b652:	f88d 300c 	strb.w	r3, [sp, #12]
	txbuf[1] = reg_data;
 800b656:	f88d 200d 	strb.w	r2, [sp, #13]
	if (dev->spi_crc_en == AD7779_ENABLE) {
 800b65a:	f890 30d7 	ldrb.w	r3, [r0, #215]	; 0xd7
 800b65e:	b173      	cbz	r3, 800b67e <ad7779_spi_int_reg_write+0x3a>
	uint8_t buf_size = 2;
 800b660:	2302      	movs	r3, #2
		txbuf[2] = ad7779_compute_crc8(&txbuf[0], 2);
		buf_size = 3;
	}
	ret = spi_write_and_read(dev->spi_dev.dev, dev->spi_dev.chip_select_port, dev->spi_dev.chip_select_pin, txbuf, rxbuf, buf_size);
 800b662:	7a22      	ldrb	r2, [r4, #8]
 800b664:	9301      	str	r3, [sp, #4]
 800b666:	ab02      	add	r3, sp, #8
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	ab03      	add	r3, sp, #12
 800b66c:	6861      	ldr	r1, [r4, #4]
 800b66e:	6820      	ldr	r0, [r4, #0]
 800b670:	f001 fa50 	bl	800cb14 <spi_write_and_read>
	dev->cached_reg_val[reg_addr] = reg_data;
 800b674:	4434      	add	r4, r6
 800b676:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141

	return ret;
}
 800b67a:	b004      	add	sp, #16
 800b67c:	bd70      	pop	{r4, r5, r6, pc}
		txbuf[2] = ad7779_compute_crc8(&txbuf[0], 2);
 800b67e:	2102      	movs	r1, #2
 800b680:	a803      	add	r0, sp, #12
 800b682:	f7ff ff7e 	bl	800b582 <ad7779_compute_crc8>
 800b686:	f88d 000e 	strb.w	r0, [sp, #14]
		buf_size = 3;
 800b68a:	2303      	movs	r3, #3
 800b68c:	e7e9      	b.n	800b662 <ad7779_spi_int_reg_write+0x1e>

0800b68e <ad7779_spi_int_reg_write_mask>:
 */
int32_t ad7779_spi_int_reg_write_mask(ad7779_dev *dev,
									  uint8_t reg_addr,
									  uint8_t mask,
									  uint8_t data)
{
 800b68e:	b510      	push	{r4, lr}
	uint8_t reg_data;
	int32_t ret;

	reg_data = dev->cached_reg_val[reg_addr];
 800b690:	1844      	adds	r4, r0, r1
 800b692:	f894 4141 	ldrb.w	r4, [r4, #321]	; 0x141
	reg_data &= ~mask;
 800b696:	ea24 0202 	bic.w	r2, r4, r2
	reg_data |= data;
	ret = ad7779_spi_int_reg_write(dev, reg_addr, reg_data);
 800b69a:	431a      	orrs	r2, r3
 800b69c:	f7ff ffd2 	bl	800b644 <ad7779_spi_int_reg_write>

	return ret;
}
 800b6a0:	bd10      	pop	{r4, pc}
	...

0800b6a4 <ad7779_do_update_mode_pins>:
 * the device structure.
 * @param dev - The device structure.
 * @return SUCCESS in case of success, negative error code otherwise.
 */
int32_t ad7779_do_update_mode_pins(ad7779_dev *dev)
{
 800b6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t ret;
	uint8_t option_index;
	uint8_t mode;

	if (!(dev->gain[AD7779_CH0] == dev->gain[AD7779_CH1] ==
 800b6a6:	f890 30e1 	ldrb.w	r3, [r0, #225]	; 0xe1
 800b6aa:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	bf14      	ite	ne
 800b6b2:	2300      	movne	r3, #0
 800b6b4:	2301      	moveq	r3, #1
		  dev->gain[AD7779_CH2] == dev->gain[AD7779_CH3] == AD7779_GAIN_1))
 800b6b6:	f890 20e3 	ldrb.w	r2, [r0, #227]	; 0xe3
	if (!(dev->gain[AD7779_CH0] == dev->gain[AD7779_CH1] ==
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	bf14      	ite	ne
 800b6be:	2300      	movne	r3, #0
 800b6c0:	2301      	moveq	r3, #1
		  dev->gain[AD7779_CH2] == dev->gain[AD7779_CH3] == AD7779_GAIN_1))
 800b6c2:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
	if (!(dev->gain[AD7779_CH0] == dev->gain[AD7779_CH1] ==
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d010      	beq.n	800b6ec <ad7779_do_update_mode_pins+0x48>
 800b6ca:	4604      	mov	r4, r0
		goto error;

	if (!(dev->gain[AD7779_CH4] == dev->gain[AD7779_CH5] ==
 800b6cc:	f890 10e5 	ldrb.w	r1, [r0, #229]	; 0xe5
 800b6d0:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
 800b6d4:	4299      	cmp	r1, r3
 800b6d6:	bf14      	ite	ne
 800b6d8:	2300      	movne	r3, #0
 800b6da:	2301      	moveq	r3, #1
		  dev->gain[AD7779_CH6] == dev->gain[AD7779_CH6]))
 800b6dc:	f890 20e7 	ldrb.w	r2, [r0, #231]	; 0xe7
	if (!(dev->gain[AD7779_CH4] == dev->gain[AD7779_CH5] ==
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	bf14      	ite	ne
 800b6e4:	2300      	movne	r3, #0
 800b6e6:	2301      	moveq	r3, #1
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d005      	beq.n	800b6f8 <ad7779_do_update_mode_pins+0x54>
	ret |= gpio_set_value(&dev->gpio_dev, dev->gpio_sync_in, GPIO_HIGH);

	return ret;

error:
	printf("%s: This setting can't be set in PIN control mode.\n",
 800b6ec:	493f      	ldr	r1, [pc, #252]	; (800b7ec <ad7779_do_update_mode_pins+0x148>)
 800b6ee:	4840      	ldr	r0, [pc, #256]	; (800b7f0 <ad7779_do_update_mode_pins+0x14c>)
 800b6f0:	f002 fea8 	bl	800e444 <iprintf>
		   __func__);
	return FAILURE;
 800b6f4:	2000      	movs	r0, #0
}
 800b6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (dev->dec_rate_int) {
 800b6f8:	f8b0 30ea 	ldrh.w	r3, [r0, #234]	; 0xea
 800b6fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b700:	d058      	beq.n	800b7b4 <ad7779_do_update_mode_pins+0x110>
 800b702:	d907      	bls.n	800b714 <ad7779_do_update_mode_pins+0x70>
 800b704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b708:	d052      	beq.n	800b7b0 <ad7779_do_update_mode_pins+0x10c>
 800b70a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b70e:	d1ed      	bne.n	800b6ec <ad7779_do_update_mode_pins+0x48>
		option_index = 12;
 800b710:	230c      	movs	r3, #12
		break;
 800b712:	e002      	b.n	800b71a <ad7779_do_update_mode_pins+0x76>
	switch (dev->dec_rate_int) {
 800b714:	2b80      	cmp	r3, #128	; 0x80
 800b716:	d1e9      	bne.n	800b6ec <ad7779_do_update_mode_pins+0x48>
		option_index = 0;
 800b718:	2300      	movs	r3, #0
	if (dev->pwr_mode == AD7779_HIGH_RES)
 800b71a:	f894 20ef 	ldrb.w	r2, [r4, #239]	; 0xef
 800b71e:	2a01      	cmp	r2, #1
 800b720:	d04a      	beq.n	800b7b8 <ad7779_do_update_mode_pins+0x114>
		if (dev->ref_type == AD7779_EXT_REF)
 800b722:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
 800b726:	2a00      	cmp	r2, #0
 800b728:	d158      	bne.n	800b7dc <ad7779_do_update_mode_pins+0x138>
			mode = pin_mode_options[option_index + 2][dev->gain[AD7779_CH4]];
 800b72a:	3302      	adds	r3, #2
 800b72c:	4a31      	ldr	r2, [pc, #196]	; (800b7f4 <ad7779_do_update_mode_pins+0x150>)
 800b72e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b732:	4419      	add	r1, r3
 800b734:	f891 6034 	ldrb.w	r6, [r1, #52]	; 0x34
	if (mode == 0xFF)
 800b738:	2eff      	cmp	r6, #255	; 0xff
 800b73a:	d0d7      	beq.n	800b6ec <ad7779_do_update_mode_pins+0x48>
	ret = gpio_set_value(&dev->gpio_dev,
 800b73c:	f104 07a8 	add.w	r7, r4, #168	; 0xa8
					dev->gpio_mode0,
 800b740:	f994 10cd 	ldrsb.w	r1, [r4, #205]	; 0xcd
	ret = gpio_set_value(&dev->gpio_dev,
 800b744:	f006 0201 	and.w	r2, r6, #1
 800b748:	b2c9      	uxtb	r1, r1
 800b74a:	4638      	mov	r0, r7
 800b74c:	f001 f9fc 	bl	800cb48 <gpio_set_value>
 800b750:	4605      	mov	r5, r0
					dev->gpio_mode1,
 800b752:	f994 10ce 	ldrsb.w	r1, [r4, #206]	; 0xce
	ret |= gpio_set_value(&dev->gpio_dev,
 800b756:	f3c6 0240 	ubfx	r2, r6, #1, #1
 800b75a:	b2c9      	uxtb	r1, r1
 800b75c:	4638      	mov	r0, r7
 800b75e:	f001 f9f3 	bl	800cb48 <gpio_set_value>
 800b762:	4305      	orrs	r5, r0
					dev->gpio_mode2,
 800b764:	f994 10cf 	ldrsb.w	r1, [r4, #207]	; 0xcf
	ret |= gpio_set_value(&dev->gpio_dev,
 800b768:	f3c6 0280 	ubfx	r2, r6, #2, #1
 800b76c:	b2c9      	uxtb	r1, r1
 800b76e:	4638      	mov	r0, r7
 800b770:	f001 f9ea 	bl	800cb48 <gpio_set_value>
 800b774:	4305      	orrs	r5, r0
					dev->gpio_mode3,
 800b776:	f994 10d0 	ldrsb.w	r1, [r4, #208]	; 0xd0
	ret |= gpio_set_value(&dev->gpio_dev,
 800b77a:	f3c6 02c0 	ubfx	r2, r6, #3, #1
 800b77e:	b2c9      	uxtb	r1, r1
 800b780:	4638      	mov	r0, r7
 800b782:	f001 f9e1 	bl	800cb48 <gpio_set_value>
 800b786:	4305      	orrs	r5, r0
	ret |= gpio_set_value(&dev->gpio_dev, dev->gpio_sync_in, GPIO_LOW);
 800b788:	f994 10d4 	ldrsb.w	r1, [r4, #212]	; 0xd4
 800b78c:	2200      	movs	r2, #0
 800b78e:	b2c9      	uxtb	r1, r1
 800b790:	4638      	mov	r0, r7
 800b792:	f001 f9d9 	bl	800cb48 <gpio_set_value>
 800b796:	4305      	orrs	r5, r0
	mdelay(10);
 800b798:	200a      	movs	r0, #10
 800b79a:	f001 f9d7 	bl	800cb4c <mdelay>
	ret |= gpio_set_value(&dev->gpio_dev, dev->gpio_sync_in, GPIO_HIGH);
 800b79e:	f994 10d4 	ldrsb.w	r1, [r4, #212]	; 0xd4
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	b2c9      	uxtb	r1, r1
 800b7a6:	4638      	mov	r0, r7
 800b7a8:	f001 f9ce 	bl	800cb48 <gpio_set_value>
 800b7ac:	4328      	orrs	r0, r5
	return ret;
 800b7ae:	e7a2      	b.n	800b6f6 <ad7779_do_update_mode_pins+0x52>
		option_index = 8;
 800b7b0:	2308      	movs	r3, #8
		break;
 800b7b2:	e7b2      	b.n	800b71a <ad7779_do_update_mode_pins+0x76>
		option_index = 4;
 800b7b4:	2304      	movs	r3, #4
 800b7b6:	e7b0      	b.n	800b71a <ad7779_do_update_mode_pins+0x76>
		if (dev->ref_type == AD7779_EXT_REF)
 800b7b8:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
 800b7bc:	b932      	cbnz	r2, 800b7cc <ad7779_do_update_mode_pins+0x128>
			mode = pin_mode_options[option_index + 0][dev->gain[AD7779_CH4]];
 800b7be:	4a0d      	ldr	r2, [pc, #52]	; (800b7f4 <ad7779_do_update_mode_pins+0x150>)
 800b7c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7c4:	4419      	add	r1, r3
 800b7c6:	f891 6034 	ldrb.w	r6, [r1, #52]	; 0x34
 800b7ca:	e7b5      	b.n	800b738 <ad7779_do_update_mode_pins+0x94>
			mode = pin_mode_options[option_index + 1][dev->gain[AD7779_CH4]];
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	4a09      	ldr	r2, [pc, #36]	; (800b7f4 <ad7779_do_update_mode_pins+0x150>)
 800b7d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7d4:	4419      	add	r1, r3
 800b7d6:	f891 6034 	ldrb.w	r6, [r1, #52]	; 0x34
 800b7da:	e7ad      	b.n	800b738 <ad7779_do_update_mode_pins+0x94>
			mode = pin_mode_options[option_index + 3][dev->gain[AD7779_CH4]];
 800b7dc:	3303      	adds	r3, #3
 800b7de:	4a05      	ldr	r2, [pc, #20]	; (800b7f4 <ad7779_do_update_mode_pins+0x150>)
 800b7e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7e4:	4419      	add	r1, r3
 800b7e6:	f891 6034 	ldrb.w	r6, [r1, #52]	; 0x34
 800b7ea:	e7a5      	b.n	800b738 <ad7779_do_update_mode_pins+0x94>
 800b7ec:	0800f178 	.word	0x0800f178
 800b7f0:	0800f2ec 	.word	0x0800f2ec
 800b7f4:	0800f104 	.word	0x0800f104

0800b7f8 <ad7779_set_gain>:
 * @return SUCCESS in case of success, negative error code otherwise.
 */
int32_t ad7779_set_gain(ad7779_dev *dev,
						ad7779_ch ch,
						ad7779_gain gain)
{
 800b7f8:	b508      	push	{r3, lr}
	int32_t ret;

	if (dev->ctrl_mode == AD7779_PIN_CTRL) {
 800b7fa:	f890 30d6 	ldrb.w	r3, [r0, #214]	; 0xd6
 800b7fe:	b9ab      	cbnz	r3, 800b82c <ad7779_set_gain+0x34>
		if (ch <= AD7779_CH3) {
 800b800:	2903      	cmp	r1, #3
 800b802:	d80a      	bhi.n	800b81a <ad7779_set_gain+0x22>
			dev->gain[AD7779_CH0] = gain;
 800b804:	f880 20e1 	strb.w	r2, [r0, #225]	; 0xe1
			dev->gain[AD7779_CH1] = gain;
 800b808:	f880 20e2 	strb.w	r2, [r0, #226]	; 0xe2
			dev->gain[AD7779_CH2] = gain;
 800b80c:	f880 20e3 	strb.w	r2, [r0, #227]	; 0xe3
			dev->gain[AD7779_CH3] = gain;
 800b810:	f880 20e4 	strb.w	r2, [r0, #228]	; 0xe4
			dev->gain[AD7779_CH4] = gain;
			dev->gain[AD7779_CH5] = gain;
			dev->gain[AD7779_CH6] = gain;
			dev->gain[AD7779_CH7] = gain;
		}
		ret = ad7779_do_update_mode_pins(dev);
 800b814:	f7ff ff46 	bl	800b6a4 <ad7779_do_update_mode_pins>
											AD7779_CH_GAIN(0x3),
											AD7779_CH_GAIN(gain));
	}

	return ret;
}
 800b818:	bd08      	pop	{r3, pc}
			dev->gain[AD7779_CH4] = gain;
 800b81a:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
			dev->gain[AD7779_CH5] = gain;
 800b81e:	f880 20e6 	strb.w	r2, [r0, #230]	; 0xe6
			dev->gain[AD7779_CH6] = gain;
 800b822:	f880 20e7 	strb.w	r2, [r0, #231]	; 0xe7
			dev->gain[AD7779_CH7] = gain;
 800b826:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
 800b82a:	e7f3      	b.n	800b814 <ad7779_set_gain+0x1c>
		dev->gain[ch] = gain;
 800b82c:	1843      	adds	r3, r0, r1
 800b82e:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
											AD7779_CH_GAIN(gain));
 800b832:	0193      	lsls	r3, r2, #6
		ret = ad7779_spi_int_reg_write_mask(dev,
 800b834:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b838:	22c0      	movs	r2, #192	; 0xc0
 800b83a:	f7ff ff28 	bl	800b68e <ad7779_spi_int_reg_write_mask>
	return ret;
 800b83e:	e7eb      	b.n	800b818 <ad7779_set_gain+0x20>

0800b840 <ad7779_set_dec_rate>:
 * @return SUCCESS in case of success, negative error code otherwise.
 */
int32_t ad7779_set_dec_rate(ad7779_dev *dev,
							uint16_t int_val,
							uint16_t dec_val)
{
 800b840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b842:	4605      	mov	r5, r0
 800b844:	4614      	mov	r4, r2
	int32_t ret;
	uint8_t msb;
	uint8_t lsb;

	if (dev->ctrl_mode == AD7779_PIN_CTRL) {
 800b846:	f890 30d6 	ldrb.w	r3, [r0, #214]	; 0xd6
 800b84a:	b9bb      	cbnz	r3, 800b87c <ad7779_set_dec_rate+0x3c>
		switch (int_val) {
 800b84c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b850:	d006      	beq.n	800b860 <ad7779_set_dec_rate+0x20>
 800b852:	d90b      	bls.n	800b86c <ad7779_set_dec_rate+0x2c>
 800b854:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b858:	d002      	beq.n	800b860 <ad7779_set_dec_rate+0x20>
 800b85a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b85e:	d107      	bne.n	800b870 <ad7779_set_dec_rate+0x30>
			printf("%s: This setting can't be set in PIN control mode.\n",
				   __func__);
			return FAILURE;
		}
		dev->dec_rate_int = int_val;
		dev->dec_rate_int = dec_val;
 800b860:	f8a5 40ea 	strh.w	r4, [r5, #234]	; 0xea
		ret = ad7779_do_update_mode_pins(dev);
 800b864:	4628      	mov	r0, r5
 800b866:	f7ff ff1d 	bl	800b6a4 <ad7779_do_update_mode_pins>
 800b86a:	e006      	b.n	800b87a <ad7779_set_dec_rate+0x3a>
		switch (int_val) {
 800b86c:	2980      	cmp	r1, #128	; 0x80
 800b86e:	d0f7      	beq.n	800b860 <ad7779_set_dec_rate+0x20>
			printf("%s: This setting can't be set in PIN control mode.\n",
 800b870:	4915      	ldr	r1, [pc, #84]	; (800b8c8 <ad7779_set_dec_rate+0x88>)
 800b872:	4816      	ldr	r0, [pc, #88]	; (800b8cc <ad7779_set_dec_rate+0x8c>)
 800b874:	f002 fde6 	bl	800e444 <iprintf>
			return FAILURE;
 800b878:	2000      	movs	r0, #0
		dev->dec_rate_int = int_val;
		dev->dec_rate_int = dec_val;
	}

	return ret;
}
 800b87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		lsb = (int_val & 0x00FF) >> 0;
 800b87c:	b2cf      	uxtb	r7, r1
		ret = ad7779_spi_int_reg_write(dev,
 800b87e:	f3c1 2203 	ubfx	r2, r1, #8, #4
 800b882:	2160      	movs	r1, #96	; 0x60
 800b884:	f7ff fede 	bl	800b644 <ad7779_spi_int_reg_write>
 800b888:	4606      	mov	r6, r0
		ret |= ad7779_spi_int_reg_write(dev,
 800b88a:	463a      	mov	r2, r7
 800b88c:	2161      	movs	r1, #97	; 0x61
 800b88e:	4628      	mov	r0, r5
 800b890:	f7ff fed8 	bl	800b644 <ad7779_spi_int_reg_write>
 800b894:	4306      	orrs	r6, r0
		dec_val = (dec_val * 65536) / 1000;
 800b896:	0424      	lsls	r4, r4, #16
 800b898:	4a0d      	ldr	r2, [pc, #52]	; (800b8d0 <ad7779_set_dec_rate+0x90>)
 800b89a:	fb82 3204 	smull	r3, r2, r2, r4
 800b89e:	17e4      	asrs	r4, r4, #31
 800b8a0:	ebc4 12a2 	rsb	r2, r4, r2, asr #6
 800b8a4:	b297      	uxth	r7, r2
		lsb = (dec_val & 0x00FF) >> 0;
 800b8a6:	b2d4      	uxtb	r4, r2
		ret |= ad7779_spi_int_reg_write(dev,
 800b8a8:	0a3a      	lsrs	r2, r7, #8
 800b8aa:	2162      	movs	r1, #98	; 0x62
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	f7ff fec9 	bl	800b644 <ad7779_spi_int_reg_write>
 800b8b2:	4306      	orrs	r6, r0
		ret |= ad7779_spi_int_reg_write(dev,
 800b8b4:	4622      	mov	r2, r4
 800b8b6:	2163      	movs	r1, #99	; 0x63
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	f7ff fec3 	bl	800b644 <ad7779_spi_int_reg_write>
 800b8be:	4330      	orrs	r0, r6
		dev->dec_rate_int = dec_val;
 800b8c0:	f8a5 70ea 	strh.w	r7, [r5, #234]	; 0xea
 800b8c4:	e7d9      	b.n	800b87a <ad7779_set_dec_rate+0x3a>
 800b8c6:	bf00      	nop
 800b8c8:	0800f194 	.word	0x0800f194
 800b8cc:	0800f2ec 	.word	0x0800f2ec
 800b8d0:	10624dd3 	.word	0x10624dd3

0800b8d4 <ad7779_set_power_mode>:
 *									  AD7779_LOW_PWR
 * @return SUCCESS in case of success, negative error code otherwise.
 */
int32_t ad7779_set_power_mode(ad7779_dev *dev,
							  ad7779_pwr_mode pwr_mode)
{
 800b8d4:	b538      	push	{r3, r4, r5, lr}
 800b8d6:	4604      	mov	r4, r0
	int32_t ret;

	ret = ad7779_spi_int_reg_write_mask(dev,
 800b8d8:	460d      	mov	r5, r1
 800b8da:	b941      	cbnz	r1, 800b8ee <ad7779_set_power_mode+0x1a>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	2240      	movs	r2, #64	; 0x40
 800b8e0:	2111      	movs	r1, #17
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f7ff fed3 	bl	800b68e <ad7779_spi_int_reg_write_mask>
										AD7779_REG_GENERAL_USER_CONFIG_1,
										AD7779_MOD_POWERMODE,
										pwr_mode ? AD7779_MOD_POWERMODE : 0);
	dev->pwr_mode = pwr_mode;
 800b8e8:	f884 50ef 	strb.w	r5, [r4, #239]	; 0xef

	return ret;
}
 800b8ec:	bd38      	pop	{r3, r4, r5, pc}
	ret = ad7779_spi_int_reg_write_mask(dev,
 800b8ee:	2340      	movs	r3, #64	; 0x40
 800b8f0:	e7f5      	b.n	800b8de <ad7779_set_power_mode+0xa>

0800b8f2 <ad7779_set_reference_type>:
 *									  AD7779_INT_REF
 * @return SUCCESS in case of success, negative error code otherwise.
 */
int32_t ad7779_set_reference_type(ad7779_dev *dev,
								  ad7779_ref_type ref_type)
{
 800b8f2:	b538      	push	{r3, r4, r5, lr}
 800b8f4:	4604      	mov	r4, r0
	int32_t ret;

	ret = ad7779_spi_int_reg_write_mask(dev,
 800b8f6:	460d      	mov	r5, r1
 800b8f8:	b941      	cbnz	r1, 800b90c <ad7779_set_reference_type+0x1a>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	2210      	movs	r2, #16
 800b8fe:	2111      	movs	r1, #17
 800b900:	4620      	mov	r0, r4
 800b902:	f7ff fec4 	bl	800b68e <ad7779_spi_int_reg_write_mask>
										AD7779_REG_GENERAL_USER_CONFIG_1,
										AD7779_PDB_REFOUT_BUF,
										ref_type ? AD7779_PDB_REFOUT_BUF : 0);
	dev->ref_type = ref_type;
 800b906:	f884 50ee 	strb.w	r5, [r4, #238]	; 0xee

	return ret;
}
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
	ret = ad7779_spi_int_reg_write_mask(dev,
 800b90c:	2310      	movs	r3, #16
 800b90e:	e7f5      	b.n	800b8fc <ad7779_set_reference_type+0xa>

0800b910 <ad7779_set_dclk_div>:
 *								 AD7779_DCLK_DIV_128
 * @return SUCCESS in case of success, negative error code otherwise.
 */
int32_t ad7779_set_dclk_div(ad7779_dev *dev,
							ad7768_dclk_div div)
{
 800b910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b912:	4604      	mov	r4, r0
 800b914:	460d      	mov	r5, r1
	int32_t ret;

	if (dev->ctrl_mode == AD7779_PIN_CTRL) {
 800b916:	f890 30d6 	ldrb.w	r3, [r0, #214]	; 0xd6
 800b91a:	b14b      	cbz	r3, 800b930 <ad7779_set_dclk_div+0x20>
						((div & 0x04) >> 2));
	} else {
		ret = ad7779_spi_int_reg_write_mask(dev,
											AD7779_REG_CH_DISABLE,
											AD7779_DCLK_CLK_DIV(0x3),
											AD7779_DCLK_CLK_DIV(div));
 800b91c:	004b      	lsls	r3, r1, #1
		ret = ad7779_spi_int_reg_write_mask(dev,
 800b91e:	f003 0306 	and.w	r3, r3, #6
 800b922:	2206      	movs	r2, #6
 800b924:	2108      	movs	r1, #8
 800b926:	f7ff feb2 	bl	800b68e <ad7779_spi_int_reg_write_mask>
	}
	dev->dclk_div = div;
 800b92a:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0

	return ret;
}
 800b92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = gpio_set_value(&dev->gpio_dev,
 800b930:	f100 07a8 	add.w	r7, r0, #168	; 0xa8
						dev->gpio_dclk0,
 800b934:	f990 10d1 	ldrsb.w	r1, [r0, #209]	; 0xd1
		ret = gpio_set_value(&dev->gpio_dev,
 800b938:	f005 0201 	and.w	r2, r5, #1
 800b93c:	b2c9      	uxtb	r1, r1
 800b93e:	4638      	mov	r0, r7
 800b940:	f001 f902 	bl	800cb48 <gpio_set_value>
 800b944:	4606      	mov	r6, r0
						dev->gpio_dclk1,
 800b946:	f994 10d2 	ldrsb.w	r1, [r4, #210]	; 0xd2
		ret |= gpio_set_value(&dev->gpio_dev,
 800b94a:	f3c5 0240 	ubfx	r2, r5, #1, #1
 800b94e:	b2c9      	uxtb	r1, r1
 800b950:	4638      	mov	r0, r7
 800b952:	f001 f8f9 	bl	800cb48 <gpio_set_value>
 800b956:	4306      	orrs	r6, r0
						dev->gpio_dclk2,
 800b958:	f994 10d3 	ldrsb.w	r1, [r4, #211]	; 0xd3
		ret |= gpio_set_value(&dev->gpio_dev,
 800b95c:	f3c5 0280 	ubfx	r2, r5, #2, #1
 800b960:	b2c9      	uxtb	r1, r1
 800b962:	4638      	mov	r0, r7
 800b964:	f001 f8f0 	bl	800cb48 <gpio_set_value>
 800b968:	4330      	orrs	r0, r6
 800b96a:	e7de      	b.n	800b92a <ad7779_set_dclk_div+0x1a>

0800b96c <ad7779_setup>:
 * 					   parameters.
 * @return SUCCESS in case of success, negative error code otherwise.
 */
int32_t ad7779_setup(ad7779_dev **device,
					 ad7779_init_param init_param)
{
 800b96c:	b082      	sub	sp, #8
 800b96e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b970:	b083      	sub	sp, #12
 800b972:	4607      	mov	r7, r0
 800b974:	a908      	add	r1, sp, #32
 800b976:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t i;
	int32_t ret;

  if (!dev)
  {
    dev = (ad7779_dev *)malloc(sizeof(*dev));
 800b97a:	f44f 70d4 	mov.w	r0, #424	; 0x1a8
 800b97e:	f002 fc95 	bl	800e2ac <malloc>
  }
//	dev = (ad7779_dev *)malloc(sizeof(*dev));
	if (!dev) {
 800b982:	2800      	cmp	r0, #0
 800b984:	f000 80b4 	beq.w	800baf0 <ad7779_setup+0x184>
 800b988:	4605      	mov	r5, r0
//  dev->spi_dev.chip_select_port = init_param.spi_chip_select_port;
//  dev->spi_dev.chip_select_pin = init_param.spi_chip_select_pin;
//	dev->spi_dev.mode = init_param.spi_mode;
//	dev->spi_dev.device_id = init_param.spi_device_id;
	//  dev->spi_dev.type = init_param.spi_type;
	dev->spi_dev = init_param.spi_dev;
 800b98a:	22a8      	movs	r2, #168	; 0xa8
 800b98c:	a90a      	add	r1, sp, #40	; 0x28
 800b98e:	f002 fc9d 	bl	800e2cc <memcpy>
	ret = spi_init(dev->spi_dev.dev);
 800b992:	462c      	mov	r4, r5
 800b994:	f854 0ba8 	ldr.w	r0, [r4], #168
 800b998:	f001 f8ba 	bl	800cb10 <spi_init>
 800b99c:	4606      	mov	r6, r0
//	dev->gpio_dev.device_id = init_param.gpio_device_id;
//	dev->gpio_dev.type = init_param.gpio_type;
	ret |= gpio_init(&dev->gpio_dev);
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f001 f8d0 	bl	800cb44 <gpio_init>
 800b9a4:	4306      	orrs	r6, r0
	ret |= gpio_set_value(&dev->gpio_dev, dev->gpio_sync_in, GPIO_HIGH);
	ret |= gpio_set_direction(&dev->gpio_dev, dev->gpio_convst_sar, GPIO_OUT);
	ret |= gpio_set_value(&dev->gpio_dev, dev->gpio_convst_sar, GPIO_HIGH);
*/
	// Device Settings
	dev->ctrl_mode = init_param.ctrl_mode;
 800b9a6:	f89d 30de 	ldrb.w	r3, [sp, #222]	; 0xde
 800b9aa:	f885 30d6 	strb.w	r3, [r5, #214]	; 0xd6
	dev->spi_crc_en = AD7779_DISABLE;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	f885 30d7 	strb.w	r3, [r5, #215]	; 0xd7
	dev->spi_op_mode = AD7779_INT_REG;
 800b9b4:	2400      	movs	r4, #0
 800b9b6:	f885 40d8 	strb.w	r4, [r5, #216]	; 0xd8
	dev->sar_state = AD7779_DISABLE;
 800b9ba:	f885 313e 	strb.w	r3, [r5, #318]	; 0x13e
	dev->sar_mux = AD7779_AUXAINP_AUXAINN;
 800b9be:	f885 413f 	strb.w	r4, [r5, #319]	; 0x13f

  uint8_t reg_data;
  for(uint8_t reg_addr = 0; reg_addr < AD7779_REG_SRC_UPDATE + 1; reg_addr++)
 800b9c2:	e00d      	b.n	800b9e0 <ad7779_setup+0x74>
  {
    ret |= ad7779_spi_int_reg_read(dev,reg_addr,&reg_data);
 800b9c4:	f10d 0207 	add.w	r2, sp, #7
 800b9c8:	4621      	mov	r1, r4
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	f7ff fe00 	bl	800b5d0 <ad7779_spi_int_reg_read>
 800b9d0:	4306      	orrs	r6, r0
    dev->cached_reg_val[reg_addr] = reg_data;
 800b9d2:	192b      	adds	r3, r5, r4
 800b9d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b9d8:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
  for(uint8_t reg_addr = 0; reg_addr < AD7779_REG_SRC_UPDATE + 1; reg_addr++)
 800b9dc:	3401      	adds	r4, #1
 800b9de:	b2e4      	uxtb	r4, r4
 800b9e0:	2c64      	cmp	r4, #100	; 0x64
 800b9e2:	d9ef      	bls.n	800b9c4 <ad7779_setup+0x58>
  }


	if ((dev->ctrl_mode == AD7779_SPI_CTRL) &&
 800b9e4:	f895 30d6 	ldrb.w	r3, [r5, #214]	; 0xd6
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d005      	beq.n	800b9f8 <ad7779_setup+0x8c>
							AD7779_SPI_CRC_TEST_EN);
		dev->spi_crc_en = AD7779_ENABLE;
	}


	if (dev->ctrl_mode == AD7779_SPI_CTRL)
 800b9ec:	f895 30d6 	ldrb.w	r3, [r5, #214]	; 0xd6
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d025      	beq.n	800ba40 <ad7779_setup+0xd4>
		for (i = AD7779_REG_CH_CONFIG(0); i <= AD7779_REG_SRC_UPDATE; i++)
 800b9f4:	2400      	movs	r4, #0
 800b9f6:	e027      	b.n	800ba48 <ad7779_setup+0xdc>
				(init_param.spi_crc_en == AD7779_ENABLE)) {
 800b9f8:	f89d 30df 	ldrb.w	r3, [sp, #223]	; 0xdf
	if ((dev->ctrl_mode == AD7779_SPI_CTRL) &&
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d1f5      	bne.n	800b9ec <ad7779_setup+0x80>
		ret |= ad7779_spi_int_reg_read(dev,
 800ba00:	f205 129b 	addw	r2, r5, #411	; 0x19b
 800ba04:	215a      	movs	r1, #90	; 0x5a
 800ba06:	4628      	mov	r0, r5
 800ba08:	f7ff fde2 	bl	800b5d0 <ad7779_spi_int_reg_read>
 800ba0c:	4306      	orrs	r6, r0
		ret |= ad7779_spi_int_reg_write_mask(dev,
 800ba0e:	2301      	movs	r3, #1
 800ba10:	461a      	mov	r2, r3
 800ba12:	215a      	movs	r1, #90	; 0x5a
 800ba14:	4628      	mov	r0, r5
 800ba16:	f7ff fe3a 	bl	800b68e <ad7779_spi_int_reg_write_mask>
 800ba1a:	4306      	orrs	r6, r0
		dev->spi_crc_en = AD7779_ENABLE;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f885 30d7 	strb.w	r3, [r5, #215]	; 0xd7
 800ba22:	e7e3      	b.n	800b9ec <ad7779_setup+0x80>
			ret |= ad7779_spi_int_reg_read(dev, i, &dev->cached_reg_val[i]);
 800ba24:	f504 72a0 	add.w	r2, r4, #320	; 0x140
 800ba28:	442a      	add	r2, r5
 800ba2a:	3201      	adds	r2, #1
 800ba2c:	4621      	mov	r1, r4
 800ba2e:	4628      	mov	r0, r5
 800ba30:	f7ff fdce 	bl	800b5d0 <ad7779_spi_int_reg_read>
 800ba34:	4306      	orrs	r6, r0
		for (i = AD7779_REG_CH_CONFIG(0); i <= AD7779_REG_SRC_UPDATE; i++)
 800ba36:	3401      	adds	r4, #1
 800ba38:	b2e4      	uxtb	r4, r4
 800ba3a:	2c64      	cmp	r4, #100	; 0x64
 800ba3c:	d9f2      	bls.n	800ba24 <ad7779_setup+0xb8>
 800ba3e:	e7d9      	b.n	800b9f4 <ad7779_setup+0x88>
 800ba40:	2400      	movs	r4, #0
 800ba42:	e7fa      	b.n	800ba3a <ad7779_setup+0xce>
		dev->state[i] = init_param.state[i];
		if (dev->ctrl_mode == AD7779_SPI_CTRL)
			ret |= ad7779_set_state(dev, (ad7779_ch)i, dev->state[i]);
	}
 
	for (i = AD7779_CH0; i <= AD7779_CH7; i++) {
 800ba44:	3401      	adds	r4, #1
 800ba46:	b2e4      	uxtb	r4, r4
 800ba48:	2c07      	cmp	r4, #7
 800ba4a:	d810      	bhi.n	800ba6e <ad7779_setup+0x102>
		dev->gain[i] = init_param.gain[i];
 800ba4c:	ab08      	add	r3, sp, #32
 800ba4e:	4423      	add	r3, r4
 800ba50:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
 800ba54:	192b      	adds	r3, r5, r4
 800ba56:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
		if (dev->ctrl_mode == AD7779_SPI_CTRL)
 800ba5a:	f895 30d6 	ldrb.w	r3, [r5, #214]	; 0xd6
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d1f0      	bne.n	800ba44 <ad7779_setup+0xd8>
			ret |= ad7779_set_gain(dev, (ad7779_ch)i, dev->gain[i]);
 800ba62:	4621      	mov	r1, r4
 800ba64:	4628      	mov	r0, r5
 800ba66:	f7ff fec7 	bl	800b7f8 <ad7779_set_gain>
 800ba6a:	4306      	orrs	r6, r0
 800ba6c:	e7ea      	b.n	800ba44 <ad7779_setup+0xd8>
	}

	dev->dec_rate_int = init_param.dec_rate_int;
 800ba6e:	f8bd 10f0 	ldrh.w	r1, [sp, #240]	; 0xf0
 800ba72:	f8a5 10ea 	strh.w	r1, [r5, #234]	; 0xea
	dev->dec_rate_dec = init_param.dec_rate_dec;
 800ba76:	f8bd 20f2 	ldrh.w	r2, [sp, #242]	; 0xf2
 800ba7a:	f8a5 20ec 	strh.w	r2, [r5, #236]	; 0xec
	if (dev->ctrl_mode == AD7779_SPI_CTRL)
 800ba7e:	f895 30d6 	ldrb.w	r3, [r5, #214]	; 0xd6
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d020      	beq.n	800bac8 <ad7779_setup+0x15c>
		ret |= ad7779_set_dec_rate(dev, dev->dec_rate_int, dev->dec_rate_dec);

 	dev->ref_type = init_param.ref_type;
 800ba86:	f89d 10f4 	ldrb.w	r1, [sp, #244]	; 0xf4
 800ba8a:	f885 10ee 	strb.w	r1, [r5, #238]	; 0xee
	if (dev->ctrl_mode == AD7779_SPI_CTRL)
 800ba8e:	f895 30d6 	ldrb.w	r3, [r5, #214]	; 0xd6
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d01d      	beq.n	800bad2 <ad7779_setup+0x166>
		ret |= ad7779_set_reference_type(dev, dev->ref_type);

	dev->pwr_mode = init_param.pwr_mode;
 800ba96:	f89d 10f5 	ldrb.w	r1, [sp, #245]	; 0xf5
 800ba9a:	f885 10ef 	strb.w	r1, [r5, #239]	; 0xef
	if (dev->ctrl_mode == AD7779_SPI_CTRL)
 800ba9e:	f895 30d6 	ldrb.w	r3, [r5, #214]	; 0xd6
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d01a      	beq.n	800badc <ad7779_setup+0x170>
		ret |= ad7779_set_power_mode(dev, dev->pwr_mode);

	if (dev->ctrl_mode == AD7779_PIN_CTRL) {
 800baa6:	f895 30d6 	ldrb.w	r3, [r5, #214]	; 0xd6
 800baaa:	b1e3      	cbz	r3, 800bae6 <ad7779_setup+0x17a>
		ret |= ad7779_do_update_mode_pins(dev);
	}

	dev->dclk_div = init_param.dclk_div;
 800baac:	f89d 10f6 	ldrb.w	r1, [sp, #246]	; 0xf6
 800bab0:	f885 10f0 	strb.w	r1, [r5, #240]	; 0xf0
	ad7779_set_dclk_div(dev, dev->dclk_div);
 800bab4:	4628      	mov	r0, r5
 800bab6:	f7ff ff2b 	bl	800b910 <ad7779_set_dclk_div>
			ret |= ad7779_set_gain_corr(dev, (ad7779_ch)i,
								dev->gain_corr[i]);
		}
	}
*/
	*device = dev;
 800baba:	603d      	str	r5, [r7, #0]
//    print_text(str_out);
//  printf("AD7779 initialization error (%d)\n", ret);
  }

	return ret;
}
 800babc:	4630      	mov	r0, r6
 800babe:	b003      	add	sp, #12
 800bac0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bac4:	b002      	add	sp, #8
 800bac6:	4770      	bx	lr
		ret |= ad7779_set_dec_rate(dev, dev->dec_rate_int, dev->dec_rate_dec);
 800bac8:	4628      	mov	r0, r5
 800baca:	f7ff feb9 	bl	800b840 <ad7779_set_dec_rate>
 800bace:	4306      	orrs	r6, r0
 800bad0:	e7d9      	b.n	800ba86 <ad7779_setup+0x11a>
		ret |= ad7779_set_reference_type(dev, dev->ref_type);
 800bad2:	4628      	mov	r0, r5
 800bad4:	f7ff ff0d 	bl	800b8f2 <ad7779_set_reference_type>
 800bad8:	4306      	orrs	r6, r0
 800bada:	e7dc      	b.n	800ba96 <ad7779_setup+0x12a>
		ret |= ad7779_set_power_mode(dev, dev->pwr_mode);
 800badc:	4628      	mov	r0, r5
 800bade:	f7ff fef9 	bl	800b8d4 <ad7779_set_power_mode>
 800bae2:	4306      	orrs	r6, r0
 800bae4:	e7df      	b.n	800baa6 <ad7779_setup+0x13a>
		ret |= ad7779_do_update_mode_pins(dev);
 800bae6:	4628      	mov	r0, r5
 800bae8:	f7ff fddc 	bl	800b6a4 <ad7779_do_update_mode_pins>
 800baec:	4306      	orrs	r6, r0
 800baee:	e7dd      	b.n	800baac <ad7779_setup+0x140>
		return -1;
 800baf0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800baf4:	e7e2      	b.n	800babc <ad7779_setup+0x150>
	...

0800baf8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800baf8:	b500      	push	{lr}
 800bafa:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bafc:	9300      	str	r3, [sp, #0]
 800bafe:	4613      	mov	r3, r2
 800bb00:	460a      	mov	r2, r1
 800bb02:	4601      	mov	r1, r0
 800bb04:	4803      	ldr	r0, [pc, #12]	; (800bb14 <BSP_SD_ReadBlocks+0x1c>)
 800bb06:	f7fa feb7 	bl	8006878 <HAL_SD_ReadBlocks>
 800bb0a:	b100      	cbz	r0, 800bb0e <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 800bb0c:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800bb0e:	b003      	add	sp, #12
 800bb10:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb14:	20002df4 	.word	0x20002df4

0800bb18 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bb18:	b500      	push	{lr}
 800bb1a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	460a      	mov	r2, r1
 800bb22:	4601      	mov	r1, r0
 800bb24:	4803      	ldr	r0, [pc, #12]	; (800bb34 <BSP_SD_WriteBlocks+0x1c>)
 800bb26:	f7fa ffa5 	bl	8006a74 <HAL_SD_WriteBlocks>
 800bb2a:	b100      	cbz	r0, 800bb2e <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 800bb2c:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800bb2e:	b003      	add	sp, #12
 800bb30:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb34:	20002df4 	.word	0x20002df4

0800bb38 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bb38:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bb3a:	4803      	ldr	r0, [pc, #12]	; (800bb48 <BSP_SD_GetCardState+0x10>)
 800bb3c:	f7fb fbec 	bl	8007318 <HAL_SD_GetCardState>
}
 800bb40:	3804      	subs	r0, #4
 800bb42:	bf18      	it	ne
 800bb44:	2001      	movne	r0, #1
 800bb46:	bd08      	pop	{r3, pc}
 800bb48:	20002df4 	.word	0x20002df4

0800bb4c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bb4c:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bb4e:	4601      	mov	r1, r0
 800bb50:	4801      	ldr	r0, [pc, #4]	; (800bb58 <BSP_SD_GetCardInfo+0xc>)
 800bb52:	f7fb fb61 	bl	8007218 <HAL_SD_GetCardInfo>
}
 800bb56:	bd08      	pop	{r3, pc}
 800bb58:	20002df4 	.word	0x20002df4

0800bb5c <BSP_SD_WriteCpltCallback>:
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{

}
 800bb5c:	4770      	bx	lr

0800bb5e <HAL_SD_TxCpltCallback>:
{
 800bb5e:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800bb60:	f7ff fffc 	bl	800bb5c <BSP_SD_WriteCpltCallback>
}
 800bb64:	bd08      	pop	{r3, pc}

0800bb66 <BSP_SD_ReadCpltCallback>:
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{

}
 800bb66:	4770      	bx	lr

0800bb68 <HAL_SD_RxCpltCallback>:
{
 800bb68:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800bb6a:	f7ff fffc 	bl	800bb66 <BSP_SD_ReadCpltCallback>
}
 800bb6e:	bd08      	pop	{r3, pc}

0800bb70 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bb70:	b500      	push	{lr}
 800bb72:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800bb74:	2301      	movs	r3, #1
 800bb76:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bb7a:	f000 f831 	bl	800bbe0 <BSP_PlatformIsDetected>
 800bb7e:	b910      	cbnz	r0, 800bb86 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 800bb80:	2300      	movs	r3, #0
 800bb82:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 800bb86:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800bb8a:	b003      	add	sp, #12
 800bb8c:	f85d fb04 	ldr.w	pc, [sp], #4

0800bb90 <BSP_SD_Init>:
{
 800bb90:	b510      	push	{r4, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bb92:	f7ff ffed 	bl	800bb70 <BSP_SD_IsDetected>
 800bb96:	2801      	cmp	r0, #1
 800bb98:	d002      	beq.n	800bba0 <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 800bb9a:	2402      	movs	r4, #2
}
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800bba0:	4807      	ldr	r0, [pc, #28]	; (800bbc0 <BSP_SD_Init+0x30>)
 800bba2:	f7fb fbcc 	bl	800733e <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800bba6:	4604      	mov	r4, r0
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	d1f7      	bne.n	800bb9c <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bbac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bbb0:	4803      	ldr	r0, [pc, #12]	; (800bbc0 <BSP_SD_Init+0x30>)
 800bbb2:	f7fb fb43 	bl	800723c <HAL_SD_ConfigWideBusOperation>
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	d0f0      	beq.n	800bb9c <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 800bbba:	2401      	movs	r4, #1
 800bbbc:	e7ee      	b.n	800bb9c <BSP_SD_Init+0xc>
 800bbbe:	bf00      	nop
 800bbc0:	20002df4 	.word	0x20002df4

0800bbc4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bbc4:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bbc6:	4903      	ldr	r1, [pc, #12]	; (800bbd4 <MX_FATFS_Init+0x10>)
 800bbc8:	4803      	ldr	r0, [pc, #12]	; (800bbd8 <MX_FATFS_Init+0x14>)
 800bbca:	f7ff fcd5 	bl	800b578 <FATFS_LinkDriver>
 800bbce:	4b03      	ldr	r3, [pc, #12]	; (800bbdc <MX_FATFS_Init+0x18>)
 800bbd0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800bbd2:	bd08      	pop	{r3, pc}
 800bbd4:	2000036c 	.word	0x2000036c
 800bbd8:	0800f2b8 	.word	0x0800f2b8
 800bbdc:	20000368 	.word	0x20000368

0800bbe0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bbe0:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bbe2:	2180      	movs	r1, #128	; 0x80
 800bbe4:	4803      	ldr	r0, [pc, #12]	; (800bbf4 <BSP_PlatformIsDetected+0x14>)
 800bbe6:	f7f6 fbff 	bl	80023e8 <HAL_GPIO_ReadPin>
 800bbea:	b108      	cbz	r0, 800bbf0 <BSP_PlatformIsDetected+0x10>
    {
        status = SD_NOT_PRESENT;
 800bbec:	2000      	movs	r0, #0
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800bbee:	bd08      	pop	{r3, pc}
    uint8_t status = SD_PRESENT;
 800bbf0:	2001      	movs	r0, #1
 800bbf2:	e7fc      	b.n	800bbee <BSP_PlatformIsDetected+0xe>
 800bbf4:	58020800 	.word	0x58020800

0800bbf8 <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800bbf8:	4b08      	ldr	r3, [pc, #32]	; (800bc1c <MX_SDMMC1_SD_Init+0x24>)
 800bbfa:	4a09      	ldr	r2, [pc, #36]	; (800bc20 <MX_SDMMC1_SD_Init+0x28>)
 800bbfc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800bbfe:	2200      	movs	r2, #0
 800bc00:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bc02:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800bc04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bc08:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800bc0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bc0e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 800bc10:	2208      	movs	r2, #8
 800bc12:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800bc14:	2201      	movs	r2, #1
 800bc16:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	20002df4 	.word	0x20002df4
 800bc20:	52007000 	.word	0x52007000

0800bc24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800bc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc28:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc2a:	2400      	movs	r4, #0
 800bc2c:	9407      	str	r4, [sp, #28]
 800bc2e:	9408      	str	r4, [sp, #32]
 800bc30:	9409      	str	r4, [sp, #36]	; 0x24
 800bc32:	940a      	str	r4, [sp, #40]	; 0x28
 800bc34:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800bc36:	4b79      	ldr	r3, [pc, #484]	; (800be1c <MX_GPIO_Init+0x1f8>)
 800bc38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bc3c:	f042 0210 	orr.w	r2, r2, #16
 800bc40:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bc44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bc48:	f002 0210 	and.w	r2, r2, #16
 800bc4c:	9200      	str	r2, [sp, #0]
 800bc4e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bc50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bc54:	f042 0204 	orr.w	r2, r2, #4
 800bc58:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bc5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bc60:	f002 0204 	and.w	r2, r2, #4
 800bc64:	9201      	str	r2, [sp, #4]
 800bc66:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800bc68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bc6c:	f042 0220 	orr.w	r2, r2, #32
 800bc70:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bc74:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bc78:	f002 0220 	and.w	r2, r2, #32
 800bc7c:	9202      	str	r2, [sp, #8]
 800bc7e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc80:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bc84:	f042 0201 	orr.w	r2, r2, #1
 800bc88:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bc8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bc90:	f002 0201 	and.w	r2, r2, #1
 800bc94:	9203      	str	r2, [sp, #12]
 800bc96:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bc98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bc9c:	f042 0202 	orr.w	r2, r2, #2
 800bca0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bca4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bca8:	f002 0202 	and.w	r2, r2, #2
 800bcac:	9204      	str	r2, [sp, #16]
 800bcae:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bcb0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bcb4:	f042 0208 	orr.w	r2, r2, #8
 800bcb8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bcbc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bcc0:	f002 0208 	and.w	r2, r2, #8
 800bcc4:	9205      	str	r2, [sp, #20]
 800bcc6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800bcc8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcd0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bcd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bcd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcdc:	9306      	str	r3, [sp, #24]
 800bcde:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ADC2_START_Pin|ADC2_RESET_Pin, GPIO_PIN_RESET);
 800bce0:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800be2c <MX_GPIO_Init+0x208>
 800bce4:	4622      	mov	r2, r4
 800bce6:	2130      	movs	r1, #48	; 0x30
 800bce8:	4648      	mov	r0, r9
 800bcea:	f7f6 fb84 	bl	80023f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_USB_PIN_GPIO_Port, ISO_USB_PIN_Pin, GPIO_PIN_SET);
 800bcee:	2201      	movs	r2, #1
 800bcf0:	2180      	movs	r1, #128	; 0x80
 800bcf2:	4648      	mov	r0, r9
 800bcf4:	f7f6 fb7f 	bl	80023f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC3_START_GPIO_Port, ADC3_START_Pin, GPIO_PIN_RESET);
 800bcf8:	4f49      	ldr	r7, [pc, #292]	; (800be20 <MX_GPIO_Init+0x1fc>)
 800bcfa:	4622      	mov	r2, r4
 800bcfc:	2120      	movs	r1, #32
 800bcfe:	4638      	mov	r0, r7
 800bd00:	f7f6 fb79 	bl	80023f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC3_RESET_Pin|ACC_SDO_SAO_Pin, GPIO_PIN_RESET);
 800bd04:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800be30 <MX_GPIO_Init+0x20c>
 800bd08:	4622      	mov	r2, r4
 800bd0a:	f240 2102 	movw	r1, #514	; 0x202
 800bd0e:	4640      	mov	r0, r8
 800bd10:	f7f6 fb71 	bl	80023f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ADC4_START_Pin|ADC4_RESET_Pin, GPIO_PIN_RESET);
 800bd14:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800be34 <MX_GPIO_Init+0x210>
 800bd18:	4622      	mov	r2, r4
 800bd1a:	210c      	movs	r1, #12
 800bd1c:	4650      	mov	r0, sl
 800bd1e:	f7f6 fb6a 	bl	80023f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADC1_START_Pin|ADC1_RESET_Pin, GPIO_PIN_RESET);
 800bd22:	f8df b114 	ldr.w	fp, [pc, #276]	; 800be38 <MX_GPIO_Init+0x214>
 800bd26:	4622      	mov	r2, r4
 800bd28:	2130      	movs	r1, #48	; 0x30
 800bd2a:	4658      	mov	r0, fp
 800bd2c:	f7f6 fb63 	bl	80023f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ADC2_DRDY_Pin */
  GPIO_InitStruct.Pin = ADC2_DRDY_Pin;
 800bd30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd34:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bd36:	4d3b      	ldr	r5, [pc, #236]	; (800be24 <MX_GPIO_Init+0x200>)
 800bd38:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd3a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ADC2_DRDY_GPIO_Port, &GPIO_InitStruct);
 800bd3c:	a907      	add	r1, sp, #28
 800bd3e:	4638      	mov	r0, r7
 800bd40:	f7f6 fa62 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC2_START_Pin ADC2_RESET_Pin ISO_USB_PIN_Pin */
  GPIO_InitStruct.Pin = ADC2_START_Pin|ADC2_RESET_Pin|ISO_USB_PIN_Pin;
 800bd44:	23b0      	movs	r3, #176	; 0xb0
 800bd46:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bd48:	2601      	movs	r6, #1
 800bd4a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd4c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd4e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800bd50:	a907      	add	r1, sp, #28
 800bd52:	4648      	mov	r0, r9
 800bd54:	f7f6 fa58 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC3_DRDY_Pin */
  GPIO_InitStruct.Pin = ADC3_DRDY_Pin;
 800bd58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd5c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bd5e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd60:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ADC3_DRDY_GPIO_Port, &GPIO_InitStruct);
 800bd62:	a907      	add	r1, sp, #28
 800bd64:	4648      	mov	r0, r9
 800bd66:	f7f6 fa4f 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC3_START_Pin */
  GPIO_InitStruct.Pin = ADC3_START_Pin;
 800bd6a:	2320      	movs	r3, #32
 800bd6c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bd6e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd70:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd72:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(ADC3_START_GPIO_Port, &GPIO_InitStruct);
 800bd74:	a907      	add	r1, sp, #28
 800bd76:	4638      	mov	r0, r7
 800bd78:	f7f6 fa46 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC1_DRDY_Pin ACC_INT1_Pin */
  GPIO_InitStruct.Pin = ADC1_DRDY_Pin|ACC_INT1_Pin;
 800bd7c:	f240 1301 	movw	r3, #257	; 0x101
 800bd80:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bd82:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd84:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd86:	a907      	add	r1, sp, #28
 800bd88:	4640      	mov	r0, r8
 800bd8a:	f7f6 fa3d 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC3_RESET_Pin ACC_SDO_SAO_Pin */
  GPIO_InitStruct.Pin = ADC3_RESET_Pin|ACC_SDO_SAO_Pin;
 800bd8e:	f240 2302 	movw	r3, #514	; 0x202
 800bd92:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bd94:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd96:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd98:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd9a:	a907      	add	r1, sp, #28
 800bd9c:	4640      	mov	r0, r8
 800bd9e:	f7f6 fa33 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800bda2:	2304      	movs	r3, #4
 800bda4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bda6:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bda8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800bdaa:	a907      	add	r1, sp, #28
 800bdac:	4640      	mov	r0, r8
 800bdae:	f7f6 fa2b 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC4_START_Pin ADC4_RESET_Pin */
  GPIO_InitStruct.Pin = ADC4_START_Pin|ADC4_RESET_Pin;
 800bdb2:	230c      	movs	r3, #12
 800bdb4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bdb6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdb8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bdba:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bdbc:	a907      	add	r1, sp, #28
 800bdbe:	4650      	mov	r0, sl
 800bdc0:	f7f6 fa22 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC4_DRDY_Pin */
  GPIO_InitStruct.Pin = ADC4_DRDY_Pin;
 800bdc4:	2310      	movs	r3, #16
 800bdc6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bdc8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdca:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ADC4_DRDY_GPIO_Port, &GPIO_InitStruct);
 800bdcc:	a907      	add	r1, sp, #28
 800bdce:	4650      	mov	r0, sl
 800bdd0:	f7f6 fa1a 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC1_DETECT_Pin */
  GPIO_InitStruct.Pin = SDMMC1_DETECT_Pin;
 800bdd4:	2380      	movs	r3, #128	; 0x80
 800bdd6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bdd8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdda:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(SDMMC1_DETECT_GPIO_Port, &GPIO_InitStruct);
 800bddc:	a907      	add	r1, sp, #28
 800bdde:	4638      	mov	r0, r7
 800bde0:	f7f6 fa12 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC1_START_Pin ADC1_RESET_Pin */
  GPIO_InitStruct.Pin = ADC1_START_Pin|ADC1_RESET_Pin;
 800bde4:	2330      	movs	r3, #48	; 0x30
 800bde6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bde8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdea:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bdec:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bdee:	a907      	add	r1, sp, #28
 800bdf0:	4658      	mov	r0, fp
 800bdf2:	f7f6 fa09 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 800bdf6:	2302      	movs	r3, #2
 800bdf8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bdfa:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdfc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 800bdfe:	a907      	add	r1, sp, #28
 800be00:	4809      	ldr	r0, [pc, #36]	; (800be28 <MX_GPIO_Init+0x204>)
 800be02:	f7f6 fa01 	bl	8002208 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800be06:	4622      	mov	r2, r4
 800be08:	4621      	mov	r1, r4
 800be0a:	2006      	movs	r0, #6
 800be0c:	f7f4 fcca 	bl	80007a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800be10:	2006      	movs	r0, #6
 800be12:	f7f4 fcf9 	bl	8000808 <HAL_NVIC_EnableIRQ>

}
 800be16:	b00d      	add	sp, #52	; 0x34
 800be18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1c:	58024400 	.word	0x58024400
 800be20:	58020800 	.word	0x58020800
 800be24:	11110000 	.word	0x11110000
 800be28:	58021000 	.word	0x58021000
 800be2c:	58021400 	.word	0x58021400
 800be30:	58020400 	.word	0x58020400
 800be34:	58021800 	.word	0x58021800
 800be38:	58020c00 	.word	0x58020c00

0800be3c <MX_DMA_Init>:
{
 800be3c:	b500      	push	{lr}
 800be3e:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800be40:	4b39      	ldr	r3, [pc, #228]	; (800bf28 <MX_DMA_Init+0xec>)
 800be42:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800be46:	f042 0201 	orr.w	r2, r2, #1
 800be4a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800be4e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800be52:	f002 0201 	and.w	r2, r2, #1
 800be56:	9200      	str	r2, [sp, #0]
 800be58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800be5a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800be5e:	f042 0202 	orr.w	r2, r2, #2
 800be62:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800be66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800be6a:	f003 0302 	and.w	r3, r3, #2
 800be6e:	9301      	str	r3, [sp, #4]
 800be70:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800be72:	2200      	movs	r2, #0
 800be74:	4611      	mov	r1, r2
 800be76:	200b      	movs	r0, #11
 800be78:	f7f4 fc94 	bl	80007a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800be7c:	200b      	movs	r0, #11
 800be7e:	f7f4 fcc3 	bl	8000808 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800be82:	2200      	movs	r2, #0
 800be84:	4611      	mov	r1, r2
 800be86:	200c      	movs	r0, #12
 800be88:	f7f4 fc8c 	bl	80007a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800be8c:	200c      	movs	r0, #12
 800be8e:	f7f4 fcbb 	bl	8000808 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800be92:	2200      	movs	r2, #0
 800be94:	4611      	mov	r1, r2
 800be96:	200d      	movs	r0, #13
 800be98:	f7f4 fc84 	bl	80007a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800be9c:	200d      	movs	r0, #13
 800be9e:	f7f4 fcb3 	bl	8000808 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800bea2:	2200      	movs	r2, #0
 800bea4:	4611      	mov	r1, r2
 800bea6:	200e      	movs	r0, #14
 800bea8:	f7f4 fc7c 	bl	80007a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800beac:	200e      	movs	r0, #14
 800beae:	f7f4 fcab 	bl	8000808 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800beb2:	2200      	movs	r2, #0
 800beb4:	4611      	mov	r1, r2
 800beb6:	200f      	movs	r0, #15
 800beb8:	f7f4 fc74 	bl	80007a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800bebc:	200f      	movs	r0, #15
 800bebe:	f7f4 fca3 	bl	8000808 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800bec2:	2200      	movs	r2, #0
 800bec4:	4611      	mov	r1, r2
 800bec6:	2010      	movs	r0, #16
 800bec8:	f7f4 fc6c 	bl	80007a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800becc:	2010      	movs	r0, #16
 800bece:	f7f4 fc9b 	bl	8000808 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800bed2:	2200      	movs	r2, #0
 800bed4:	4611      	mov	r1, r2
 800bed6:	2011      	movs	r0, #17
 800bed8:	f7f4 fc64 	bl	80007a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800bedc:	2011      	movs	r0, #17
 800bede:	f7f4 fc93 	bl	8000808 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800bee2:	2200      	movs	r2, #0
 800bee4:	4611      	mov	r1, r2
 800bee6:	202f      	movs	r0, #47	; 0x2f
 800bee8:	f7f4 fc5c 	bl	80007a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800beec:	202f      	movs	r0, #47	; 0x2f
 800beee:	f7f4 fc8b 	bl	8000808 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800bef2:	2200      	movs	r2, #0
 800bef4:	4611      	mov	r1, r2
 800bef6:	2038      	movs	r0, #56	; 0x38
 800bef8:	f7f4 fc54 	bl	80007a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800befc:	2038      	movs	r0, #56	; 0x38
 800befe:	f7f4 fc83 	bl	8000808 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800bf02:	2200      	movs	r2, #0
 800bf04:	4611      	mov	r1, r2
 800bf06:	2039      	movs	r0, #57	; 0x39
 800bf08:	f7f4 fc4c 	bl	80007a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800bf0c:	2039      	movs	r0, #57	; 0x39
 800bf0e:	f7f4 fc7b 	bl	8000808 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800bf12:	2200      	movs	r2, #0
 800bf14:	4611      	mov	r1, r2
 800bf16:	203c      	movs	r0, #60	; 0x3c
 800bf18:	f7f4 fc44 	bl	80007a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800bf1c:	203c      	movs	r0, #60	; 0x3c
 800bf1e:	f7f4 fc73 	bl	8000808 <HAL_NVIC_EnableIRQ>
}
 800bf22:	b003      	add	sp, #12
 800bf24:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf28:	58024400 	.word	0x58024400

0800bf2c <MX_SAI1_Init>:
{
 800bf2c:	b538      	push	{r3, r4, r5, lr}
  hsai_BlockA1.Instance = SAI1_Block_A;
 800bf2e:	4811      	ldr	r0, [pc, #68]	; (800bf74 <MX_SAI1_Init+0x48>)
 800bf30:	4b11      	ldr	r3, [pc, #68]	; (800bf78 <MX_SAI1_Init+0x4c>)
 800bf32:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODESLAVE_RX;
 800bf34:	2503      	movs	r5, #3
 800bf36:	6045      	str	r5, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800bf38:	2400      	movs	r4, #0
 800bf3a:	6084      	str	r4, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800bf3c:	6144      	str	r4, [r0, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800bf3e:	61c4      	str	r4, [r0, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800bf40:	60c4      	str	r4, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800bf42:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800bf44:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800bf46:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_PCM_SHORT, SAI_PROTOCOL_DATASIZE_32BIT, 8) != HAL_OK)
 800bf48:	2308      	movs	r3, #8
 800bf4a:	462a      	mov	r2, r5
 800bf4c:	2104      	movs	r1, #4
 800bf4e:	f7fa f85b 	bl	8006008 <HAL_SAI_InitProtocol>
  hsai_BlockB1.Instance = SAI1_Block_B;
 800bf52:	480a      	ldr	r0, [pc, #40]	; (800bf7c <MX_SAI1_Init+0x50>)
 800bf54:	4b0a      	ldr	r3, [pc, #40]	; (800bf80 <MX_SAI1_Init+0x54>)
 800bf56:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800bf58:	6045      	str	r5, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 800bf5a:	6084      	str	r4, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800bf5c:	6144      	str	r4, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800bf5e:	61c4      	str	r4, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800bf60:	60c4      	str	r4, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800bf62:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800bf64:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800bf66:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_PCM_SHORT, SAI_PROTOCOL_DATASIZE_32BIT, 8) != HAL_OK)
 800bf68:	2308      	movs	r3, #8
 800bf6a:	462a      	mov	r2, r5
 800bf6c:	2104      	movs	r1, #4
 800bf6e:	f7fa f84b 	bl	8006008 <HAL_SAI_InitProtocol>
}
 800bf72:	bd38      	pop	{r3, r4, r5, pc}
 800bf74:	200038bc 	.word	0x200038bc
 800bf78:	40015804 	.word	0x40015804
 800bf7c:	20003004 	.word	0x20003004
 800bf80:	40015824 	.word	0x40015824

0800bf84 <MX_SAI2_Init>:
{
 800bf84:	b538      	push	{r3, r4, r5, lr}
  hsai_BlockA2.Instance = SAI2_Block_A;
 800bf86:	4811      	ldr	r0, [pc, #68]	; (800bfcc <MX_SAI2_Init+0x48>)
 800bf88:	4b11      	ldr	r3, [pc, #68]	; (800bfd0 <MX_SAI2_Init+0x4c>)
 800bf8a:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODESLAVE_RX;
 800bf8c:	2503      	movs	r5, #3
 800bf8e:	6045      	str	r5, [r0, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800bf90:	2400      	movs	r4, #0
 800bf92:	6084      	str	r4, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800bf94:	6144      	str	r4, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800bf96:	61c4      	str	r4, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800bf98:	60c4      	str	r4, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800bf9a:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800bf9c:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800bf9e:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_PCM_SHORT, SAI_PROTOCOL_DATASIZE_32BIT, 8) != HAL_OK)
 800bfa0:	2308      	movs	r3, #8
 800bfa2:	462a      	mov	r2, r5
 800bfa4:	2104      	movs	r1, #4
 800bfa6:	f7fa f82f 	bl	8006008 <HAL_SAI_InitProtocol>
  hsai_BlockB2.Instance = SAI2_Block_B;
 800bfaa:	480a      	ldr	r0, [pc, #40]	; (800bfd4 <MX_SAI2_Init+0x50>)
 800bfac:	4b0a      	ldr	r3, [pc, #40]	; (800bfd8 <MX_SAI2_Init+0x54>)
 800bfae:	6003      	str	r3, [r0, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800bfb0:	6045      	str	r5, [r0, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 800bfb2:	6084      	str	r4, [r0, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800bfb4:	6144      	str	r4, [r0, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800bfb6:	61c4      	str	r4, [r0, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800bfb8:	60c4      	str	r4, [r0, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800bfba:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800bfbc:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800bfbe:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_PCM_SHORT, SAI_PROTOCOL_DATASIZE_32BIT, 8) != HAL_OK)
 800bfc0:	2308      	movs	r3, #8
 800bfc2:	462a      	mov	r2, r5
 800bfc4:	2104      	movs	r1, #4
 800bfc6:	f7fa f81f 	bl	8006008 <HAL_SAI_InitProtocol>
}
 800bfca:	bd38      	pop	{r3, r4, r5, pc}
 800bfcc:	20002c28 	.word	0x20002c28
 800bfd0:	40015c04 	.word	0x40015c04
 800bfd4:	20002418 	.word	0x20002418
 800bfd8:	40015c24 	.word	0x40015c24

0800bfdc <MX_SAI3_Init>:
{
 800bfdc:	b570      	push	{r4, r5, r6, lr}
  hsai_BlockA3.Instance = SAI3_Block_A;
 800bfde:	4811      	ldr	r0, [pc, #68]	; (800c024 <MX_SAI3_Init+0x48>)
 800bfe0:	4b11      	ldr	r3, [pc, #68]	; (800c028 <MX_SAI3_Init+0x4c>)
 800bfe2:	6003      	str	r3, [r0, #0]
  hsai_BlockA3.Init.AudioMode = SAI_MODESLAVE_RX;
 800bfe4:	2503      	movs	r5, #3
 800bfe6:	6045      	str	r5, [r0, #4]
  hsai_BlockA3.Init.Synchro = SAI_SYNCHRONOUS_EXT_SAI1;
 800bfe8:	2602      	movs	r6, #2
 800bfea:	6086      	str	r6, [r0, #8]
  hsai_BlockA3.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800bfec:	2400      	movs	r4, #0
 800bfee:	6144      	str	r4, [r0, #20]
  hsai_BlockA3.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800bff0:	61c4      	str	r4, [r0, #28]
  hsai_BlockA3.Init.MonoStereoMode = SAI_STEREOMODE;
 800bff2:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockA3.Init.CompandingMode = SAI_NOCOMPANDING;
 800bff4:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockA3.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800bff6:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA3, SAI_PCM_SHORT, SAI_PROTOCOL_DATASIZE_32BIT, 8) != HAL_OK)
 800bff8:	2308      	movs	r3, #8
 800bffa:	462a      	mov	r2, r5
 800bffc:	2104      	movs	r1, #4
 800bffe:	f7fa f803 	bl	8006008 <HAL_SAI_InitProtocol>
  hsai_BlockB3.Instance = SAI3_Block_B;
 800c002:	480a      	ldr	r0, [pc, #40]	; (800c02c <MX_SAI3_Init+0x50>)
 800c004:	4b0a      	ldr	r3, [pc, #40]	; (800c030 <MX_SAI3_Init+0x54>)
 800c006:	6003      	str	r3, [r0, #0]
  hsai_BlockB3.Init.AudioMode = SAI_MODESLAVE_RX;
 800c008:	6045      	str	r5, [r0, #4]
  hsai_BlockB3.Init.Synchro = SAI_SYNCHRONOUS_EXT_SAI1;
 800c00a:	6086      	str	r6, [r0, #8]
  hsai_BlockB3.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800c00c:	6144      	str	r4, [r0, #20]
  hsai_BlockB3.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800c00e:	61c4      	str	r4, [r0, #28]
  hsai_BlockB3.Init.MonoStereoMode = SAI_STEREOMODE;
 800c010:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockB3.Init.CompandingMode = SAI_NOCOMPANDING;
 800c012:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockB3.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800c014:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB3, SAI_PCM_SHORT, SAI_PROTOCOL_DATASIZE_32BIT, 8) != HAL_OK)
 800c016:	2308      	movs	r3, #8
 800c018:	462a      	mov	r2, r5
 800c01a:	2104      	movs	r1, #4
 800c01c:	f7f9 fff4 	bl	8006008 <HAL_SAI_InitProtocol>
}
 800c020:	bd70      	pop	{r4, r5, r6, pc}
 800c022:	bf00      	nop
 800c024:	200029a0 	.word	0x200029a0
 800c028:	40016004 	.word	0x40016004
 800c02c:	200035b8 	.word	0x200035b8
 800c030:	40016024 	.word	0x40016024

0800c034 <MX_SAI4_Init>:
{
 800c034:	b538      	push	{r3, r4, r5, lr}
  hsai_BlockA4.Instance = SAI4_Block_A;
 800c036:	4810      	ldr	r0, [pc, #64]	; (800c078 <MX_SAI4_Init+0x44>)
 800c038:	4b10      	ldr	r3, [pc, #64]	; (800c07c <MX_SAI4_Init+0x48>)
 800c03a:	6003      	str	r3, [r0, #0]
  hsai_BlockA4.Init.AudioMode = SAI_MODESLAVE_RX;
 800c03c:	2503      	movs	r5, #3
 800c03e:	6045      	str	r5, [r0, #4]
  hsai_BlockA4.Init.Synchro = SAI_SYNCHRONOUS_EXT_SAI2;
 800c040:	6085      	str	r5, [r0, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800c042:	2400      	movs	r4, #0
 800c044:	6144      	str	r4, [r0, #20]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800c046:	61c4      	str	r4, [r0, #28]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 800c048:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 800c04a:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockA4.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800c04c:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA4, SAI_PCM_SHORT, SAI_PROTOCOL_DATASIZE_32BIT, 8) != HAL_OK)
 800c04e:	2308      	movs	r3, #8
 800c050:	462a      	mov	r2, r5
 800c052:	2104      	movs	r1, #4
 800c054:	f7f9 ffd8 	bl	8006008 <HAL_SAI_InitProtocol>
  hsai_BlockB4.Instance = SAI4_Block_B;
 800c058:	4809      	ldr	r0, [pc, #36]	; (800c080 <MX_SAI4_Init+0x4c>)
 800c05a:	4b0a      	ldr	r3, [pc, #40]	; (800c084 <MX_SAI4_Init+0x50>)
 800c05c:	6003      	str	r3, [r0, #0]
  hsai_BlockB4.Init.AudioMode = SAI_MODESLAVE_RX;
 800c05e:	6045      	str	r5, [r0, #4]
  hsai_BlockB4.Init.Synchro = SAI_SYNCHRONOUS_EXT_SAI2;
 800c060:	6085      	str	r5, [r0, #8]
  hsai_BlockB4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800c062:	6144      	str	r4, [r0, #20]
  hsai_BlockB4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800c064:	61c4      	str	r4, [r0, #28]
  hsai_BlockB4.Init.MonoStereoMode = SAI_STEREOMODE;
 800c066:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockB4.Init.CompandingMode = SAI_NOCOMPANDING;
 800c068:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockB4.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800c06a:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB4, SAI_PCM_SHORT, SAI_PROTOCOL_DATASIZE_32BIT, 8) != HAL_OK)
 800c06c:	2308      	movs	r3, #8
 800c06e:	462a      	mov	r2, r5
 800c070:	2104      	movs	r1, #4
 800c072:	f7f9 ffc9 	bl	8006008 <HAL_SAI_InitProtocol>
}
 800c076:	bd38      	pop	{r3, r4, r5, pc}
 800c078:	2000309c 	.word	0x2000309c
 800c07c:	58005404 	.word	0x58005404
 800c080:	20002d5c 	.word	0x20002d5c
 800c084:	58005424 	.word	0x58005424

0800c088 <MX_SPI1_Init>:
{
 800c088:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800c08a:	4811      	ldr	r0, [pc, #68]	; (800c0d0 <MX_SPI1_Init+0x48>)
 800c08c:	4b11      	ldr	r3, [pc, #68]	; (800c0d4 <MX_SPI1_Init+0x4c>)
 800c08e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c090:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c094:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c096:	2300      	movs	r3, #0
 800c098:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c09a:	2207      	movs	r2, #7
 800c09c:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c09e:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c0a0:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800c0a2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c0a6:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800c0a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c0ac:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c0ae:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c0b0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0b2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800c0b4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800c0b6:	6343      	str	r3, [r0, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800c0b8:	6383      	str	r3, [r0, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800c0ba:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c0bc:	6403      	str	r3, [r0, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c0be:	6443      	str	r3, [r0, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800c0c0:	6483      	str	r3, [r0, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800c0c2:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800c0c4:	6503      	str	r3, [r0, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800c0c6:	6543      	str	r3, [r0, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800c0c8:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c0ca:	f7fb fb45 	bl	8007758 <HAL_SPI_Init>
}
 800c0ce:	bd08      	pop	{r3, pc}
 800c0d0:	20003824 	.word	0x20003824
 800c0d4:	40013000 	.word	0x40013000

0800c0d8 <MX_SPI2_Init>:
{
 800c0d8:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 800c0da:	4811      	ldr	r0, [pc, #68]	; (800c120 <MX_SPI2_Init+0x48>)
 800c0dc:	4b11      	ldr	r3, [pc, #68]	; (800c124 <MX_SPI2_Init+0x4c>)
 800c0de:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800c0e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c0e4:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800c0ea:	2207      	movs	r2, #7
 800c0ec:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c0ee:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c0f0:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800c0f2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c0f6:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800c0f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c0fc:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c0fe:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800c100:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c102:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800c104:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800c106:	6343      	str	r3, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800c108:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800c10a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c10c:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c10e:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800c110:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800c112:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800c114:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800c116:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800c118:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800c11a:	f7fb fb1d 	bl	8007758 <HAL_SPI_Init>
}
 800c11e:	bd08      	pop	{r3, pc}
 800c120:	20002a3c 	.word	0x20002a3c
 800c124:	40003800 	.word	0x40003800

0800c128 <MX_SPI3_Init>:
{
 800c128:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 800c12a:	4811      	ldr	r0, [pc, #68]	; (800c170 <MX_SPI3_Init+0x48>)
 800c12c:	4b11      	ldr	r3, [pc, #68]	; (800c174 <MX_SPI3_Init+0x4c>)
 800c12e:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800c130:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c134:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800c136:	2300      	movs	r3, #0
 800c138:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800c13a:	2207      	movs	r2, #7
 800c13c:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c13e:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c140:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800c142:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c146:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800c148:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c14c:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c14e:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800c150:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c152:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800c154:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800c156:	6343      	str	r3, [r0, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800c158:	6383      	str	r3, [r0, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800c15a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c15c:	6403      	str	r3, [r0, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c15e:	6443      	str	r3, [r0, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800c160:	6483      	str	r3, [r0, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800c162:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800c164:	6503      	str	r3, [r0, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800c166:	6543      	str	r3, [r0, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800c168:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800c16a:	f7fb faf5 	bl	8007758 <HAL_SPI_Init>
}
 800c16e:	bd08      	pop	{r3, pc}
 800c170:	20002f7c 	.word	0x20002f7c
 800c174:	40003c00 	.word	0x40003c00

0800c178 <MX_SPI4_Init>:
{
 800c178:	b508      	push	{r3, lr}
  hspi4.Instance = SPI4;
 800c17a:	4811      	ldr	r0, [pc, #68]	; (800c1c0 <MX_SPI4_Init+0x48>)
 800c17c:	4b11      	ldr	r3, [pc, #68]	; (800c1c4 <MX_SPI4_Init+0x4c>)
 800c17e:	6003      	str	r3, [r0, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800c180:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c184:	6043      	str	r3, [r0, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800c186:	2300      	movs	r3, #0
 800c188:	6083      	str	r3, [r0, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800c18a:	2207      	movs	r2, #7
 800c18c:	60c2      	str	r2, [r0, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c18e:	6103      	str	r3, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c190:	6143      	str	r3, [r0, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800c192:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c196:	6182      	str	r2, [r0, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800c198:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c19c:	61c2      	str	r2, [r0, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c19e:	6203      	str	r3, [r0, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800c1a0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c1a2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800c1a4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800c1a6:	6343      	str	r3, [r0, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800c1a8:	6383      	str	r3, [r0, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800c1aa:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c1ac:	6403      	str	r3, [r0, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c1ae:	6443      	str	r3, [r0, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800c1b0:	6483      	str	r3, [r0, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800c1b2:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800c1b4:	6503      	str	r3, [r0, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800c1b6:	6543      	str	r3, [r0, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800c1b8:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800c1ba:	f7fb facd 	bl	8007758 <HAL_SPI_Init>
}
 800c1be:	bd08      	pop	{r3, pc}
 800c1c0:	20003360 	.word	0x20003360
 800c1c4:	40013400 	.word	0x40013400

0800c1c8 <MX_SPI6_Init>:
{
 800c1c8:	b508      	push	{r3, lr}
  hspi6.Instance = SPI6;
 800c1ca:	4811      	ldr	r0, [pc, #68]	; (800c210 <MX_SPI6_Init+0x48>)
 800c1cc:	4b11      	ldr	r3, [pc, #68]	; (800c214 <MX_SPI6_Init+0x4c>)
 800c1ce:	6003      	str	r3, [r0, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800c1d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c1d4:	6043      	str	r3, [r0, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	6083      	str	r3, [r0, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 800c1da:	2207      	movs	r2, #7
 800c1dc:	60c2      	str	r2, [r0, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c1de:	6103      	str	r3, [r0, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c1e0:	6143      	str	r3, [r0, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800c1e2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c1e6:	6182      	str	r2, [r0, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800c1e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c1ec:	61c2      	str	r2, [r0, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c1ee:	6203      	str	r3, [r0, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 800c1f0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c1f2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 800c1f4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800c1f6:	6343      	str	r3, [r0, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800c1f8:	6383      	str	r3, [r0, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800c1fa:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c1fc:	6403      	str	r3, [r0, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c1fe:	6443      	str	r3, [r0, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800c200:	6483      	str	r3, [r0, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800c202:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800c204:	6503      	str	r3, [r0, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800c206:	6543      	str	r3, [r0, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800c208:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 800c20a:	f7fb faa5 	bl	8007758 <HAL_SPI_Init>
}
 800c20e:	bd08      	pop	{r3, pc}
 800c210:	20002eec 	.word	0x20002eec
 800c214:	58001400 	.word	0x58001400

0800c218 <MX_USART1_UART_Init>:
{
 800c218:	b538      	push	{r3, r4, r5, lr}
  huart1.Instance = USART1;
 800c21a:	4c10      	ldr	r4, [pc, #64]	; (800c25c <MX_USART1_UART_Init+0x44>)
 800c21c:	4b10      	ldr	r3, [pc, #64]	; (800c260 <MX_USART1_UART_Init+0x48>)
 800c21e:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 921600;
 800c220:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 800c224:	6063      	str	r3, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c226:	2500      	movs	r5, #0
 800c228:	60a5      	str	r5, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c22a:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c22c:	6125      	str	r5, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c22e:	230c      	movs	r3, #12
 800c230:	6163      	str	r3, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c232:	61a5      	str	r5, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c234:	61e5      	str	r5, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c236:	6225      	str	r5, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800c238:	6265      	str	r5, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c23a:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c23c:	4620      	mov	r0, r4
 800c23e:	f7fd f870 	bl	8009322 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800c242:	4629      	mov	r1, r5
 800c244:	4620      	mov	r0, r4
 800c246:	f7fd f900 	bl	800944a <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800c24a:	4629      	mov	r1, r5
 800c24c:	4620      	mov	r0, r4
 800c24e:	f7fd f921 	bl	8009494 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800c252:	4620      	mov	r0, r4
 800c254:	f7fd f8d5 	bl	8009402 <HAL_UARTEx_EnableFifoMode>
}
 800c258:	bd38      	pop	{r3, r4, r5, pc}
 800c25a:	bf00      	nop
 800c25c:	200032c4 	.word	0x200032c4
 800c260:	40011000 	.word	0x40011000

0800c264 <MX_TIM1_Init>:
{
 800c264:	b530      	push	{r4, r5, lr}
 800c266:	b08d      	sub	sp, #52	; 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c268:	2400      	movs	r4, #0
 800c26a:	9408      	str	r4, [sp, #32]
 800c26c:	9409      	str	r4, [sp, #36]	; 0x24
 800c26e:	940a      	str	r4, [sp, #40]	; 0x28
 800c270:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800c272:	9403      	str	r4, [sp, #12]
 800c274:	9404      	str	r4, [sp, #16]
 800c276:	9405      	str	r4, [sp, #20]
 800c278:	9406      	str	r4, [sp, #24]
 800c27a:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c27c:	9400      	str	r4, [sp, #0]
 800c27e:	9401      	str	r4, [sp, #4]
 800c280:	9402      	str	r4, [sp, #8]
  htim1.Instance = TIM1;
 800c282:	4d16      	ldr	r5, [pc, #88]	; (800c2dc <MX_TIM1_Init+0x78>)
 800c284:	4b16      	ldr	r3, [pc, #88]	; (800c2e0 <MX_TIM1_Init+0x7c>)
 800c286:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 800c288:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c28a:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 65535;
 800c28c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c290:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c292:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800c294:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c296:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800c298:	4628      	mov	r0, r5
 800c29a:	f7fc f819 	bl	80082d0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800c29e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c2a2:	9308      	str	r3, [sp, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800c2a4:	9409      	str	r4, [sp, #36]	; 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800c2a6:	940a      	str	r4, [sp, #40]	; 0x28
  sClockSourceConfig.ClockFilter = 0;
 800c2a8:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800c2aa:	a908      	add	r1, sp, #32
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	f7fc f91b 	bl	80084e8 <HAL_TIM_ConfigClockSource>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_COMBINED_RESETTRIGGER;
 800c2b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c2b6:	9303      	str	r3, [sp, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800c2b8:	2350      	movs	r3, #80	; 0x50
 800c2ba:	9304      	str	r3, [sp, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 800c2bc:	9405      	str	r4, [sp, #20]
  sSlaveConfig.TriggerFilter = 0;
 800c2be:	9407      	str	r4, [sp, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800c2c0:	a903      	add	r1, sp, #12
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	f7fc f9da 	bl	800867c <HAL_TIM_SlaveConfigSynchro>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800c2c8:	2320      	movs	r3, #32
 800c2ca:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800c2cc:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c2ce:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800c2d0:	4669      	mov	r1, sp
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f7fc f9fe 	bl	80086d4 <HAL_TIMEx_MasterConfigSynchronization>
}
 800c2d8:	b00d      	add	sp, #52	; 0x34
 800c2da:	bd30      	pop	{r4, r5, pc}
 800c2dc:	20003650 	.word	0x20003650
 800c2e0:	40010000 	.word	0x40010000

0800c2e4 <MX_TIM8_Init>:
{
 800c2e4:	b530      	push	{r4, r5, lr}
 800c2e6:	b08d      	sub	sp, #52	; 0x34
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800c2e8:	2400      	movs	r4, #0
 800c2ea:	9407      	str	r4, [sp, #28]
 800c2ec:	9408      	str	r4, [sp, #32]
 800c2ee:	9409      	str	r4, [sp, #36]	; 0x24
 800c2f0:	940a      	str	r4, [sp, #40]	; 0x28
 800c2f2:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c2f4:	9404      	str	r4, [sp, #16]
 800c2f6:	9405      	str	r4, [sp, #20]
 800c2f8:	9406      	str	r4, [sp, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800c2fa:	9400      	str	r4, [sp, #0]
 800c2fc:	9401      	str	r4, [sp, #4]
 800c2fe:	9402      	str	r4, [sp, #8]
 800c300:	9403      	str	r4, [sp, #12]
  htim8.Instance = TIM8;
 800c302:	4d18      	ldr	r5, [pc, #96]	; (800c364 <MX_TIM8_Init+0x80>)
 800c304:	4b18      	ldr	r3, [pc, #96]	; (800c368 <MX_TIM8_Init+0x84>)
 800c306:	602b      	str	r3, [r5, #0]
  htim8.Init.Prescaler = 0;
 800c308:	606c      	str	r4, [r5, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c30a:	60ac      	str	r4, [r5, #8]
  htim8.Init.Period = 255;
 800c30c:	23ff      	movs	r3, #255	; 0xff
 800c30e:	60eb      	str	r3, [r5, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c310:	612c      	str	r4, [r5, #16]
  htim8.Init.RepetitionCounter = 0;
 800c312:	616c      	str	r4, [r5, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c314:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800c316:	4628      	mov	r0, r5
 800c318:	f7fb ffda 	bl	80082d0 <HAL_TIM_Base_Init>
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800c31c:	4628      	mov	r0, r5
 800c31e:	f7fc f806 	bl	800832e <HAL_TIM_IC_Init>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800c322:	2307      	movs	r3, #7
 800c324:	9307      	str	r3, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800c326:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800c328:	a907      	add	r1, sp, #28
 800c32a:	4628      	mov	r0, r5
 800c32c:	f7fc f9a6 	bl	800867c <HAL_TIM_SlaveConfigSynchro>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c330:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800c332:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c334:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800c336:	a904      	add	r1, sp, #16
 800c338:	4628      	mov	r0, r5
 800c33a:	f7fc f9cb 	bl	80086d4 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800c33e:	9400      	str	r4, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800c340:	2301      	movs	r3, #1
 800c342:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800c344:	9402      	str	r4, [sp, #8]
  sConfigIC.ICFilter = 0;
 800c346:	9403      	str	r4, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800c348:	4622      	mov	r2, r4
 800c34a:	4669      	mov	r1, sp
 800c34c:	4628      	mov	r0, r5
 800c34e:	f7fc f865 	bl	800841c <HAL_TIM_IC_ConfigChannel>
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800c352:	2302      	movs	r3, #2
 800c354:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800c356:	2204      	movs	r2, #4
 800c358:	4669      	mov	r1, sp
 800c35a:	4628      	mov	r0, r5
 800c35c:	f7fc f85e 	bl	800841c <HAL_TIM_IC_ConfigChannel>
}
 800c360:	b00d      	add	sp, #52	; 0x34
 800c362:	bd30      	pop	{r4, r5, pc}
 800c364:	20002ac4 	.word	0x20002ac4
 800c368:	40010400 	.word	0x40010400

0800c36c <MX_I2C1_Init>:
{
 800c36c:	b538      	push	{r3, r4, r5, lr}
  hi2c1.Instance = I2C1;
 800c36e:	4c0f      	ldr	r4, [pc, #60]	; (800c3ac <MX_I2C1_Init+0x40>)
 800c370:	4b0f      	ldr	r3, [pc, #60]	; (800c3b0 <MX_I2C1_Init+0x44>)
 800c372:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800c374:	f1a3 533e 	sub.w	r3, r3, #796917760	; 0x2f800000
 800c378:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 800c37c:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 800c380:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800c382:	2500      	movs	r5, #0
 800c384:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c386:	2301      	movs	r3, #1
 800c388:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c38a:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800c38c:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c38e:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c390:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c392:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c394:	4620      	mov	r0, r4
 800c396:	f7f6 f8bb 	bl	8002510 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c39a:	4629      	mov	r1, r5
 800c39c:	4620      	mov	r0, r4
 800c39e:	f7f6 fc93 	bl	8002cc8 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	f7f6 fcbd 	bl	8002d24 <HAL_I2CEx_ConfigDigitalFilter>
}
 800c3aa:	bd38      	pop	{r3, r4, r5, pc}
 800c3ac:	20002cc0 	.word	0x20002cc0
 800c3b0:	40005400 	.word	0x40005400

0800c3b4 <MX_I2C2_Init>:
{
 800c3b4:	b538      	push	{r3, r4, r5, lr}
  hi2c2.Instance = I2C2;
 800c3b6:	4c0f      	ldr	r4, [pc, #60]	; (800c3f4 <MX_I2C2_Init+0x40>)
 800c3b8:	4b0f      	ldr	r3, [pc, #60]	; (800c3f8 <MX_I2C2_Init+0x44>)
 800c3ba:	6023      	str	r3, [r4, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 800c3bc:	f1a3 533e 	sub.w	r3, r3, #796917760	; 0x2f800000
 800c3c0:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 800c3c4:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 800c3c8:	6063      	str	r3, [r4, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800c3ca:	2500      	movs	r5, #0
 800c3cc:	60a5      	str	r5, [r4, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	60e3      	str	r3, [r4, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c3d2:	6125      	str	r5, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800c3d4:	6165      	str	r5, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c3d6:	61a5      	str	r5, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c3d8:	61e5      	str	r5, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c3da:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f7f6 f897 	bl	8002510 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c3e2:	4629      	mov	r1, r5
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f7f6 fc6f 	bl	8002cc8 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800c3ea:	4629      	mov	r1, r5
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	f7f6 fc99 	bl	8002d24 <HAL_I2CEx_ConfigDigitalFilter>
}
 800c3f2:	bd38      	pop	{r3, r4, r5, pc}
 800c3f4:	20002d0c 	.word	0x20002d0c
 800c3f8:	40005800 	.word	0x40005800

0800c3fc <SystemClock_Config>:
{
 800c3fc:	b570      	push	{r4, r5, r6, lr}
 800c3fe:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c400:	224c      	movs	r2, #76	; 0x4c
 800c402:	2100      	movs	r1, #0
 800c404:	a839      	add	r0, sp, #228	; 0xe4
 800c406:	f001 ff6c 	bl	800e2e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c40a:	2220      	movs	r2, #32
 800c40c:	2100      	movs	r1, #0
 800c40e:	a831      	add	r0, sp, #196	; 0xc4
 800c410:	f001 ff67 	bl	800e2e2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c414:	22bc      	movs	r2, #188	; 0xbc
 800c416:	2100      	movs	r1, #0
 800c418:	a802      	add	r0, sp, #8
 800c41a:	f001 ff62 	bl	800e2e2 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800c41e:	2002      	movs	r0, #2
 800c420:	f7f7 fa90 	bl	8003944 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800c424:	2300      	movs	r3, #0
 800c426:	9301      	str	r3, [sp, #4]
 800c428:	4b34      	ldr	r3, [pc, #208]	; (800c4fc <SystemClock_Config+0x100>)
 800c42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c42c:	f022 0201 	bic.w	r2, r2, #1
 800c430:	62da      	str	r2, [r3, #44]	; 0x2c
 800c432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c434:	f003 0301 	and.w	r3, r3, #1
 800c438:	9301      	str	r3, [sp, #4]
 800c43a:	4a31      	ldr	r2, [pc, #196]	; (800c500 <SystemClock_Config+0x104>)
 800c43c:	6993      	ldr	r3, [r2, #24]
 800c43e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800c442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c446:	6193      	str	r3, [r2, #24]
 800c448:	6993      	ldr	r3, [r2, #24]
 800c44a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c44e:	9301      	str	r3, [sp, #4]
 800c450:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800c452:	4b2b      	ldr	r3, [pc, #172]	; (800c500 <SystemClock_Config+0x104>)
 800c454:	699b      	ldr	r3, [r3, #24]
 800c456:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c45a:	d0fa      	beq.n	800c452 <SystemClock_Config+0x56>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800c45c:	2322      	movs	r3, #34	; 0x22
 800c45e:	9339      	str	r3, [sp, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800c460:	2301      	movs	r3, #1
 800c462:	933c      	str	r3, [sp, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c464:	2540      	movs	r5, #64	; 0x40
 800c466:	953d      	str	r5, [sp, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800c468:	933f      	str	r3, [sp, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c46a:	2302      	movs	r3, #2
 800c46c:	9342      	str	r3, [sp, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c46e:	2400      	movs	r4, #0
 800c470:	9443      	str	r4, [sp, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c472:	2604      	movs	r6, #4
 800c474:	9644      	str	r6, [sp, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 10;
 800c476:	220a      	movs	r2, #10
 800c478:	9245      	str	r2, [sp, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800c47a:	9346      	str	r3, [sp, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800c47c:	9347      	str	r3, [sp, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800c47e:	9348      	str	r3, [sp, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800c480:	220c      	movs	r2, #12
 800c482:	9249      	str	r2, [sp, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800c484:	934a      	str	r3, [sp, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800c486:	944b      	str	r4, [sp, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c488:	a839      	add	r0, sp, #228	; 0xe4
 800c48a:	f7f7 fac1 	bl	8003a10 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c48e:	233f      	movs	r3, #63	; 0x3f
 800c490:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c492:	2303      	movs	r3, #3
 800c494:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800c496:	9433      	str	r4, [sp, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800c498:	2308      	movs	r3, #8
 800c49a:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800c49c:	9535      	str	r5, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800c49e:	9536      	str	r5, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800c4a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4a4:	9337      	str	r3, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800c4a6:	9538      	str	r5, [sp, #224]	; 0xe0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800c4a8:	4621      	mov	r1, r4
 800c4aa:	a831      	add	r0, sp, #196	; 0xc4
 800c4ac:	f7f7 feca 	bl	8004244 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SPI4
 800c4b0:	4b14      	ldr	r3, [pc, #80]	; (800c504 <SystemClock_Config+0x108>)
 800c4b2:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800c4b4:	9415      	str	r4, [sp, #84]	; 0x54
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800c4b6:	9416      	str	r4, [sp, #88]	; 0x58
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_CLKP;
 800c4b8:	9617      	str	r6, [sp, #92]	; 0x5c
  PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_CLKP;
 800c4ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4be:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800c4c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c4c4:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 800c4c6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800c4ca:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 800c4cc:	2318      	movs	r3, #24
 800c4ce:	9320      	str	r3, [sp, #128]	; 0x80
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 800c4d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c4d4:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c4d6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800c4da:	9323      	str	r3, [sp, #140]	; 0x8c
  PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_CLKP;
 800c4dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c4e0:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInitStruct.Sai4BClockSelection = RCC_SAI4BCLKSOURCE_CLKP;
 800c4e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c4e6:	932c      	str	r3, [sp, #176]	; 0xb0
  PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_HSI;
 800c4e8:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800c4ec:	932d      	str	r3, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c4ee:	a802      	add	r0, sp, #8
 800c4f0:	f7f8 f944 	bl	800477c <HAL_RCCEx_PeriphCLKConfig>
  HAL_PWREx_EnableUSBVoltageDetector();
 800c4f4:	f7f7 fa50 	bl	8003998 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800c4f8:	b04c      	add	sp, #304	; 0x130
 800c4fa:	bd70      	pop	{r4, r5, r6, pc}
 800c4fc:	58000400 	.word	0x58000400
 800c500:	58024800 	.word	0x58024800
 800c504:	80057f09 	.word	0x80057f09

0800c508 <main>:
{
 800c508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c50c:	f5ad 7d60 	sub.w	sp, sp, #896	; 0x380
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c510:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c514:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800c518:	4bd9      	ldr	r3, [pc, #868]	; (800c880 <main+0x378>)
 800c51a:	2400      	movs	r4, #0
 800c51c:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800c520:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c524:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800c528:	695a      	ldr	r2, [r3, #20]
 800c52a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c52e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c530:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c534:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800c538:	f7f4 f8c8 	bl	80006cc <HAL_Init>
  SystemClock_Config();
 800c53c:	f7ff ff5e 	bl	800c3fc <SystemClock_Config>
  MX_GPIO_Init();
 800c540:	f7ff fb70 	bl	800bc24 <MX_GPIO_Init>
  MX_DMA_Init();
 800c544:	f7ff fc7a 	bl	800be3c <MX_DMA_Init>
  MX_SAI1_Init();
 800c548:	f7ff fcf0 	bl	800bf2c <MX_SAI1_Init>
  MX_SAI2_Init();
 800c54c:	f7ff fd1a 	bl	800bf84 <MX_SAI2_Init>
  MX_SAI3_Init();
 800c550:	f7ff fd44 	bl	800bfdc <MX_SAI3_Init>
  MX_SAI4_Init();
 800c554:	f7ff fd6e 	bl	800c034 <MX_SAI4_Init>
  MX_SPI1_Init();
 800c558:	f7ff fd96 	bl	800c088 <MX_SPI1_Init>
  MX_SPI2_Init();
 800c55c:	f7ff fdbc 	bl	800c0d8 <MX_SPI2_Init>
  MX_SPI3_Init();
 800c560:	f7ff fde2 	bl	800c128 <MX_SPI3_Init>
  MX_SPI4_Init();
 800c564:	f7ff fe08 	bl	800c178 <MX_SPI4_Init>
  MX_SPI6_Init();
 800c568:	f7ff fe2e 	bl	800c1c8 <MX_SPI6_Init>
  MX_USART1_UART_Init();
 800c56c:	f7ff fe54 	bl	800c218 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800c570:	f7ff fe78 	bl	800c264 <MX_TIM1_Init>
  MX_TIM8_Init();
 800c574:	f7ff feb6 	bl	800c2e4 <MX_TIM8_Init>
  MX_I2C1_Init();
 800c578:	f7ff fef8 	bl	800c36c <MX_I2C1_Init>
  MX_I2C2_Init();
 800c57c:	f7ff ff1a 	bl	800c3b4 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 800c580:	f7ff fb3a 	bl	800bbf8 <MX_SDMMC1_SD_Init>
  MX_USB_DEVICE_Init();
 800c584:	f001 fbda 	bl	800dd3c <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 800c588:	f7ff fb1c 	bl	800bbc4 <MX_FATFS_Init>
    BSP_SD_Init();
 800c58c:	f7ff fb00 	bl	800bb90 <BSP_SD_Init>
    HAL_GPIO_WritePin(ADC1_START_GPIO_Port, ADC1_START_Pin, GPIO_PIN_RESET);
 800c590:	4fbc      	ldr	r7, [pc, #752]	; (800c884 <main+0x37c>)
 800c592:	4622      	mov	r2, r4
 800c594:	2110      	movs	r1, #16
 800c596:	4638      	mov	r0, r7
 800c598:	f7f5 ff2d 	bl	80023f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ADC2_START_GPIO_Port, ADC2_START_Pin, GPIO_PIN_RESET);
 800c59c:	4eba      	ldr	r6, [pc, #744]	; (800c888 <main+0x380>)
 800c59e:	4622      	mov	r2, r4
 800c5a0:	2110      	movs	r1, #16
 800c5a2:	4630      	mov	r0, r6
 800c5a4:	f7f5 ff27 	bl	80023f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ADC3_START_GPIO_Port, ADC3_START_Pin, GPIO_PIN_RESET);
 800c5a8:	4622      	mov	r2, r4
 800c5aa:	2120      	movs	r1, #32
 800c5ac:	48b7      	ldr	r0, [pc, #732]	; (800c88c <main+0x384>)
 800c5ae:	f7f5 ff22 	bl	80023f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ADC4_START_GPIO_Port, ADC4_START_Pin, GPIO_PIN_RESET);
 800c5b2:	4db7      	ldr	r5, [pc, #732]	; (800c890 <main+0x388>)
 800c5b4:	4622      	mov	r2, r4
 800c5b6:	2104      	movs	r1, #4
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	f7f5 ff1c 	bl	80023f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ADC1_RESET_GPIO_Port, ADC1_RESET_Pin, GPIO_PIN_RESET);
 800c5be:	4622      	mov	r2, r4
 800c5c0:	2120      	movs	r1, #32
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	f7f5 ff17 	bl	80023f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ADC2_RESET_GPIO_Port, ADC2_RESET_Pin, GPIO_PIN_RESET);
 800c5c8:	4622      	mov	r2, r4
 800c5ca:	2120      	movs	r1, #32
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	f7f5 ff12 	bl	80023f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ADC3_RESET_GPIO_Port, ADC3_RESET_Pin, GPIO_PIN_RESET);
 800c5d2:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 800c8ac <main+0x3a4>
 800c5d6:	4622      	mov	r2, r4
 800c5d8:	2102      	movs	r1, #2
 800c5da:	4640      	mov	r0, r8
 800c5dc:	f7f5 ff0b 	bl	80023f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ADC4_RESET_GPIO_Port, ADC4_RESET_Pin, GPIO_PIN_RESET);
 800c5e0:	4622      	mov	r2, r4
 800c5e2:	2108      	movs	r1, #8
 800c5e4:	4628      	mov	r0, r5
 800c5e6:	f7f5 ff06 	bl	80023f6 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800c5ea:	2064      	movs	r0, #100	; 0x64
 800c5ec:	f7f4 f8ae 	bl	800074c <HAL_Delay>
    HAL_GPIO_WritePin(ADC1_RESET_GPIO_Port, ADC1_RESET_Pin, GPIO_PIN_SET);
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	2120      	movs	r1, #32
 800c5f4:	4638      	mov	r0, r7
 800c5f6:	f7f5 fefe 	bl	80023f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ADC2_RESET_GPIO_Port, ADC2_RESET_Pin, GPIO_PIN_SET);
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	2120      	movs	r1, #32
 800c5fe:	4630      	mov	r0, r6
 800c600:	f7f5 fef9 	bl	80023f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ADC3_RESET_GPIO_Port, ADC3_RESET_Pin, GPIO_PIN_SET);
 800c604:	2201      	movs	r2, #1
 800c606:	2102      	movs	r1, #2
 800c608:	4640      	mov	r0, r8
 800c60a:	f7f5 fef4 	bl	80023f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ADC4_RESET_GPIO_Port, ADC4_RESET_Pin, GPIO_PIN_SET);
 800c60e:	2201      	movs	r2, #1
 800c610:	2108      	movs	r1, #8
 800c612:	4628      	mov	r0, r5
 800c614:	f7f5 feef 	bl	80023f6 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800c618:	2064      	movs	r0, #100	; 0x64
 800c61a:	f7f4 f897 	bl	800074c <HAL_Delay>
      init_param.ctrl_mode = AD7779_SPI_CTRL;
 800c61e:	2301      	movs	r3, #1
 800c620:	f88d 330e 	strb.w	r3, [sp, #782]	; 0x30e
      init_param.spi_crc_en = AD7779_DISABLE;
 800c624:	f88d 330f 	strb.w	r3, [sp, #783]	; 0x30f
      for (i = AD7779_CH0; i <= AD7779_CH7; i++)
 800c628:	2c07      	cmp	r4, #7
 800c62a:	f240 8121 	bls.w	800c870 <main+0x368>
      for (i = AD7779_CH0; i <= AD7779_CH7; i++) {
 800c62e:	2300      	movs	r3, #0
 800c630:	2b07      	cmp	r3, #7
 800c632:	f240 813f 	bls.w	800c8b4 <main+0x3ac>
      init_param.pwr_mode = AD7779_HIGH_RES;
 800c636:	2301      	movs	r3, #1
 800c638:	f88d 3325 	strb.w	r3, [sp, #805]	; 0x325
      init_param.dec_rate_int = 0xfa0;//hr 0.512 kHz
 800c63c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800c640:	f8ad 3320 	strh.w	r3, [sp, #800]	; 0x320
      init_param.dec_rate_dec = 0;
 800c644:	2300      	movs	r3, #0
 800c646:	f8ad 3322 	strh.w	r3, [sp, #802]	; 0x322
      init_param.ref_type = AD7779_EXT_REF;
 800c64a:	f88d 3324 	strb.w	r3, [sp, #804]	; 0x324
      init_param.dclk_div = AD7779_DCLK_DIV_1;
 800c64e:	f88d 3326 	strb.w	r3, [sp, #806]	; 0x326
      for (i = AD7779_CH0; i <= AD7779_CH7; i++) {
 800c652:	2b07      	cmp	r3, #7
 800c654:	f240 8136 	bls.w	800c8c4 <main+0x3bc>
      init_param.spi_dev.dev = &hspi6;
 800c658:	ad94      	add	r5, sp, #592	; 0x250
 800c65a:	4b8e      	ldr	r3, [pc, #568]	; (800c894 <main+0x38c>)
 800c65c:	9396      	str	r3, [sp, #600]	; 0x258
      init_param.spi_dev.chip_select_port = SPI6_NSS_GPIO_Port;
 800c65e:	4b8e      	ldr	r3, [pc, #568]	; (800c898 <main+0x390>)
 800c660:	9397      	str	r3, [sp, #604]	; 0x25c
      init_param.spi_dev.chip_select_pin = SPI6_NSS_Pin;
 800c662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c666:	f8ad 3260 	strh.w	r3, [sp, #608]	; 0x260
      ad7779_setup(&device1, init_param);
 800c66a:	f44f 7790 	mov.w	r7, #288	; 0x120
 800c66e:	463a      	mov	r2, r7
 800c670:	a996      	add	r1, sp, #600	; 0x258
 800c672:	4668      	mov	r0, sp
 800c674:	f001 fe2a 	bl	800e2cc <memcpy>
 800c678:	e895 000c 	ldmia.w	r5, {r2, r3}
 800c67c:	a8df      	add	r0, sp, #892	; 0x37c
 800c67e:	f7ff f975 	bl	800b96c <ad7779_setup>
      ad7779_spi_int_reg_write_mask(device1,AD7779_REG_SRC_UPDATE,AD7779_SRC_LOAD_SOURCE,AD7779_DISABLE);
 800c682:	2301      	movs	r3, #1
 800c684:	2280      	movs	r2, #128	; 0x80
 800c686:	2164      	movs	r1, #100	; 0x64
 800c688:	98df      	ldr	r0, [sp, #892]	; 0x37c
 800c68a:	f7ff f800 	bl	800b68e <ad7779_spi_int_reg_write_mask>
      ad7779_spi_int_reg_write_mask(device1,AD7779_REG_SRC_UPDATE,AD7779_SRC_LOAD_UPDATE,AD7779_ENABLE);
 800c68e:	2300      	movs	r3, #0
 800c690:	2201      	movs	r2, #1
 800c692:	2164      	movs	r1, #100	; 0x64
 800c694:	98df      	ldr	r0, [sp, #892]	; 0x37c
 800c696:	f7fe fffa 	bl	800b68e <ad7779_spi_int_reg_write_mask>
      HAL_Delay(1);
 800c69a:	2001      	movs	r0, #1
 800c69c:	f7f4 f856 	bl	800074c <HAL_Delay>
      ad7779_spi_int_reg_write_mask(device1,AD7779_REG_SRC_UPDATE,AD7779_SRC_LOAD_UPDATE,AD7779_DISABLE);
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	2164      	movs	r1, #100	; 0x64
 800c6a6:	98df      	ldr	r0, [sp, #892]	; 0x37c
 800c6a8:	f7fe fff1 	bl	800b68e <ad7779_spi_int_reg_write_mask>
      devices[0]=device1;
 800c6ac:	4e7b      	ldr	r6, [pc, #492]	; (800c89c <main+0x394>)
 800c6ae:	9bdf      	ldr	r3, [sp, #892]	; 0x37c
 800c6b0:	6033      	str	r3, [r6, #0]
      ad7779_init_param init_param2 = init_param;
 800c6b2:	ac4a      	add	r4, sp, #296	; 0x128
 800c6b4:	f44f 7894 	mov.w	r8, #296	; 0x128
 800c6b8:	4642      	mov	r2, r8
 800c6ba:	4629      	mov	r1, r5
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f001 fe05 	bl	800e2cc <memcpy>
      init_param2.spi_dev.dev = &hspi3;
 800c6c2:	4b77      	ldr	r3, [pc, #476]	; (800c8a0 <main+0x398>)
 800c6c4:	60a3      	str	r3, [r4, #8]
      init_param2.spi_dev.chip_select_port = SPI3_NSS_GPIO_Port;
 800c6c6:	4b77      	ldr	r3, [pc, #476]	; (800c8a4 <main+0x39c>)
 800c6c8:	60e3      	str	r3, [r4, #12]
      init_param2.spi_dev.chip_select_pin = SPI3_NSS_Pin;
 800c6ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6ce:	8223      	strh	r3, [r4, #16]
      ad7779_setup(&device2, init_param2);
 800c6d0:	463a      	mov	r2, r7
 800c6d2:	a94c      	add	r1, sp, #304	; 0x130
 800c6d4:	4668      	mov	r0, sp
 800c6d6:	f001 fdf9 	bl	800e2cc <memcpy>
 800c6da:	e894 000c 	ldmia.w	r4, {r2, r3}
 800c6de:	a849      	add	r0, sp, #292	; 0x124
 800c6e0:	f7ff f944 	bl	800b96c <ad7779_setup>
      ad7779_spi_int_reg_write_mask(device2,AD7779_REG_SRC_UPDATE,AD7779_SRC_LOAD_SOURCE,AD7779_DISABLE);
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	2280      	movs	r2, #128	; 0x80
 800c6e8:	2164      	movs	r1, #100	; 0x64
 800c6ea:	9849      	ldr	r0, [sp, #292]	; 0x124
 800c6ec:	f7fe ffcf 	bl	800b68e <ad7779_spi_int_reg_write_mask>
      ad7779_spi_int_reg_write_mask(device2,AD7779_REG_SRC_UPDATE,AD7779_SRC_LOAD_UPDATE,AD7779_ENABLE);
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	2164      	movs	r1, #100	; 0x64
 800c6f6:	9849      	ldr	r0, [sp, #292]	; 0x124
 800c6f8:	f7fe ffc9 	bl	800b68e <ad7779_spi_int_reg_write_mask>
      HAL_Delay(1);
 800c6fc:	2001      	movs	r0, #1
 800c6fe:	f7f4 f825 	bl	800074c <HAL_Delay>
      ad7779_spi_int_reg_write_mask(device2,AD7779_REG_SRC_UPDATE,AD7779_SRC_LOAD_UPDATE,AD7779_DISABLE);
 800c702:	2301      	movs	r3, #1
 800c704:	461a      	mov	r2, r3
 800c706:	2164      	movs	r1, #100	; 0x64
 800c708:	9849      	ldr	r0, [sp, #292]	; 0x124
 800c70a:	f7fe ffc0 	bl	800b68e <ad7779_spi_int_reg_write_mask>
      devices[1]=device2;
 800c70e:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800c710:	6073      	str	r3, [r6, #4]
      ad7779_init_param init_param3 = init_param;
 800c712:	4642      	mov	r2, r8
 800c714:	4629      	mov	r1, r5
 800c716:	4620      	mov	r0, r4
 800c718:	f001 fdd8 	bl	800e2cc <memcpy>
      init_param3.spi_dev.dev = &hspi2;
 800c71c:	4b62      	ldr	r3, [pc, #392]	; (800c8a8 <main+0x3a0>)
 800c71e:	60a3      	str	r3, [r4, #8]
      init_param3.spi_dev.chip_select_port = SPI2_NSS_GPIO_Port;
 800c720:	4b62      	ldr	r3, [pc, #392]	; (800c8ac <main+0x3a4>)
 800c722:	60e3      	str	r3, [r4, #12]
      init_param3.spi_dev.chip_select_pin = SPI2_NSS_Pin;
 800c724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c728:	8223      	strh	r3, [r4, #16]
      ad7779_setup(&device3, init_param3);
 800c72a:	463a      	mov	r2, r7
 800c72c:	a94c      	add	r1, sp, #304	; 0x130
 800c72e:	4668      	mov	r0, sp
 800c730:	f001 fdcc 	bl	800e2cc <memcpy>
 800c734:	e894 000c 	ldmia.w	r4, {r2, r3}
 800c738:	a849      	add	r0, sp, #292	; 0x124
 800c73a:	f7ff f917 	bl	800b96c <ad7779_setup>
      ad7779_spi_int_reg_write_mask(device3,AD7779_REG_SRC_UPDATE,AD7779_SRC_LOAD_SOURCE,AD7779_DISABLE);
 800c73e:	2301      	movs	r3, #1
 800c740:	2280      	movs	r2, #128	; 0x80
 800c742:	2164      	movs	r1, #100	; 0x64
 800c744:	9849      	ldr	r0, [sp, #292]	; 0x124
 800c746:	f7fe ffa2 	bl	800b68e <ad7779_spi_int_reg_write_mask>
      ad7779_spi_int_reg_write_mask(device3,AD7779_REG_SRC_UPDATE,AD7779_SRC_LOAD_UPDATE,AD7779_ENABLE);
 800c74a:	2300      	movs	r3, #0
 800c74c:	2201      	movs	r2, #1
 800c74e:	2164      	movs	r1, #100	; 0x64
 800c750:	9849      	ldr	r0, [sp, #292]	; 0x124
 800c752:	f7fe ff9c 	bl	800b68e <ad7779_spi_int_reg_write_mask>
      HAL_Delay(1);
 800c756:	2001      	movs	r0, #1
 800c758:	f7f3 fff8 	bl	800074c <HAL_Delay>
      ad7779_spi_int_reg_write_mask(device3,AD7779_REG_SRC_UPDATE,AD7779_SRC_LOAD_UPDATE,AD7779_DISABLE);
 800c75c:	2301      	movs	r3, #1
 800c75e:	461a      	mov	r2, r3
 800c760:	2164      	movs	r1, #100	; 0x64
 800c762:	9849      	ldr	r0, [sp, #292]	; 0x124
 800c764:	f7fe ff93 	bl	800b68e <ad7779_spi_int_reg_write_mask>
      devices[2]=device3;
 800c768:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800c76a:	60b3      	str	r3, [r6, #8]
      ad7779_init_param init_param4 = init_param;
 800c76c:	4642      	mov	r2, r8
 800c76e:	4629      	mov	r1, r5
 800c770:	4620      	mov	r0, r4
 800c772:	f001 fdab 	bl	800e2cc <memcpy>
      init_param4.spi_dev.dev = &hspi4;
 800c776:	4b4e      	ldr	r3, [pc, #312]	; (800c8b0 <main+0x3a8>)
 800c778:	60a3      	str	r3, [r4, #8]
      init_param4.spi_dev.chip_select_port = SPI4_NSS_GPIO_Port;
 800c77a:	4b45      	ldr	r3, [pc, #276]	; (800c890 <main+0x388>)
 800c77c:	60e3      	str	r3, [r4, #12]
      init_param4.spi_dev.chip_select_pin = SPI4_NSS_Pin;
 800c77e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c782:	8223      	strh	r3, [r4, #16]
      ad7779_setup(&device4, init_param4);
 800c784:	463a      	mov	r2, r7
 800c786:	a94c      	add	r1, sp, #304	; 0x130
 800c788:	4668      	mov	r0, sp
 800c78a:	f001 fd9f 	bl	800e2cc <memcpy>
 800c78e:	e894 000c 	ldmia.w	r4, {r2, r3}
 800c792:	a849      	add	r0, sp, #292	; 0x124
 800c794:	f7ff f8ea 	bl	800b96c <ad7779_setup>
      ad7779_spi_int_reg_write_mask(device4,AD7779_REG_SRC_UPDATE,AD7779_SRC_LOAD_SOURCE,AD7779_DISABLE);
 800c798:	2301      	movs	r3, #1
 800c79a:	2280      	movs	r2, #128	; 0x80
 800c79c:	2164      	movs	r1, #100	; 0x64
 800c79e:	9849      	ldr	r0, [sp, #292]	; 0x124
 800c7a0:	f7fe ff75 	bl	800b68e <ad7779_spi_int_reg_write_mask>
      ad7779_spi_int_reg_write_mask(device4,AD7779_REG_SRC_UPDATE,AD7779_SRC_LOAD_UPDATE,AD7779_ENABLE);
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	2164      	movs	r1, #100	; 0x64
 800c7aa:	9849      	ldr	r0, [sp, #292]	; 0x124
 800c7ac:	f7fe ff6f 	bl	800b68e <ad7779_spi_int_reg_write_mask>
      HAL_Delay(1);
 800c7b0:	2001      	movs	r0, #1
 800c7b2:	f7f3 ffcb 	bl	800074c <HAL_Delay>
      ad7779_spi_int_reg_write_mask(device4,AD7779_REG_SRC_UPDATE,AD7779_SRC_LOAD_UPDATE,AD7779_DISABLE);
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	2164      	movs	r1, #100	; 0x64
 800c7bc:	9849      	ldr	r0, [sp, #292]	; 0x124
 800c7be:	f7fe ff66 	bl	800b68e <ad7779_spi_int_reg_write_mask>
      devices[3]=device4;
 800c7c2:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800c7c4:	60f3      	str	r3, [r6, #12]
          HAL_Delay(100);
 800c7c6:	2064      	movs	r0, #100	; 0x64
 800c7c8:	f7f3 ffc0 	bl	800074c <HAL_Delay>
            for(int ad_adc = 0; ad_adc < uint8_ad_adc_number; ad_adc ++)
 800c7cc:	2400      	movs	r4, #0
 800c7ce:	2c03      	cmp	r4, #3
 800c7d0:	f340 8088 	ble.w	800c8e4 <main+0x3dc>
            for(int ad_adc = uint8_ad_adc_number-1; ad_adc >= 0; ad_adc --)
 800c7d4:	2403      	movs	r4, #3
 800c7d6:	2c00      	cmp	r4, #0
 800c7d8:	f280 80b3 	bge.w	800c942 <main+0x43a>
      HAL_Delay(1);
 800c7dc:	2001      	movs	r0, #1
 800c7de:	f7f3 ffb5 	bl	800074c <HAL_Delay>
      HAL_GPIO_WritePin(ADC1_START_GPIO_Port, ADC1_START_Pin, GPIO_PIN_RESET);
 800c7e2:	4f28      	ldr	r7, [pc, #160]	; (800c884 <main+0x37c>)
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	2110      	movs	r1, #16
 800c7e8:	4638      	mov	r0, r7
 800c7ea:	f7f5 fe04 	bl	80023f6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ADC2_START_GPIO_Port, ADC2_START_Pin, GPIO_PIN_RESET);
 800c7ee:	4e26      	ldr	r6, [pc, #152]	; (800c888 <main+0x380>)
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	2110      	movs	r1, #16
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	f7f5 fdfe 	bl	80023f6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ADC3_START_GPIO_Port, ADC3_START_Pin, GPIO_PIN_RESET);
 800c7fa:	4d24      	ldr	r5, [pc, #144]	; (800c88c <main+0x384>)
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	2120      	movs	r1, #32
 800c800:	4628      	mov	r0, r5
 800c802:	f7f5 fdf8 	bl	80023f6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ADC4_START_GPIO_Port, ADC4_START_Pin, GPIO_PIN_RESET);
 800c806:	4c22      	ldr	r4, [pc, #136]	; (800c890 <main+0x388>)
 800c808:	2200      	movs	r2, #0
 800c80a:	2104      	movs	r1, #4
 800c80c:	4620      	mov	r0, r4
 800c80e:	f7f5 fdf2 	bl	80023f6 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 800c812:	2064      	movs	r0, #100	; 0x64
 800c814:	f7f3 ff9a 	bl	800074c <HAL_Delay>
      HAL_GPIO_WritePin(ADC1_START_GPIO_Port, ADC1_START_Pin, GPIO_PIN_SET);
 800c818:	2201      	movs	r2, #1
 800c81a:	2110      	movs	r1, #16
 800c81c:	4638      	mov	r0, r7
 800c81e:	f7f5 fdea 	bl	80023f6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ADC2_START_GPIO_Port, ADC2_START_Pin, GPIO_PIN_SET);
 800c822:	2201      	movs	r2, #1
 800c824:	2110      	movs	r1, #16
 800c826:	4630      	mov	r0, r6
 800c828:	f7f5 fde5 	bl	80023f6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ADC3_START_GPIO_Port, ADC3_START_Pin, GPIO_PIN_SET);
 800c82c:	2201      	movs	r2, #1
 800c82e:	2120      	movs	r1, #32
 800c830:	4628      	mov	r0, r5
 800c832:	f7f5 fde0 	bl	80023f6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ADC4_START_GPIO_Port, ADC4_START_Pin, GPIO_PIN_SET);
 800c836:	2201      	movs	r2, #1
 800c838:	2104      	movs	r1, #4
 800c83a:	4620      	mov	r0, r4
 800c83c:	f7f5 fddb 	bl	80023f6 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 800c840:	2064      	movs	r0, #100	; 0x64
 800c842:	f7f3 ff83 	bl	800074c <HAL_Delay>
      HAL_GPIO_WritePin(ADC1_START_GPIO_Port, ADC1_START_Pin, GPIO_PIN_RESET);
 800c846:	2200      	movs	r2, #0
 800c848:	2110      	movs	r1, #16
 800c84a:	4638      	mov	r0, r7
 800c84c:	f7f5 fdd3 	bl	80023f6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ADC2_START_GPIO_Port, ADC2_START_Pin, GPIO_PIN_RESET);
 800c850:	2200      	movs	r2, #0
 800c852:	2110      	movs	r1, #16
 800c854:	4630      	mov	r0, r6
 800c856:	f7f5 fdce 	bl	80023f6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ADC3_START_GPIO_Port, ADC3_START_Pin, GPIO_PIN_RESET);
 800c85a:	2200      	movs	r2, #0
 800c85c:	2120      	movs	r1, #32
 800c85e:	4628      	mov	r0, r5
 800c860:	f7f5 fdc9 	bl	80023f6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ADC4_START_GPIO_Port, ADC4_START_Pin, GPIO_PIN_RESET);
 800c864:	2200      	movs	r2, #0
 800c866:	2104      	movs	r1, #4
 800c868:	4620      	mov	r0, r4
 800c86a:	f7f5 fdc4 	bl	80023f6 <HAL_GPIO_WritePin>
 800c86e:	e09e      	b.n	800c9ae <main+0x4a6>
        init_param.state[i] = AD7779_ENABLE;
 800c870:	ab94      	add	r3, sp, #592	; 0x250
 800c872:	4423      	add	r3, r4
 800c874:	2200      	movs	r2, #0
 800c876:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
      for (i = AD7779_CH0; i <= AD7779_CH7; i++)
 800c87a:	3401      	adds	r4, #1
 800c87c:	b2e4      	uxtb	r4, r4
 800c87e:	e6d3      	b.n	800c628 <main+0x120>
 800c880:	e000ed00 	.word	0xe000ed00
 800c884:	58020c00 	.word	0x58020c00
 800c888:	58021400 	.word	0x58021400
 800c88c:	58020800 	.word	0x58020800
 800c890:	58021800 	.word	0x58021800
 800c894:	20002eec 	.word	0x20002eec
 800c898:	58021000 	.word	0x58021000
 800c89c:	200038ac 	.word	0x200038ac
 800c8a0:	20002f7c 	.word	0x20002f7c
 800c8a4:	58020000 	.word	0x58020000
 800c8a8:	20002a3c 	.word	0x20002a3c
 800c8ac:	58020400 	.word	0x58020400
 800c8b0:	20003360 	.word	0x20003360
        init_param.gain[i] = AD7779_GAIN_8;
 800c8b4:	aa94      	add	r2, sp, #592	; 0x250
 800c8b6:	441a      	add	r2, r3
 800c8b8:	2103      	movs	r1, #3
 800c8ba:	f882 10c8 	strb.w	r1, [r2, #200]	; 0xc8
      for (i = AD7779_CH0; i <= AD7779_CH7; i++) {
 800c8be:	3301      	adds	r3, #1
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	e6b5      	b.n	800c630 <main+0x128>
        init_param.sync_offset[i] = 0;
 800c8c4:	aa94      	add	r2, sp, #592	; 0x250
 800c8c6:	18d0      	adds	r0, r2, r3
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	f880 10d7 	strb.w	r1, [r0, #215]	; 0xd7
        init_param.offset_corr[i] = 0;
 800c8ce:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c8d2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
        init_param.gain_corr[i] = 0;
 800c8d6:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800c8da:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
      for (i = AD7779_CH0; i <= AD7779_CH7; i++) {
 800c8de:	3301      	adds	r3, #1
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	e6b6      	b.n	800c652 <main+0x14a>
                aTxBuffer[0] = AD7779_REG_DOUT_FORMAT;
 800c8e4:	4d7c      	ldr	r5, [pc, #496]	; (800cad8 <main+0x5d0>)
 800c8e6:	2314      	movs	r3, #20
 800c8e8:	f885 322c 	strb.w	r3, [r5, #556]	; 0x22c
                aTxBuffer[1] = AD7779_DOUT_FORMAT(2);//1 DOUTx lines
 800c8ec:	2380      	movs	r3, #128	; 0x80
 800c8ee:	f885 322d 	strb.w	r3, [r5, #557]	; 0x22d
                    HAL_GPIO_WritePin(devices[ad_adc]->spi_dev.chip_select_port, devices[ad_adc]->spi_dev.chip_select_pin, GPIO_PIN_RESET);
 800c8f2:	4e7a      	ldr	r6, [pc, #488]	; (800cadc <main+0x5d4>)
 800c8f4:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	8919      	ldrh	r1, [r3, #8]
 800c8fc:	6858      	ldr	r0, [r3, #4]
 800c8fe:	f7f5 fd7a 	bl	80023f6 <HAL_GPIO_WritePin>
                    if(HAL_SPI_TransmitReceive(devices[ad_adc]->spi_dev.dev, aTxBuffer, datas[ad_adc], 2, 5000) != HAL_OK)
 800c902:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800c906:	f505 7213 	add.w	r2, r5, #588	; 0x24c
 800c90a:	6818      	ldr	r0, [r3, #0]
 800c90c:	f241 3388 	movw	r3, #5000	; 0x1388
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	2302      	movs	r3, #2
 800c914:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 800c918:	f505 710b 	add.w	r1, r5, #556	; 0x22c
 800c91c:	f7fa ffc4 	bl	80078a8 <HAL_SPI_TransmitReceive>
                    HAL_GPIO_WritePin(devices[ad_adc]->spi_dev.chip_select_port, devices[ad_adc]->spi_dev.chip_select_pin, GPIO_PIN_SET);
 800c920:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800c924:	2201      	movs	r2, #1
 800c926:	8919      	ldrh	r1, [r3, #8]
 800c928:	6858      	ldr	r0, [r3, #4]
 800c92a:	f7f5 fd64 	bl	80023f6 <HAL_GPIO_WritePin>
                while (HAL_SPI_GetState(devices[ad_adc]->spi_dev.dev) != HAL_SPI_STATE_READY)
 800c92e:	4b6b      	ldr	r3, [pc, #428]	; (800cadc <main+0x5d4>)
 800c930:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c934:	6818      	ldr	r0, [r3, #0]
 800c936:	f7fb faf6 	bl	8007f26 <HAL_SPI_GetState>
 800c93a:	2801      	cmp	r0, #1
 800c93c:	d1f7      	bne.n	800c92e <main+0x426>
            for(int ad_adc = 0; ad_adc < uint8_ad_adc_number; ad_adc ++)
 800c93e:	3401      	adds	r4, #1
 800c940:	e745      	b.n	800c7ce <main+0x2c6>
                aTxBuffer[0] = AD7779_REG_GENERAL_USER_CONFIG_2;
 800c942:	4d65      	ldr	r5, [pc, #404]	; (800cad8 <main+0x5d0>)
 800c944:	2312      	movs	r3, #18
 800c946:	f885 322c 	strb.w	r3, [r5, #556]	; 0x22c
                aTxBuffer[1] = AD7771_FILTER_MODE | AD7779_SDO_DRIVE_STR(1) | AD7779_DOUT_DRIVE_STR(0) | AD7779_SPI_SYNC;
 800c94a:	2349      	movs	r3, #73	; 0x49
 800c94c:	f885 322d 	strb.w	r3, [r5, #557]	; 0x22d
                    HAL_GPIO_WritePin(devices[ad_adc]->spi_dev.chip_select_port, devices[ad_adc]->spi_dev.chip_select_pin, GPIO_PIN_RESET);
 800c950:	4e62      	ldr	r6, [pc, #392]	; (800cadc <main+0x5d4>)
 800c952:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800c956:	2200      	movs	r2, #0
 800c958:	8919      	ldrh	r1, [r3, #8]
 800c95a:	6858      	ldr	r0, [r3, #4]
 800c95c:	f7f5 fd4b 	bl	80023f6 <HAL_GPIO_WritePin>
                    if(HAL_SPI_TransmitReceive(devices[ad_adc]->spi_dev.dev, aTxBuffer, datas[ad_adc], 2, 5000) != HAL_OK)
 800c960:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800c964:	f505 7213 	add.w	r2, r5, #588	; 0x24c
 800c968:	6818      	ldr	r0, [r3, #0]
 800c96a:	f241 3388 	movw	r3, #5000	; 0x1388
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	2302      	movs	r3, #2
 800c972:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 800c976:	f505 710b 	add.w	r1, r5, #556	; 0x22c
 800c97a:	f7fa ff95 	bl	80078a8 <HAL_SPI_TransmitReceive>
                    HAL_GPIO_WritePin(devices[ad_adc]->spi_dev.chip_select_port, devices[ad_adc]->spi_dev.chip_select_pin, GPIO_PIN_SET);
 800c97e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800c982:	2201      	movs	r2, #1
 800c984:	8919      	ldrh	r1, [r3, #8]
 800c986:	6858      	ldr	r0, [r3, #4]
 800c988:	f7f5 fd35 	bl	80023f6 <HAL_GPIO_WritePin>
              while (HAL_SPI_GetState(devices[ad_adc]->spi_dev.dev) != HAL_SPI_STATE_READY)
 800c98c:	4b53      	ldr	r3, [pc, #332]	; (800cadc <main+0x5d4>)
 800c98e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c992:	6818      	ldr	r0, [r3, #0]
 800c994:	f7fb fac7 	bl	8007f26 <HAL_SPI_GetState>
 800c998:	2801      	cmp	r0, #1
 800c99a:	d1f7      	bne.n	800c98c <main+0x484>
                HAL_Delay(100);
 800c99c:	2064      	movs	r0, #100	; 0x64
 800c99e:	f7f3 fed5 	bl	800074c <HAL_Delay>
            for(int ad_adc = uint8_ad_adc_number-1; ad_adc >= 0; ad_adc --)
 800c9a2:	3c01      	subs	r4, #1
 800c9a4:	e717      	b.n	800c7d6 <main+0x2ce>
            if(SAI_RxCplt)
 800c9a6:	4b4e      	ldr	r3, [pc, #312]	; (800cae0 <main+0x5d8>)
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d137      	bne.n	800ca1e <main+0x516>
	      if(SAI_RxStart)
 800c9ae:	4b4c      	ldr	r3, [pc, #304]	; (800cae0 <main+0x5d8>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d0f7      	beq.n	800c9a6 <main+0x49e>
	    	 SAI_RxStart = 0;
 800c9b6:	4b4a      	ldr	r3, [pc, #296]	; (800cae0 <main+0x5d8>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	601a      	str	r2, [r3, #0]
	        	 HAL_SAI_Receive_DMA(&hsai_BlockB2, datas[0], SAI_DATASIZE_32);
 800c9bc:	4c46      	ldr	r4, [pc, #280]	; (800cad8 <main+0x5d0>)
 800c9be:	22e0      	movs	r2, #224	; 0xe0
 800c9c0:	f504 7113 	add.w	r1, r4, #588	; 0x24c
 800c9c4:	4847      	ldr	r0, [pc, #284]	; (800cae4 <main+0x5dc>)
 800c9c6:	f7f9 fb9d 	bl	8006104 <HAL_SAI_Receive_DMA>
	        	 HAL_SAI_Receive_DMA(&hsai_BlockA1, datas[1], SAI_DATASIZE_32);
 800c9ca:	22e0      	movs	r2, #224	; 0xe0
 800c9cc:	f504 711b 	add.w	r1, r4, #620	; 0x26c
 800c9d0:	4845      	ldr	r0, [pc, #276]	; (800cae8 <main+0x5e0>)
 800c9d2:	f7f9 fb97 	bl	8006104 <HAL_SAI_Receive_DMA>
	        	 HAL_SAI_Receive_DMA(&hsai_BlockB1, datas[2], SAI_DATASIZE_32);
 800c9d6:	22e0      	movs	r2, #224	; 0xe0
 800c9d8:	f504 7123 	add.w	r1, r4, #652	; 0x28c
 800c9dc:	4843      	ldr	r0, [pc, #268]	; (800caec <main+0x5e4>)
 800c9de:	f7f9 fb91 	bl	8006104 <HAL_SAI_Receive_DMA>
	        	 HAL_SAI_Receive_DMA(&hsai_BlockA2, datas[3], SAI_DATASIZE_32);
 800c9e2:	22e0      	movs	r2, #224	; 0xe0
 800c9e4:	f504 712b 	add.w	r1, r4, #684	; 0x2ac
 800c9e8:	4841      	ldr	r0, [pc, #260]	; (800caf0 <main+0x5e8>)
 800c9ea:	f7f9 fb8b 	bl	8006104 <HAL_SAI_Receive_DMA>
	              while (HAL_SAI_GetState(&hsai_BlockB2) != HAL_SAI_STATE_READY)
 800c9ee:	483d      	ldr	r0, [pc, #244]	; (800cae4 <main+0x5dc>)
 800c9f0:	f7f9 fd7e 	bl	80064f0 <HAL_SAI_GetState>
 800c9f4:	2801      	cmp	r0, #1
 800c9f6:	d1fa      	bne.n	800c9ee <main+0x4e6>
	              while (HAL_SAI_GetState(&hsai_BlockA1) != HAL_SAI_STATE_READY)
 800c9f8:	483b      	ldr	r0, [pc, #236]	; (800cae8 <main+0x5e0>)
 800c9fa:	f7f9 fd79 	bl	80064f0 <HAL_SAI_GetState>
 800c9fe:	2801      	cmp	r0, #1
 800ca00:	d1fa      	bne.n	800c9f8 <main+0x4f0>
	              while (HAL_SAI_GetState(&hsai_BlockB1) != HAL_SAI_STATE_READY)
 800ca02:	483a      	ldr	r0, [pc, #232]	; (800caec <main+0x5e4>)
 800ca04:	f7f9 fd74 	bl	80064f0 <HAL_SAI_GetState>
 800ca08:	2801      	cmp	r0, #1
 800ca0a:	d1fa      	bne.n	800ca02 <main+0x4fa>
	              while (HAL_SAI_GetState(&hsai_BlockA2) != HAL_SAI_STATE_READY)
 800ca0c:	4838      	ldr	r0, [pc, #224]	; (800caf0 <main+0x5e8>)
 800ca0e:	f7f9 fd6f 	bl	80064f0 <HAL_SAI_GetState>
 800ca12:	2801      	cmp	r0, #1
 800ca14:	d1fa      	bne.n	800ca0c <main+0x504>
            	SAI_RxCplt=1;
 800ca16:	4b32      	ldr	r3, [pc, #200]	; (800cae0 <main+0x5d8>)
 800ca18:	2201      	movs	r2, #1
 800ca1a:	605a      	str	r2, [r3, #4]
 800ca1c:	e7c3      	b.n	800c9a6 <main+0x49e>
            	SAI_RxCplt=0;
 800ca1e:	2700      	movs	r7, #0
 800ca20:	4b2f      	ldr	r3, [pc, #188]	; (800cae0 <main+0x5d8>)
 800ca22:	605f      	str	r7, [r3, #4]
            dataBuffer_print[0] = 0xA0;
 800ca24:	4b2c      	ldr	r3, [pc, #176]	; (800cad8 <main+0x5d0>)
 800ca26:	22a0      	movs	r2, #160	; 0xa0
 800ca28:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
            dataBuffer_print[1] = ui8SampleNumber++;
 800ca2c:	4931      	ldr	r1, [pc, #196]	; (800caf4 <main+0x5ec>)
 800ca2e:	7a0a      	ldrb	r2, [r1, #8]
 800ca30:	1c50      	adds	r0, r2, #1
 800ca32:	7208      	strb	r0, [r1, #8]
 800ca34:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
            for(int ad_adc = 0; ad_adc < uint8_ad_adc_number; ad_adc ++)
 800ca38:	e024      	b.n	800ca84 <main+0x57c>
                  dataBuffer_print[2 + uint8_ad_chan_number * 3 * ad_adc + ad_data_channel * 3 + 0] = datas[ad_adc][ad_data_channel * 4 + 2];
 800ca3a:	0084      	lsls	r4, r0, #2
 800ca3c:	1ca5      	adds	r5, r4, #2
 800ca3e:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 800ca42:	00d3      	lsls	r3, r2, #3
 800ca44:	3302      	adds	r3, #2
 800ca46:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800ca4a:	4413      	add	r3, r2
 800ca4c:	4922      	ldr	r1, [pc, #136]	; (800cad8 <main+0x5d0>)
 800ca4e:	eb01 1247 	add.w	r2, r1, r7, lsl #5
 800ca52:	4415      	add	r5, r2
 800ca54:	f895 624c 	ldrb.w	r6, [r5, #588]	; 0x24c
 800ca58:	18cd      	adds	r5, r1, r3
 800ca5a:	f885 6100 	strb.w	r6, [r5, #256]	; 0x100
                  dataBuffer_print[2 + uint8_ad_chan_number * 3 * ad_adc + ad_data_channel * 3 + 1] = datas[ad_adc][ad_data_channel * 4 + 1];
 800ca5e:	1c66      	adds	r6, r4, #1
 800ca60:	1c5d      	adds	r5, r3, #1
 800ca62:	4416      	add	r6, r2
 800ca64:	f896 624c 	ldrb.w	r6, [r6, #588]	; 0x24c
 800ca68:	440d      	add	r5, r1
 800ca6a:	f885 6100 	strb.w	r6, [r5, #256]	; 0x100
                  dataBuffer_print[2 + uint8_ad_chan_number * 3 * ad_adc + ad_data_channel * 3 + 2] = datas[ad_adc][ad_data_channel * 4 + 0];
 800ca6e:	3302      	adds	r3, #2
 800ca70:	4422      	add	r2, r4
 800ca72:	f892 224c 	ldrb.w	r2, [r2, #588]	; 0x24c
 800ca76:	440b      	add	r3, r1
 800ca78:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
              for(int ad_data_channel = 0; ad_data_channel < uint8_ad_chan_number; ad_data_channel ++)
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	2807      	cmp	r0, #7
 800ca80:	dddb      	ble.n	800ca3a <main+0x532>
            for(int ad_adc = 0; ad_adc < uint8_ad_adc_number; ad_adc ++)
 800ca82:	3701      	adds	r7, #1
 800ca84:	2f03      	cmp	r7, #3
 800ca86:	dc01      	bgt.n	800ca8c <main+0x584>
              for(int ad_data_channel = 0; ad_data_channel < uint8_ad_chan_number; ad_data_channel ++)
 800ca88:	2000      	movs	r0, #0
 800ca8a:	e7f8      	b.n	800ca7e <main+0x576>
            for(int accel_data_channel = 0; accel_data_channel < uint8_accel_chan_number; accel_data_channel ++)
 800ca8c:	2100      	movs	r1, #0
 800ca8e:	e00c      	b.n	800caaa <main+0x5a2>
              dataBuffer_print[2 + uint8_ad_chan_number * 3 * uint8_ad_adc_number + accel_data_channel * 2 + 0] = 0;
 800ca90:	f101 0331 	add.w	r3, r1, #49	; 0x31
 800ca94:	005b      	lsls	r3, r3, #1
 800ca96:	4a10      	ldr	r2, [pc, #64]	; (800cad8 <main+0x5d0>)
 800ca98:	18d4      	adds	r4, r2, r3
 800ca9a:	2000      	movs	r0, #0
 800ca9c:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100
              dataBuffer_print[2 + uint8_ad_chan_number * 3 * uint8_ad_adc_number + accel_data_channel * 2 + 1] = 0;
 800caa0:	3301      	adds	r3, #1
 800caa2:	4413      	add	r3, r2
 800caa4:	f883 0100 	strb.w	r0, [r3, #256]	; 0x100
            for(int accel_data_channel = 0; accel_data_channel < uint8_accel_chan_number; accel_data_channel ++)
 800caa8:	3101      	adds	r1, #1
 800caaa:	2902      	cmp	r1, #2
 800caac:	ddf0      	ble.n	800ca90 <main+0x588>
            dataBuffer_print[2 + uint8_ad_chan_number * 3 * uint8_ad_adc_number + uint8_accel_chan_number * 2 + 0] = 0xC0;
 800caae:	4b0a      	ldr	r3, [pc, #40]	; (800cad8 <main+0x5d0>)
 800cab0:	22c0      	movs	r2, #192	; 0xc0
 800cab2:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
              while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY)
 800cab6:	4810      	ldr	r0, [pc, #64]	; (800caf8 <main+0x5f0>)
 800cab8:	f7fc f82a 	bl	8008b10 <HAL_UART_GetState>
 800cabc:	2820      	cmp	r0, #32
 800cabe:	d1fa      	bne.n	800cab6 <main+0x5ae>
              if(HAL_UART_Transmit_DMA(&huart1, (uint8_t*)dataBuffer_print, uint8_data_number) != HAL_OK)
 800cac0:	4c0e      	ldr	r4, [pc, #56]	; (800cafc <main+0x5f4>)
 800cac2:	2269      	movs	r2, #105	; 0x69
 800cac4:	4621      	mov	r1, r4
 800cac6:	480c      	ldr	r0, [pc, #48]	; (800caf8 <main+0x5f0>)
 800cac8:	f7fb fe74 	bl	80087b4 <HAL_UART_Transmit_DMA>
                CDC_Transmit_HS((uint8_t*)dataBuffer_print, uint8_data_number);
 800cacc:	2169      	movs	r1, #105	; 0x69
 800cace:	4620      	mov	r0, r4
 800cad0:	f001 f988 	bl	800dde4 <CDC_Transmit_HS>
 800cad4:	e76b      	b.n	800c9ae <main+0x4a6>
 800cad6:	bf00      	nop
 800cad8:	30000000 	.word	0x30000000
 800cadc:	200038ac 	.word	0x200038ac
 800cae0:	2000028c 	.word	0x2000028c
 800cae4:	20002418 	.word	0x20002418
 800cae8:	200038bc 	.word	0x200038bc
 800caec:	20003004 	.word	0x20003004
 800caf0:	20002c28 	.word	0x20002c28
 800caf4:	20000118 	.word	0x20000118
 800caf8:	200032c4 	.word	0x200032c4
 800cafc:	30000100 	.word	0x30000100

0800cb00 <HAL_GPIO_EXTI_Callback>:
//	    	HAL_SAI_Receive_DMA(&hsai_BlockB1, ovdata.datas[2], SAI_DATASIZE_32);
//	    	HAL_SAI_Receive_DMA(&hsai_BlockA2, ovdata.datas[3], SAI_DATASIZE_32);

	    	if(SAI_DMA_INT_SHIFT)
	    	{
		    	SAI_RxStart=1;
 800cb00:	4b01      	ldr	r3, [pc, #4]	; (800cb08 <HAL_GPIO_EXTI_Callback+0x8>)
 800cb02:	2201      	movs	r2, #1
 800cb04:	601a      	str	r2, [r3, #0]
      //	  }

      		SPI_RxTxCplt=1;
        }

}
 800cb06:	4770      	bx	lr
 800cb08:	2000028c 	.word	0x2000028c

0800cb0c <HAL_SPI_RxCpltCallback>:
//      	  {
//      	    Error_Handler();
//      	  }


}
 800cb0c:	4770      	bx	lr

0800cb0e <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800cb0e:	4770      	bx	lr

0800cb10 <spi_init>:
*/

#endif

	return 0;
}
 800cb10:	2000      	movs	r0, #0
 800cb12:	4770      	bx	lr

0800cb14 <spi_write_and_read>:
    GPIO_TypeDef * chip_select_port,
    uint8_t chip_select_pin,
    uint8_t *txdata,
    uint8_t *rxdata,
						   uint8_t uint8_ts_number)
{
 800cb14:	b510      	push	{r4, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	4604      	mov	r4, r0
 800cb1a:	4619      	mov	r1, r3
        } else {
        	if(SPI_NSS_SOFTWARE)
        	{
                HAL_GPIO_WritePin(chip_select_port, chip_select_pin, GPIO_PIN_RESET);
        	}
            if(HAL_SPI_TransmitReceive(spi_dev, txdata, rxdata, uint8_ts_number, 5000) != HAL_OK)
 800cb1c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800cb20:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb24:	9200      	str	r2, [sp, #0]
 800cb26:	9a04      	ldr	r2, [sp, #16]
 800cb28:	f7fa febe 	bl	80078a8 <HAL_SPI_TransmitReceive>
 800cb2c:	b938      	cbnz	r0, 800cb3e <spi_write_and_read+0x2a>
        	}
        }



        while (HAL_SPI_GetState(spi_dev) != HAL_SPI_STATE_READY)
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f7fb f9f9 	bl	8007f26 <HAL_SPI_GetState>
 800cb34:	2801      	cmp	r0, #1
 800cb36:	d1fa      	bne.n	800cb2e <spi_write_and_read+0x1a>
//	XSpi_Transfer(&spi_instance, send_buffer, data, uint8_ts_number);
//  GPIO_SetBits(GPIOA, GPIO_Pin_4);
#endif

	return 0;
}
 800cb38:	2000      	movs	r0, #0
 800cb3a:	b002      	add	sp, #8
 800cb3c:	bd10      	pop	{r4, pc}
              Error_Handler();
 800cb3e:	f7ff ffe6 	bl	800cb0e <Error_Handler>
 800cb42:	e7f4      	b.n	800cb2e <spi_write_and_read+0x1a>

0800cb44 <gpio_init>:
	base_addr = gpio_config->BaseAddress;
	XGpio_CfgInitialize(&gpio_instance, gpio_config, base_addr);*/
#endif

	return 0;
}
 800cb44:	2000      	movs	r0, #0
 800cb46:	4770      	bx	lr

0800cb48 <gpio_set_value>:
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
//	XGpio_DiscreteWrite(&gpio_instance, channel, config);
#endif

	return 0;
}
 800cb48:	2000      	movs	r0, #0
 800cb4a:	4770      	bx	lr

0800cb4c <mdelay>:

/***************************************************************************//**
* @brief mdelay
*******************************************************************************/
void mdelay(uint32_t msecs)
{
 800cb4c:	b508      	push	{r3, lr}
#ifdef _XPARAMETERS_PS_H_
	usleep(msecs * 1000);
#else
//	MB_Sleep(msecs);
	HAL_Delay(msecs);
 800cb4e:	f7f3 fdfd 	bl	800074c <HAL_Delay>
#endif
}
 800cb52:	bd08      	pop	{r3, pc}

0800cb54 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cb54:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800cb56:	4b07      	ldr	r3, [pc, #28]	; (800cb74 <SD_CheckStatus+0x20>)
 800cb58:	2201      	movs	r2, #1
 800cb5a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cb5c:	f7fe ffec 	bl	800bb38 <BSP_SD_GetCardState>
 800cb60:	b920      	cbnz	r0, 800cb6c <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 800cb62:	4a04      	ldr	r2, [pc, #16]	; (800cb74 <SD_CheckStatus+0x20>)
 800cb64:	7813      	ldrb	r3, [r2, #0]
 800cb66:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cb6a:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 800cb6c:	4b01      	ldr	r3, [pc, #4]	; (800cb74 <SD_CheckStatus+0x20>)
 800cb6e:	7818      	ldrb	r0, [r3, #0]
}
 800cb70:	bd08      	pop	{r3, pc}
 800cb72:	bf00      	nop
 800cb74:	2000018c 	.word	0x2000018c

0800cb78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cb78:	b510      	push	{r4, lr}
 800cb7a:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 800cb7c:	4b07      	ldr	r3, [pc, #28]	; (800cb9c <SD_initialize+0x24>)
 800cb7e:	2201      	movs	r2, #1
 800cb80:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cb82:	f7ff f805 	bl	800bb90 <BSP_SD_Init>
 800cb86:	b110      	cbz	r0, 800cb8e <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cb88:	4b04      	ldr	r3, [pc, #16]	; (800cb9c <SD_initialize+0x24>)
 800cb8a:	7818      	ldrb	r0, [r3, #0]
}
 800cb8c:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 800cb8e:	4620      	mov	r0, r4
 800cb90:	f7ff ffe0 	bl	800cb54 <SD_CheckStatus>
 800cb94:	4b01      	ldr	r3, [pc, #4]	; (800cb9c <SD_initialize+0x24>)
 800cb96:	7018      	strb	r0, [r3, #0]
 800cb98:	e7f6      	b.n	800cb88 <SD_initialize+0x10>
 800cb9a:	bf00      	nop
 800cb9c:	2000018c 	.word	0x2000018c

0800cba0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cba0:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 800cba2:	f7ff ffd7 	bl	800cb54 <SD_CheckStatus>
}
 800cba6:	bd08      	pop	{r3, pc}

0800cba8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cba8:	b508      	push	{r3, lr}
 800cbaa:	4608      	mov	r0, r1
 800cbac:	4611      	mov	r1, r2
 800cbae:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cbb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbb4:	f7fe ffa0 	bl	800baf8 <BSP_SD_ReadBlocks>
 800cbb8:	b920      	cbnz	r0, 800cbc4 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cbba:	f7fe ffbd 	bl	800bb38 <BSP_SD_GetCardState>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	d1fb      	bne.n	800cbba <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800cbc2:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800cbc4:	2001      	movs	r0, #1
 800cbc6:	e7fc      	b.n	800cbc2 <SD_read+0x1a>

0800cbc8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cbc8:	b508      	push	{r3, lr}
 800cbca:	4608      	mov	r0, r1
 800cbcc:	4611      	mov	r1, r2
 800cbce:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800cbd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbd4:	f7fe ffa0 	bl	800bb18 <BSP_SD_WriteBlocks>
 800cbd8:	b920      	cbnz	r0, 800cbe4 <SD_write+0x1c>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cbda:	f7fe ffad 	bl	800bb38 <BSP_SD_GetCardState>
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	d1fb      	bne.n	800cbda <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800cbe2:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800cbe4:	2001      	movs	r0, #1
 800cbe6:	e7fc      	b.n	800cbe2 <SD_write+0x1a>

0800cbe8 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cbe8:	4b15      	ldr	r3, [pc, #84]	; (800cc40 <SD_ioctl+0x58>)
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	f013 0f01 	tst.w	r3, #1
 800cbf0:	d121      	bne.n	800cc36 <SD_ioctl+0x4e>
{
 800cbf2:	b510      	push	{r4, lr}
 800cbf4:	b08a      	sub	sp, #40	; 0x28
 800cbf6:	4614      	mov	r4, r2

  switch (cmd)
 800cbf8:	2903      	cmp	r1, #3
 800cbfa:	d81e      	bhi.n	800cc3a <SD_ioctl+0x52>
 800cbfc:	e8df f001 	tbb	[pc, r1]
 800cc00:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cc04:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 800cc06:	b00a      	add	sp, #40	; 0x28
 800cc08:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800cc0a:	a801      	add	r0, sp, #4
 800cc0c:	f7fe ff9e 	bl	800bb4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cc10:	9b07      	ldr	r3, [sp, #28]
 800cc12:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 800cc14:	2000      	movs	r0, #0
    break;
 800cc16:	e7f6      	b.n	800cc06 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 800cc18:	a801      	add	r0, sp, #4
 800cc1a:	f7fe ff97 	bl	800bb4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cc1e:	9b08      	ldr	r3, [sp, #32]
 800cc20:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800cc22:	2000      	movs	r0, #0
    break;
 800cc24:	e7ef      	b.n	800cc06 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 800cc26:	a801      	add	r0, sp, #4
 800cc28:	f7fe ff90 	bl	800bb4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cc2c:	9b08      	ldr	r3, [sp, #32]
 800cc2e:	0a5b      	lsrs	r3, r3, #9
 800cc30:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 800cc32:	2000      	movs	r0, #0
    break;
 800cc34:	e7e7      	b.n	800cc06 <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cc36:	2003      	movs	r0, #3
}
 800cc38:	4770      	bx	lr
    res = RES_PARERR;
 800cc3a:	2004      	movs	r0, #4
 800cc3c:	e7e3      	b.n	800cc06 <SD_ioctl+0x1e>
 800cc3e:	bf00      	nop
 800cc40:	2000018c 	.word	0x2000018c

0800cc44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cc44:	b500      	push	{lr}
 800cc46:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cc48:	4b1b      	ldr	r3, [pc, #108]	; (800ccb8 <HAL_MspInit+0x74>)
 800cc4a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800cc4e:	f042 0202 	orr.w	r2, r2, #2
 800cc52:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800cc56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cc5a:	f003 0302 	and.w	r3, r3, #2
 800cc5e:	9301      	str	r3, [sp, #4]
 800cc60:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 800cc62:	2200      	movs	r2, #0
 800cc64:	4611      	mov	r1, r2
 800cc66:	2001      	movs	r0, #1
 800cc68:	f7f3 fd9c 	bl	80007a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 800cc6c:	2001      	movs	r0, #1
 800cc6e:	f7f3 fdcb 	bl	8000808 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800cc72:	2200      	movs	r2, #0
 800cc74:	4611      	mov	r1, r2
 800cc76:	2004      	movs	r0, #4
 800cc78:	f7f3 fd94 	bl	80007a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800cc7c:	2004      	movs	r0, #4
 800cc7e:	f7f3 fdc3 	bl	8000808 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800cc82:	2200      	movs	r2, #0
 800cc84:	4611      	mov	r1, r2
 800cc86:	2005      	movs	r0, #5
 800cc88:	f7f3 fd8c 	bl	80007a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800cc8c:	2005      	movs	r0, #5
 800cc8e:	f7f3 fdbb 	bl	8000808 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800cc92:	2200      	movs	r2, #0
 800cc94:	4611      	mov	r1, r2
 800cc96:	2051      	movs	r0, #81	; 0x51
 800cc98:	f7f3 fd84 	bl	80007a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800cc9c:	2051      	movs	r0, #81	; 0x51
 800cc9e:	f7f3 fdb3 	bl	8000808 <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 800cca2:	2200      	movs	r2, #0
 800cca4:	4611      	mov	r1, r2
 800cca6:	207d      	movs	r0, #125	; 0x7d
 800cca8:	f7f3 fd7c 	bl	80007a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800ccac:	207d      	movs	r0, #125	; 0x7d
 800ccae:	f7f3 fdab 	bl	8000808 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ccb2:	b003      	add	sp, #12
 800ccb4:	f85d fb04 	ldr.w	pc, [sp], #4
 800ccb8:	58024400 	.word	0x58024400

0800ccbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ccbc:	b510      	push	{r4, lr}
 800ccbe:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	9305      	str	r3, [sp, #20]
 800ccc4:	9306      	str	r3, [sp, #24]
 800ccc6:	9307      	str	r3, [sp, #28]
 800ccc8:	9308      	str	r3, [sp, #32]
 800ccca:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 800cccc:	6803      	ldr	r3, [r0, #0]
 800ccce:	4a38      	ldr	r2, [pc, #224]	; (800cdb0 <HAL_I2C_MspInit+0xf4>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d004      	beq.n	800ccde <HAL_I2C_MspInit+0x22>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 800ccd4:	4a37      	ldr	r2, [pc, #220]	; (800cdb4 <HAL_I2C_MspInit+0xf8>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d035      	beq.n	800cd46 <HAL_I2C_MspInit+0x8a>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800ccda:	b00a      	add	sp, #40	; 0x28
 800ccdc:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ccde:	4c36      	ldr	r4, [pc, #216]	; (800cdb8 <HAL_I2C_MspInit+0xfc>)
 800cce0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800cce4:	f043 0302 	orr.w	r3, r3, #2
 800cce8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800ccec:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800ccf0:	f003 0302 	and.w	r3, r3, #2
 800ccf4:	9301      	str	r3, [sp, #4]
 800ccf6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ccf8:	23c0      	movs	r3, #192	; 0xc0
 800ccfa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ccfc:	2312      	movs	r3, #18
 800ccfe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800cd00:	2304      	movs	r3, #4
 800cd02:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cd04:	a905      	add	r1, sp, #20
 800cd06:	482d      	ldr	r0, [pc, #180]	; (800cdbc <HAL_I2C_MspInit+0x100>)
 800cd08:	f7f5 fa7e 	bl	8002208 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800cd0c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800cd10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cd14:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800cd18:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800cd1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd20:	9302      	str	r3, [sp, #8]
 800cd22:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800cd24:	2200      	movs	r2, #0
 800cd26:	4611      	mov	r1, r2
 800cd28:	201f      	movs	r0, #31
 800cd2a:	f7f3 fd3b 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800cd2e:	201f      	movs	r0, #31
 800cd30:	f7f3 fd6a 	bl	8000808 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800cd34:	2200      	movs	r2, #0
 800cd36:	4611      	mov	r1, r2
 800cd38:	2020      	movs	r0, #32
 800cd3a:	f7f3 fd33 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800cd3e:	2020      	movs	r0, #32
 800cd40:	f7f3 fd62 	bl	8000808 <HAL_NVIC_EnableIRQ>
 800cd44:	e7c9      	b.n	800ccda <HAL_I2C_MspInit+0x1e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800cd46:	4c1c      	ldr	r4, [pc, #112]	; (800cdb8 <HAL_I2C_MspInit+0xfc>)
 800cd48:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800cd4c:	f043 0320 	orr.w	r3, r3, #32
 800cd50:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800cd54:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800cd58:	f003 0320 	and.w	r3, r3, #32
 800cd5c:	9303      	str	r3, [sp, #12]
 800cd5e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800cd60:	2303      	movs	r3, #3
 800cd62:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cd64:	2312      	movs	r3, #18
 800cd66:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800cd68:	2304      	movs	r3, #4
 800cd6a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800cd6c:	a905      	add	r1, sp, #20
 800cd6e:	4814      	ldr	r0, [pc, #80]	; (800cdc0 <HAL_I2C_MspInit+0x104>)
 800cd70:	f7f5 fa4a 	bl	8002208 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800cd74:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800cd78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cd7c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800cd80:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800cd84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd88:	9304      	str	r3, [sp, #16]
 800cd8a:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	4611      	mov	r1, r2
 800cd90:	2021      	movs	r0, #33	; 0x21
 800cd92:	f7f3 fd07 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800cd96:	2021      	movs	r0, #33	; 0x21
 800cd98:	f7f3 fd36 	bl	8000808 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	4611      	mov	r1, r2
 800cda0:	2022      	movs	r0, #34	; 0x22
 800cda2:	f7f3 fcff 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800cda6:	2022      	movs	r0, #34	; 0x22
 800cda8:	f7f3 fd2e 	bl	8000808 <HAL_NVIC_EnableIRQ>
}
 800cdac:	e795      	b.n	800ccda <HAL_I2C_MspInit+0x1e>
 800cdae:	bf00      	nop
 800cdb0:	40005400 	.word	0x40005400
 800cdb4:	40005800 	.word	0x40005800
 800cdb8:	58024400 	.word	0x58024400
 800cdbc:	58020400 	.word	0x58020400
 800cdc0:	58021400 	.word	0x58021400

0800cdc4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800cdc4:	b570      	push	{r4, r5, r6, lr}
 800cdc6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdc8:	2300      	movs	r3, #0
 800cdca:	9303      	str	r3, [sp, #12]
 800cdcc:	9304      	str	r3, [sp, #16]
 800cdce:	9305      	str	r3, [sp, #20]
 800cdd0:	9306      	str	r3, [sp, #24]
 800cdd2:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDMMC1)
 800cdd4:	6802      	ldr	r2, [r0, #0]
 800cdd6:	4b26      	ldr	r3, [pc, #152]	; (800ce70 <HAL_SD_MspInit+0xac>)
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d001      	beq.n	800cde0 <HAL_SD_MspInit+0x1c>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800cddc:	b008      	add	sp, #32
 800cdde:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800cde0:	4b24      	ldr	r3, [pc, #144]	; (800ce74 <HAL_SD_MspInit+0xb0>)
 800cde2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800cde6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cdea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800cdee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800cdf2:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800cdf6:	9200      	str	r2, [sp, #0]
 800cdf8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cdfa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800cdfe:	f042 0204 	orr.w	r2, r2, #4
 800ce02:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800ce06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ce0a:	f002 0204 	and.w	r2, r2, #4
 800ce0e:	9201      	str	r2, [sp, #4]
 800ce10:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ce12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ce16:	f042 0208 	orr.w	r2, r2, #8
 800ce1a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800ce1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce22:	f003 0308 	and.w	r3, r3, #8
 800ce26:	9302      	str	r3, [sp, #8]
 800ce28:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800ce2a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800ce2e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce30:	2402      	movs	r4, #2
 800ce32:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce34:	2603      	movs	r6, #3
 800ce36:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800ce38:	250c      	movs	r5, #12
 800ce3a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ce3c:	eb0d 0105 	add.w	r1, sp, r5
 800ce40:	480d      	ldr	r0, [pc, #52]	; (800ce78 <HAL_SD_MspInit+0xb4>)
 800ce42:	f7f5 f9e1 	bl	8002208 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ce46:	2304      	movs	r3, #4
 800ce48:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce4a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce4c:	2400      	movs	r4, #0
 800ce4e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce50:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800ce52:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ce54:	eb0d 0105 	add.w	r1, sp, r5
 800ce58:	4808      	ldr	r0, [pc, #32]	; (800ce7c <HAL_SD_MspInit+0xb8>)
 800ce5a:	f7f5 f9d5 	bl	8002208 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 1, 0);
 800ce5e:	4622      	mov	r2, r4
 800ce60:	2101      	movs	r1, #1
 800ce62:	2031      	movs	r0, #49	; 0x31
 800ce64:	f7f3 fc9e 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800ce68:	2031      	movs	r0, #49	; 0x31
 800ce6a:	f7f3 fccd 	bl	8000808 <HAL_NVIC_EnableIRQ>
}
 800ce6e:	e7b5      	b.n	800cddc <HAL_SD_MspInit+0x18>
 800ce70:	52007000 	.word	0x52007000
 800ce74:	58024400 	.word	0x58024400
 800ce78:	58020800 	.word	0x58020800
 800ce7c:	58020c00 	.word	0x58020c00

0800ce80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ce80:	b570      	push	{r4, r5, r6, lr}
 800ce82:	b092      	sub	sp, #72	; 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce84:	2300      	movs	r3, #0
 800ce86:	930d      	str	r3, [sp, #52]	; 0x34
 800ce88:	930e      	str	r3, [sp, #56]	; 0x38
 800ce8a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce8c:	9310      	str	r3, [sp, #64]	; 0x40
 800ce8e:	9311      	str	r3, [sp, #68]	; 0x44
  if(hspi->Instance==SPI1)
 800ce90:	6803      	ldr	r3, [r0, #0]
 800ce92:	4a96      	ldr	r2, [pc, #600]	; (800d0ec <HAL_SPI_MspInit+0x26c>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d00f      	beq.n	800ceb8 <HAL_SPI_MspInit+0x38>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 800ce98:	4a95      	ldr	r2, [pc, #596]	; (800d0f0 <HAL_SPI_MspInit+0x270>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d038      	beq.n	800cf10 <HAL_SPI_MspInit+0x90>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 800ce9e:	4a95      	ldr	r2, [pc, #596]	; (800d0f4 <HAL_SPI_MspInit+0x274>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d079      	beq.n	800cf98 <HAL_SPI_MspInit+0x118>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 800cea4:	4a94      	ldr	r2, [pc, #592]	; (800d0f8 <HAL_SPI_MspInit+0x278>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	f000 80c6 	beq.w	800d038 <HAL_SPI_MspInit+0x1b8>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
  else if(hspi->Instance==SPI6)
 800ceac:	4a93      	ldr	r2, [pc, #588]	; (800d0fc <HAL_SPI_MspInit+0x27c>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	f000 80ef 	beq.w	800d092 <HAL_SPI_MspInit+0x212>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 800ceb4:	b012      	add	sp, #72	; 0x48
 800ceb6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ceb8:	4b91      	ldr	r3, [pc, #580]	; (800d100 <HAL_SPI_MspInit+0x280>)
 800ceba:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800cebe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cec2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800cec6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800ceca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800cece:	9201      	str	r2, [sp, #4]
 800ced0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ced2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ced6:	f042 0201 	orr.w	r2, r2, #1
 800ceda:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800cede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cee2:	f003 0301 	and.w	r3, r3, #1
 800cee6:	9302      	str	r3, [sp, #8]
 800cee8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_NSS_Pin|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800ceea:	23f0      	movs	r3, #240	; 0xf0
 800ceec:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ceee:	2302      	movs	r3, #2
 800cef0:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800cef2:	2305      	movs	r3, #5
 800cef4:	9311      	str	r3, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cef6:	a90d      	add	r1, sp, #52	; 0x34
 800cef8:	4882      	ldr	r0, [pc, #520]	; (800d104 <HAL_SPI_MspInit+0x284>)
 800cefa:	f7f5 f985 	bl	8002208 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800cefe:	2200      	movs	r2, #0
 800cf00:	4611      	mov	r1, r2
 800cf02:	2023      	movs	r0, #35	; 0x23
 800cf04:	f7f3 fc4e 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800cf08:	2023      	movs	r0, #35	; 0x23
 800cf0a:	f7f3 fc7d 	bl	8000808 <HAL_NVIC_EnableIRQ>
 800cf0e:	e7d1      	b.n	800ceb4 <HAL_SPI_MspInit+0x34>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800cf10:	4b7b      	ldr	r3, [pc, #492]	; (800d100 <HAL_SPI_MspInit+0x280>)
 800cf12:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800cf16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cf1a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800cf1e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800cf22:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800cf26:	9203      	str	r2, [sp, #12]
 800cf28:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cf2a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800cf2e:	f042 0204 	orr.w	r2, r2, #4
 800cf32:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800cf36:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800cf3a:	f002 0204 	and.w	r2, r2, #4
 800cf3e:	9204      	str	r2, [sp, #16]
 800cf40:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800cf46:	f042 0202 	orr.w	r2, r2, #2
 800cf4a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800cf4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cf52:	f003 0302 	and.w	r3, r3, #2
 800cf56:	9305      	str	r3, [sp, #20]
 800cf58:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800cf5a:	230c      	movs	r3, #12
 800cf5c:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf5e:	2402      	movs	r4, #2
 800cf60:	940e      	str	r4, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800cf62:	2505      	movs	r5, #5
 800cf64:	9511      	str	r5, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf66:	a90d      	add	r1, sp, #52	; 0x34
 800cf68:	4867      	ldr	r0, [pc, #412]	; (800d108 <HAL_SPI_MspInit+0x288>)
 800cf6a:	f7f5 f94d 	bl	8002208 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_NSS_Pin|GPIO_PIN_13;
 800cf6e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800cf72:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf74:	940e      	str	r4, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf76:	2400      	movs	r4, #0
 800cf78:	940f      	str	r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf7a:	9410      	str	r4, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800cf7c:	9511      	str	r5, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf7e:	a90d      	add	r1, sp, #52	; 0x34
 800cf80:	4862      	ldr	r0, [pc, #392]	; (800d10c <HAL_SPI_MspInit+0x28c>)
 800cf82:	f7f5 f941 	bl	8002208 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800cf86:	4622      	mov	r2, r4
 800cf88:	4621      	mov	r1, r4
 800cf8a:	2024      	movs	r0, #36	; 0x24
 800cf8c:	f7f3 fc0a 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800cf90:	2024      	movs	r0, #36	; 0x24
 800cf92:	f7f3 fc39 	bl	8000808 <HAL_NVIC_EnableIRQ>
 800cf96:	e78d      	b.n	800ceb4 <HAL_SPI_MspInit+0x34>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800cf98:	4b59      	ldr	r3, [pc, #356]	; (800d100 <HAL_SPI_MspInit+0x280>)
 800cf9a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800cf9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cfa2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800cfa6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800cfaa:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800cfae:	9206      	str	r2, [sp, #24]
 800cfb0:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cfb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800cfb6:	f042 0201 	orr.w	r2, r2, #1
 800cfba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800cfbe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800cfc2:	f002 0201 	and.w	r2, r2, #1
 800cfc6:	9207      	str	r2, [sp, #28]
 800cfc8:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cfca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800cfce:	f042 0202 	orr.w	r2, r2, #2
 800cfd2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800cfd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cfda:	f003 0302 	and.w	r3, r3, #2
 800cfde:	9308      	str	r3, [sp, #32]
 800cfe0:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800cfe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfe6:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfe8:	2502      	movs	r5, #2
 800cfea:	950e      	str	r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800cfec:	2606      	movs	r6, #6
 800cfee:	9611      	str	r6, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cff0:	a90d      	add	r1, sp, #52	; 0x34
 800cff2:	4844      	ldr	r0, [pc, #272]	; (800d104 <HAL_SPI_MspInit+0x284>)
 800cff4:	f7f5 f908 	bl	8002208 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800cff8:	2318      	movs	r3, #24
 800cffa:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cffc:	950e      	str	r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cffe:	2400      	movs	r4, #0
 800d000:	940f      	str	r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d002:	9410      	str	r4, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800d004:	9611      	str	r6, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d006:	4e41      	ldr	r6, [pc, #260]	; (800d10c <HAL_SPI_MspInit+0x28c>)
 800d008:	a90d      	add	r1, sp, #52	; 0x34
 800d00a:	4630      	mov	r0, r6
 800d00c:	f7f5 f8fc 	bl	8002208 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800d010:	2320      	movs	r3, #32
 800d012:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d014:	950e      	str	r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d016:	940f      	str	r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d018:	9410      	str	r4, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800d01a:	2307      	movs	r3, #7
 800d01c:	9311      	str	r3, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d01e:	a90d      	add	r1, sp, #52	; 0x34
 800d020:	4630      	mov	r0, r6
 800d022:	f7f5 f8f1 	bl	8002208 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800d026:	4622      	mov	r2, r4
 800d028:	4621      	mov	r1, r4
 800d02a:	2033      	movs	r0, #51	; 0x33
 800d02c:	f7f3 fbba 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800d030:	2033      	movs	r0, #51	; 0x33
 800d032:	f7f3 fbe9 	bl	8000808 <HAL_NVIC_EnableIRQ>
 800d036:	e73d      	b.n	800ceb4 <HAL_SPI_MspInit+0x34>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800d038:	4b31      	ldr	r3, [pc, #196]	; (800d100 <HAL_SPI_MspInit+0x280>)
 800d03a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800d03e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d042:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800d046:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800d04a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800d04e:	9209      	str	r2, [sp, #36]	; 0x24
 800d050:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800d052:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d056:	f042 0210 	orr.w	r2, r2, #16
 800d05a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800d05e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d062:	f003 0310 	and.w	r3, r3, #16
 800d066:	930a      	str	r3, [sp, #40]	; 0x28
 800d068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800d06a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800d06e:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d070:	2302      	movs	r3, #2
 800d072:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800d074:	2305      	movs	r3, #5
 800d076:	9311      	str	r3, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d078:	a90d      	add	r1, sp, #52	; 0x34
 800d07a:	4825      	ldr	r0, [pc, #148]	; (800d110 <HAL_SPI_MspInit+0x290>)
 800d07c:	f7f5 f8c4 	bl	8002208 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800d080:	2200      	movs	r2, #0
 800d082:	4611      	mov	r1, r2
 800d084:	2054      	movs	r0, #84	; 0x54
 800d086:	f7f3 fb8d 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800d08a:	2054      	movs	r0, #84	; 0x54
 800d08c:	f7f3 fbbc 	bl	8000808 <HAL_NVIC_EnableIRQ>
 800d090:	e710      	b.n	800ceb4 <HAL_SPI_MspInit+0x34>
    __HAL_RCC_SPI6_CLK_ENABLE();
 800d092:	4b1b      	ldr	r3, [pc, #108]	; (800d100 <HAL_SPI_MspInit+0x280>)
 800d094:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800d098:	f042 0220 	orr.w	r2, r2, #32
 800d09c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800d0a0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800d0a4:	f002 0220 	and.w	r2, r2, #32
 800d0a8:	920b      	str	r2, [sp, #44]	; 0x2c
 800d0aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800d0ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d0b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800d0b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0c0:	930c      	str	r3, [sp, #48]	; 0x30
 800d0c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800d0c4:	f44f 43e2 	mov.w	r3, #28928	; 0x7100
 800d0c8:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0ca:	2302      	movs	r3, #2
 800d0cc:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800d0ce:	2305      	movs	r3, #5
 800d0d0:	9311      	str	r3, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d0d2:	a90d      	add	r1, sp, #52	; 0x34
 800d0d4:	480f      	ldr	r0, [pc, #60]	; (800d114 <HAL_SPI_MspInit+0x294>)
 800d0d6:	f7f5 f897 	bl	8002208 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 0, 0);
 800d0da:	2200      	movs	r2, #0
 800d0dc:	4611      	mov	r1, r2
 800d0de:	2056      	movs	r0, #86	; 0x56
 800d0e0:	f7f3 fb60 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 800d0e4:	2056      	movs	r0, #86	; 0x56
 800d0e6:	f7f3 fb8f 	bl	8000808 <HAL_NVIC_EnableIRQ>
}
 800d0ea:	e6e3      	b.n	800ceb4 <HAL_SPI_MspInit+0x34>
 800d0ec:	40013000 	.word	0x40013000
 800d0f0:	40003800 	.word	0x40003800
 800d0f4:	40003c00 	.word	0x40003c00
 800d0f8:	40013400 	.word	0x40013400
 800d0fc:	58001400 	.word	0x58001400
 800d100:	58024400 	.word	0x58024400
 800d104:	58020000 	.word	0x58020000
 800d108:	58020800 	.word	0x58020800
 800d10c:	58020400 	.word	0x58020400
 800d110:	58021000 	.word	0x58021000
 800d114:	58021800 	.word	0x58021800

0800d118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d118:	b510      	push	{r4, lr}
 800d11a:	b08a      	sub	sp, #40	; 0x28
 800d11c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d11e:	2300      	movs	r3, #0
 800d120:	9305      	str	r3, [sp, #20]
 800d122:	9306      	str	r3, [sp, #24]
 800d124:	9307      	str	r3, [sp, #28]
 800d126:	9308      	str	r3, [sp, #32]
 800d128:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim_base->Instance==TIM1)
 800d12a:	6803      	ldr	r3, [r0, #0]
 800d12c:	4a90      	ldr	r2, [pc, #576]	; (800d370 <HAL_TIM_Base_MspInit+0x258>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d004      	beq.n	800d13c <HAL_TIM_Base_MspInit+0x24>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 800d132:	4a90      	ldr	r2, [pc, #576]	; (800d374 <HAL_TIM_Base_MspInit+0x25c>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d07f      	beq.n	800d238 <HAL_TIM_Base_MspInit+0x120>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800d138:	b00a      	add	sp, #40	; 0x28
 800d13a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d13c:	4b8e      	ldr	r3, [pc, #568]	; (800d378 <HAL_TIM_Base_MspInit+0x260>)
 800d13e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800d142:	f042 0201 	orr.w	r2, r2, #1
 800d146:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800d14a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800d14e:	f002 0201 	and.w	r2, r2, #1
 800d152:	9201      	str	r2, [sp, #4]
 800d154:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800d156:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d15a:	f042 0210 	orr.w	r2, r2, #16
 800d15e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800d162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d166:	f003 0310 	and.w	r3, r3, #16
 800d16a:	9302      	str	r3, [sp, #8]
 800d16c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800d16e:	f44f 7320 	mov.w	r3, #640	; 0x280
 800d172:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d174:	2302      	movs	r3, #2
 800d176:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800d178:	2301      	movs	r3, #1
 800d17a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d17c:	a905      	add	r1, sp, #20
 800d17e:	487f      	ldr	r0, [pc, #508]	; (800d37c <HAL_TIM_Base_MspInit+0x264>)
 800d180:	f7f5 f842 	bl	8002208 <HAL_GPIO_Init>
    hdma_tim1_trig.Instance = DMA1_Stream7;
 800d184:	487e      	ldr	r0, [pc, #504]	; (800d380 <HAL_TIM_Base_MspInit+0x268>)
 800d186:	4b7f      	ldr	r3, [pc, #508]	; (800d384 <HAL_TIM_Base_MspInit+0x26c>)
 800d188:	6003      	str	r3, [r0, #0]
    hdma_tim1_trig.Init.Request = DMA_REQUEST_TIM1_TRIG;
 800d18a:	2310      	movs	r3, #16
 800d18c:	6043      	str	r3, [r0, #4]
    hdma_tim1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d18e:	2340      	movs	r3, #64	; 0x40
 800d190:	6083      	str	r3, [r0, #8]
    hdma_tim1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800d192:	2300      	movs	r3, #0
 800d194:	60c3      	str	r3, [r0, #12]
    hdma_tim1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800d196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d19a:	6102      	str	r2, [r0, #16]
    hdma_tim1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d19c:	6143      	str	r3, [r0, #20]
    hdma_tim1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d19e:	6183      	str	r3, [r0, #24]
    hdma_tim1_trig.Init.Mode = DMA_CIRCULAR;
 800d1a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1a4:	61c2      	str	r2, [r0, #28]
    hdma_tim1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800d1a6:	6203      	str	r3, [r0, #32]
    hdma_tim1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d1a8:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_trig) != HAL_OK)
 800d1aa:	f7f3 fd65 	bl	8000c78 <HAL_DMA_Init>
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	d13c      	bne.n	800d22c <HAL_TIM_Base_MspInit+0x114>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_trig);
 800d1b2:	4b73      	ldr	r3, [pc, #460]	; (800d380 <HAL_TIM_Base_MspInit+0x268>)
 800d1b4:	63a3      	str	r3, [r4, #56]	; 0x38
 800d1b6:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_tim1_up.Instance = DMA2_Stream1;
 800d1b8:	4873      	ldr	r0, [pc, #460]	; (800d388 <HAL_TIM_Base_MspInit+0x270>)
 800d1ba:	4b74      	ldr	r3, [pc, #464]	; (800d38c <HAL_TIM_Base_MspInit+0x274>)
 800d1bc:	6003      	str	r3, [r0, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 800d1be:	230f      	movs	r3, #15
 800d1c0:	6043      	str	r3, [r0, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d1c2:	2340      	movs	r3, #64	; 0x40
 800d1c4:	6083      	str	r3, [r0, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	60c3      	str	r3, [r0, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 800d1ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d1ce:	6102      	str	r2, [r0, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d1d0:	6143      	str	r3, [r0, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d1d2:	6183      	str	r3, [r0, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 800d1d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1d8:	61c2      	str	r2, [r0, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 800d1da:	6203      	str	r3, [r0, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d1dc:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 800d1de:	f7f3 fd4b 	bl	8000c78 <HAL_DMA_Init>
 800d1e2:	bb30      	cbnz	r0, 800d232 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800d1e4:	4b68      	ldr	r3, [pc, #416]	; (800d388 <HAL_TIM_Base_MspInit+0x270>)
 800d1e6:	6223      	str	r3, [r4, #32]
 800d1e8:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	4611      	mov	r1, r2
 800d1ee:	2018      	movs	r0, #24
 800d1f0:	f7f3 fad8 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800d1f4:	2018      	movs	r0, #24
 800d1f6:	f7f3 fb07 	bl	8000808 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	4611      	mov	r1, r2
 800d1fe:	2019      	movs	r0, #25
 800d200:	f7f3 fad0 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800d204:	2019      	movs	r0, #25
 800d206:	f7f3 faff 	bl	8000808 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800d20a:	2200      	movs	r2, #0
 800d20c:	4611      	mov	r1, r2
 800d20e:	201a      	movs	r0, #26
 800d210:	f7f3 fac8 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800d214:	201a      	movs	r0, #26
 800d216:	f7f3 faf7 	bl	8000808 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800d21a:	2200      	movs	r2, #0
 800d21c:	4611      	mov	r1, r2
 800d21e:	201b      	movs	r0, #27
 800d220:	f7f3 fac0 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800d224:	201b      	movs	r0, #27
 800d226:	f7f3 faef 	bl	8000808 <HAL_NVIC_EnableIRQ>
 800d22a:	e785      	b.n	800d138 <HAL_TIM_Base_MspInit+0x20>
      Error_Handler();
 800d22c:	f7ff fc6f 	bl	800cb0e <Error_Handler>
 800d230:	e7bf      	b.n	800d1b2 <HAL_TIM_Base_MspInit+0x9a>
      Error_Handler();
 800d232:	f7ff fc6c 	bl	800cb0e <Error_Handler>
 800d236:	e7d5      	b.n	800d1e4 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800d238:	4b4f      	ldr	r3, [pc, #316]	; (800d378 <HAL_TIM_Base_MspInit+0x260>)
 800d23a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800d23e:	f042 0202 	orr.w	r2, r2, #2
 800d242:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800d246:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800d24a:	f002 0202 	and.w	r2, r2, #2
 800d24e:	9203      	str	r2, [sp, #12]
 800d250:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d252:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d256:	f042 0204 	orr.w	r2, r2, #4
 800d25a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800d25e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d262:	f003 0304 	and.w	r3, r3, #4
 800d266:	9304      	str	r3, [sp, #16]
 800d268:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d26a:	2340      	movs	r3, #64	; 0x40
 800d26c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d26e:	2302      	movs	r3, #2
 800d270:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800d272:	2303      	movs	r3, #3
 800d274:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d276:	a905      	add	r1, sp, #20
 800d278:	4845      	ldr	r0, [pc, #276]	; (800d390 <HAL_TIM_Base_MspInit+0x278>)
 800d27a:	f7f4 ffc5 	bl	8002208 <HAL_GPIO_Init>
    hdma_tim8_ch2.Instance = DMA2_Stream0;
 800d27e:	4845      	ldr	r0, [pc, #276]	; (800d394 <HAL_TIM_Base_MspInit+0x27c>)
 800d280:	4b45      	ldr	r3, [pc, #276]	; (800d398 <HAL_TIM_Base_MspInit+0x280>)
 800d282:	6003      	str	r3, [r0, #0]
    hdma_tim8_ch2.Init.Request = DMA_REQUEST_TIM8_CH2;
 800d284:	2330      	movs	r3, #48	; 0x30
 800d286:	6043      	str	r3, [r0, #4]
    hdma_tim8_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d288:	2300      	movs	r3, #0
 800d28a:	6083      	str	r3, [r0, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800d28c:	60c3      	str	r3, [r0, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_DISABLE;
 800d28e:	6103      	str	r3, [r0, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d290:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d294:	6142      	str	r2, [r0, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d29a:	6182      	str	r2, [r0, #24]
    hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
 800d29c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d2a0:	61c2      	str	r2, [r0, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800d2a2:	6203      	str	r3, [r0, #32]
    hdma_tim8_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d2a4:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 800d2a6:	f7f3 fce7 	bl	8000c78 <HAL_DMA_Init>
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	d156      	bne.n	800d35c <HAL_TIM_Base_MspInit+0x244>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 800d2ae:	4b39      	ldr	r3, [pc, #228]	; (800d394 <HAL_TIM_Base_MspInit+0x27c>)
 800d2b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d2b2:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_tim8_trig.Instance = DMA1_Stream4;
 800d2b4:	4839      	ldr	r0, [pc, #228]	; (800d39c <HAL_TIM_Base_MspInit+0x284>)
 800d2b6:	4b3a      	ldr	r3, [pc, #232]	; (800d3a0 <HAL_TIM_Base_MspInit+0x288>)
 800d2b8:	6003      	str	r3, [r0, #0]
    hdma_tim8_trig.Init.Request = DMA_REQUEST_TIM8_TRIG;
 800d2ba:	2334      	movs	r3, #52	; 0x34
 800d2bc:	6043      	str	r3, [r0, #4]
    hdma_tim8_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d2be:	2340      	movs	r3, #64	; 0x40
 800d2c0:	6083      	str	r3, [r0, #8]
    hdma_tim8_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	60c3      	str	r3, [r0, #12]
    hdma_tim8_trig.Init.MemInc = DMA_MINC_ENABLE;
 800d2c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d2ca:	6102      	str	r2, [r0, #16]
    hdma_tim8_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d2cc:	6143      	str	r3, [r0, #20]
    hdma_tim8_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d2ce:	6183      	str	r3, [r0, #24]
    hdma_tim8_trig.Init.Mode = DMA_CIRCULAR;
 800d2d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d2d4:	61c2      	str	r2, [r0, #28]
    hdma_tim8_trig.Init.Priority = DMA_PRIORITY_LOW;
 800d2d6:	6203      	str	r3, [r0, #32]
    hdma_tim8_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d2d8:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_trig) != HAL_OK)
 800d2da:	f7f3 fccd 	bl	8000c78 <HAL_DMA_Init>
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	d13f      	bne.n	800d362 <HAL_TIM_Base_MspInit+0x24a>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim8_trig);
 800d2e2:	4b2e      	ldr	r3, [pc, #184]	; (800d39c <HAL_TIM_Base_MspInit+0x284>)
 800d2e4:	63a3      	str	r3, [r4, #56]	; 0x38
 800d2e6:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_tim8_ch1.Instance = DMA1_Stream6;
 800d2e8:	482e      	ldr	r0, [pc, #184]	; (800d3a4 <HAL_TIM_Base_MspInit+0x28c>)
 800d2ea:	4b2f      	ldr	r3, [pc, #188]	; (800d3a8 <HAL_TIM_Base_MspInit+0x290>)
 800d2ec:	6003      	str	r3, [r0, #0]
    hdma_tim8_ch1.Init.Request = DMA_REQUEST_TIM8_CH1;
 800d2ee:	232f      	movs	r3, #47	; 0x2f
 800d2f0:	6043      	str	r3, [r0, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d2f2:	2340      	movs	r3, #64	; 0x40
 800d2f4:	6083      	str	r3, [r0, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	60c3      	str	r3, [r0, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800d2fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d2fe:	6102      	str	r2, [r0, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d300:	6143      	str	r3, [r0, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d302:	6183      	str	r3, [r0, #24]
    hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 800d304:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d308:	61c2      	str	r2, [r0, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800d30a:	6203      	str	r3, [r0, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d30c:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 800d30e:	f7f3 fcb3 	bl	8000c78 <HAL_DMA_Init>
 800d312:	bb48      	cbnz	r0, 800d368 <HAL_TIM_Base_MspInit+0x250>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 800d314:	4b23      	ldr	r3, [pc, #140]	; (800d3a4 <HAL_TIM_Base_MspInit+0x28c>)
 800d316:	6263      	str	r3, [r4, #36]	; 0x24
 800d318:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800d31a:	2200      	movs	r2, #0
 800d31c:	4611      	mov	r1, r2
 800d31e:	202b      	movs	r0, #43	; 0x2b
 800d320:	f7f3 fa40 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800d324:	202b      	movs	r0, #43	; 0x2b
 800d326:	f7f3 fa6f 	bl	8000808 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800d32a:	2200      	movs	r2, #0
 800d32c:	4611      	mov	r1, r2
 800d32e:	202c      	movs	r0, #44	; 0x2c
 800d330:	f7f3 fa38 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800d334:	202c      	movs	r0, #44	; 0x2c
 800d336:	f7f3 fa67 	bl	8000808 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800d33a:	2200      	movs	r2, #0
 800d33c:	4611      	mov	r1, r2
 800d33e:	202d      	movs	r0, #45	; 0x2d
 800d340:	f7f3 fa30 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800d344:	202d      	movs	r0, #45	; 0x2d
 800d346:	f7f3 fa5f 	bl	8000808 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800d34a:	2200      	movs	r2, #0
 800d34c:	4611      	mov	r1, r2
 800d34e:	202e      	movs	r0, #46	; 0x2e
 800d350:	f7f3 fa28 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800d354:	202e      	movs	r0, #46	; 0x2e
 800d356:	f7f3 fa57 	bl	8000808 <HAL_NVIC_EnableIRQ>
}
 800d35a:	e6ed      	b.n	800d138 <HAL_TIM_Base_MspInit+0x20>
      Error_Handler();
 800d35c:	f7ff fbd7 	bl	800cb0e <Error_Handler>
 800d360:	e7a5      	b.n	800d2ae <HAL_TIM_Base_MspInit+0x196>
      Error_Handler();
 800d362:	f7ff fbd4 	bl	800cb0e <Error_Handler>
 800d366:	e7bc      	b.n	800d2e2 <HAL_TIM_Base_MspInit+0x1ca>
      Error_Handler();
 800d368:	f7ff fbd1 	bl	800cb0e <Error_Handler>
 800d36c:	e7d2      	b.n	800d314 <HAL_TIM_Base_MspInit+0x1fc>
 800d36e:	bf00      	nop
 800d370:	40010000 	.word	0x40010000
 800d374:	40010400 	.word	0x40010400
 800d378:	58024400 	.word	0x58024400
 800d37c:	58021000 	.word	0x58021000
 800d380:	200028b0 	.word	0x200028b0
 800d384:	400200b8 	.word	0x400200b8
 800d388:	20003734 	.word	0x20003734
 800d38c:	40020428 	.word	0x40020428
 800d390:	58020800 	.word	0x58020800
 800d394:	20002928 	.word	0x20002928
 800d398:	40020410 	.word	0x40020410
 800d39c:	20005d68 	.word	0x20005d68
 800d3a0:	40020070 	.word	0x40020070
 800d3a4:	20002e74 	.word	0x20002e74
 800d3a8:	400200a0 	.word	0x400200a0

0800d3ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d3ac:	b510      	push	{r4, lr}
 800d3ae:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	9303      	str	r3, [sp, #12]
 800d3b4:	9304      	str	r3, [sp, #16]
 800d3b6:	9305      	str	r3, [sp, #20]
 800d3b8:	9306      	str	r3, [sp, #24]
 800d3ba:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800d3bc:	6802      	ldr	r2, [r0, #0]
 800d3be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d3c2:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d001      	beq.n	800d3ce <HAL_UART_MspInit+0x22>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800d3ca:	b008      	add	sp, #32
 800d3cc:	bd10      	pop	{r4, pc}
 800d3ce:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 800d3d0:	4b34      	ldr	r3, [pc, #208]	; (800d4a4 <HAL_UART_MspInit+0xf8>)
 800d3d2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800d3d6:	f042 0210 	orr.w	r2, r2, #16
 800d3da:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800d3de:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800d3e2:	f002 0210 	and.w	r2, r2, #16
 800d3e6:	9201      	str	r2, [sp, #4]
 800d3e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d3ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d3ee:	f042 0201 	orr.w	r2, r2, #1
 800d3f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800d3f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d3fa:	f003 0301 	and.w	r3, r3, #1
 800d3fe:	9302      	str	r3, [sp, #8]
 800d400:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800d402:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800d406:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d408:	2302      	movs	r3, #2
 800d40a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d40c:	2307      	movs	r3, #7
 800d40e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d410:	a903      	add	r1, sp, #12
 800d412:	4825      	ldr	r0, [pc, #148]	; (800d4a8 <HAL_UART_MspInit+0xfc>)
 800d414:	f7f4 fef8 	bl	8002208 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Stream2;
 800d418:	4824      	ldr	r0, [pc, #144]	; (800d4ac <HAL_UART_MspInit+0x100>)
 800d41a:	4b25      	ldr	r3, [pc, #148]	; (800d4b0 <HAL_UART_MspInit+0x104>)
 800d41c:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800d41e:	232a      	movs	r3, #42	; 0x2a
 800d420:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d422:	2340      	movs	r3, #64	; 0x40
 800d424:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d426:	2300      	movs	r3, #0
 800d428:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d42a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d42e:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d430:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d432:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800d434:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d436:	6203      	str	r3, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800d438:	2204      	movs	r2, #4
 800d43a:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800d43c:	2203      	movs	r2, #3
 800d43e:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800d440:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800d442:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800d444:	f7f3 fc18 	bl	8000c78 <HAL_DMA_Init>
 800d448:	bb30      	cbnz	r0, 800d498 <HAL_UART_MspInit+0xec>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800d44a:	4b18      	ldr	r3, [pc, #96]	; (800d4ac <HAL_UART_MspInit+0x100>)
 800d44c:	6763      	str	r3, [r4, #116]	; 0x74
 800d44e:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart1_rx.Instance = DMA2_Stream4;
 800d450:	4818      	ldr	r0, [pc, #96]	; (800d4b4 <HAL_UART_MspInit+0x108>)
 800d452:	4b19      	ldr	r3, [pc, #100]	; (800d4b8 <HAL_UART_MspInit+0x10c>)
 800d454:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800d456:	2329      	movs	r3, #41	; 0x29
 800d458:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d45a:	2300      	movs	r3, #0
 800d45c:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d45e:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d460:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d464:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d466:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d468:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800d46a:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d46c:	6203      	str	r3, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800d46e:	2204      	movs	r2, #4
 800d470:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800d472:	2203      	movs	r2, #3
 800d474:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800d476:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800d478:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800d47a:	f7f3 fbfd 	bl	8000c78 <HAL_DMA_Init>
 800d47e:	b970      	cbnz	r0, 800d49e <HAL_UART_MspInit+0xf2>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800d480:	4b0c      	ldr	r3, [pc, #48]	; (800d4b4 <HAL_UART_MspInit+0x108>)
 800d482:	67a3      	str	r3, [r4, #120]	; 0x78
 800d484:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800d486:	2200      	movs	r2, #0
 800d488:	4611      	mov	r1, r2
 800d48a:	2025      	movs	r0, #37	; 0x25
 800d48c:	f7f3 f98a 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d490:	2025      	movs	r0, #37	; 0x25
 800d492:	f7f3 f9b9 	bl	8000808 <HAL_NVIC_EnableIRQ>
}
 800d496:	e798      	b.n	800d3ca <HAL_UART_MspInit+0x1e>
      Error_Handler();
 800d498:	f7ff fb39 	bl	800cb0e <Error_Handler>
 800d49c:	e7d5      	b.n	800d44a <HAL_UART_MspInit+0x9e>
      Error_Handler();
 800d49e:	f7ff fb36 	bl	800cb0e <Error_Handler>
 800d4a2:	e7ed      	b.n	800d480 <HAL_UART_MspInit+0xd4>
 800d4a4:	58024400 	.word	0x58024400
 800d4a8:	58020000 	.word	0x58020000
 800d4ac:	20003158 	.word	0x20003158
 800d4b0:	40020040 	.word	0x40020040
 800d4b4:	2000324c 	.word	0x2000324c
 800d4b8:	40020470 	.word	0x40020470

0800d4bc <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;
static uint32_t SAI3_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800d4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4be:	b08f      	sub	sp, #60	; 0x3c
 800d4c0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800d4c2:	6802      	ldr	r2, [r0, #0]
 800d4c4:	4b90      	ldr	r3, [pc, #576]	; (800d708 <HAL_SAI_MspInit+0x24c>)
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d023      	beq.n	800d512 <HAL_SAI_MspInit+0x56>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);

    }
    if(hsai->Instance==SAI1_Block_B)
 800d4ca:	6822      	ldr	r2, [r4, #0]
 800d4cc:	4b8f      	ldr	r3, [pc, #572]	; (800d70c <HAL_SAI_MspInit+0x250>)
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d078      	beq.n	800d5c4 <HAL_SAI_MspInit+0x108>
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800d4d2:	6822      	ldr	r2, [r4, #0]
 800d4d4:	4b8e      	ldr	r3, [pc, #568]	; (800d710 <HAL_SAI_MspInit+0x254>)
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	f000 80c5 	beq.w	800d666 <HAL_SAI_MspInit+0x1aa>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);

    }
    if(hsai->Instance==SAI2_Block_B)
 800d4dc:	6822      	ldr	r2, [r4, #0]
 800d4de:	4b8d      	ldr	r3, [pc, #564]	; (800d714 <HAL_SAI_MspInit+0x258>)
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	f000 8139 	beq.w	800d758 <HAL_SAI_MspInit+0x29c>
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
    }
/* SAI3 */
    if(hsai->Instance==SAI3_Block_A)
 800d4e6:	6822      	ldr	r2, [r4, #0]
 800d4e8:	4b8b      	ldr	r3, [pc, #556]	; (800d718 <HAL_SAI_MspInit+0x25c>)
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	f000 818f 	beq.w	800d80e <HAL_SAI_MspInit+0x352>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    }
    if(hsai->Instance==SAI3_Block_B)
 800d4f0:	6822      	ldr	r2, [r4, #0]
 800d4f2:	4b8a      	ldr	r3, [pc, #552]	; (800d71c <HAL_SAI_MspInit+0x260>)
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	f000 81b4 	beq.w	800d862 <HAL_SAI_MspInit+0x3a6>
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    }
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 800d4fa:	6822      	ldr	r2, [r4, #0]
 800d4fc:	4b88      	ldr	r3, [pc, #544]	; (800d720 <HAL_SAI_MspInit+0x264>)
 800d4fe:	429a      	cmp	r2, r3
 800d500:	f000 81db 	beq.w	800d8ba <HAL_SAI_MspInit+0x3fe>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    }
    if(hsai->Instance==SAI4_Block_B)
 800d504:	6822      	ldr	r2, [r4, #0]
 800d506:	4b87      	ldr	r3, [pc, #540]	; (800d724 <HAL_SAI_MspInit+0x268>)
 800d508:	429a      	cmp	r2, r3
 800d50a:	f000 8201 	beq.w	800d910 <HAL_SAI_MspInit+0x454>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI4;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

    }
}
 800d50e:	b00f      	add	sp, #60	; 0x3c
 800d510:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI1_client == 0)
 800d512:	4b85      	ldr	r3, [pc, #532]	; (800d728 <HAL_SAI_MspInit+0x26c>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d03b      	beq.n	800d592 <HAL_SAI_MspInit+0xd6>
    SAI1_client ++;
 800d51a:	4a83      	ldr	r2, [pc, #524]	; (800d728 <HAL_SAI_MspInit+0x26c>)
 800d51c:	6813      	ldr	r3, [r2, #0]
 800d51e:	3301      	adds	r3, #1
 800d520:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800d522:	2330      	movs	r3, #48	; 0x30
 800d524:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d526:	2602      	movs	r6, #2
 800d528:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d52a:	2500      	movs	r5, #0
 800d52c:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d52e:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800d530:	2706      	movs	r7, #6
 800d532:	970d      	str	r7, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d534:	a909      	add	r1, sp, #36	; 0x24
 800d536:	487d      	ldr	r0, [pc, #500]	; (800d72c <HAL_SAI_MspInit+0x270>)
 800d538:	f7f4 fe66 	bl	8002208 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d53c:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d53e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d540:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d542:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800d544:	970d      	str	r7, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d546:	a909      	add	r1, sp, #36	; 0x24
 800d548:	4879      	ldr	r0, [pc, #484]	; (800d730 <HAL_SAI_MspInit+0x274>)
 800d54a:	f7f4 fe5d 	bl	8002208 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 800d54e:	4879      	ldr	r0, [pc, #484]	; (800d734 <HAL_SAI_MspInit+0x278>)
 800d550:	4b79      	ldr	r3, [pc, #484]	; (800d738 <HAL_SAI_MspInit+0x27c>)
 800d552:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800d554:	2357      	movs	r3, #87	; 0x57
 800d556:	6043      	str	r3, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d558:	6085      	str	r5, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800d55a:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800d55c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d560:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d566:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d568:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d56c:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 800d56e:	61c5      	str	r5, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 800d570:	6205      	str	r5, [r0, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800d572:	2304      	movs	r3, #4
 800d574:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800d576:	2303      	movs	r3, #3
 800d578:	6283      	str	r3, [r0, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800d57a:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800d57c:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800d57e:	f7f3 fb7b 	bl	8000c78 <HAL_DMA_Init>
 800d582:	b9e0      	cbnz	r0, 800d5be <HAL_SAI_MspInit+0x102>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800d584:	4b6b      	ldr	r3, [pc, #428]	; (800d734 <HAL_SAI_MspInit+0x278>)
 800d586:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800d58a:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800d58c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d590:	e79b      	b.n	800d4ca <HAL_SAI_MspInit+0xe>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800d592:	4b6a      	ldr	r3, [pc, #424]	; (800d73c <HAL_SAI_MspInit+0x280>)
 800d594:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800d598:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800d59c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800d5a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d5a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5a8:	9301      	str	r3, [sp, #4]
 800d5aa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	4611      	mov	r1, r2
 800d5b0:	2057      	movs	r0, #87	; 0x57
 800d5b2:	f7f3 f8f7 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 800d5b6:	2057      	movs	r0, #87	; 0x57
 800d5b8:	f7f3 f926 	bl	8000808 <HAL_NVIC_EnableIRQ>
 800d5bc:	e7ad      	b.n	800d51a <HAL_SAI_MspInit+0x5e>
      Error_Handler();
 800d5be:	f7ff faa6 	bl	800cb0e <Error_Handler>
 800d5c2:	e7df      	b.n	800d584 <HAL_SAI_MspInit+0xc8>
      if (SAI1_client == 0)
 800d5c4:	4b58      	ldr	r3, [pc, #352]	; (800d728 <HAL_SAI_MspInit+0x26c>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d033      	beq.n	800d634 <HAL_SAI_MspInit+0x178>
    SAI1_client ++;
 800d5cc:	4a56      	ldr	r2, [pc, #344]	; (800d728 <HAL_SAI_MspInit+0x26c>)
 800d5ce:	6813      	ldr	r3, [r2, #0]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800d5d4:	f44f 7350 	mov.w	r3, #832	; 0x340
 800d5d8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5da:	2302      	movs	r3, #2
 800d5dc:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5de:	2500      	movs	r5, #0
 800d5e0:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5e2:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800d5e4:	2306      	movs	r3, #6
 800d5e6:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d5e8:	a909      	add	r1, sp, #36	; 0x24
 800d5ea:	4855      	ldr	r0, [pc, #340]	; (800d740 <HAL_SAI_MspInit+0x284>)
 800d5ec:	f7f4 fe0c 	bl	8002208 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream5;
 800d5f0:	4854      	ldr	r0, [pc, #336]	; (800d744 <HAL_SAI_MspInit+0x288>)
 800d5f2:	4b55      	ldr	r3, [pc, #340]	; (800d748 <HAL_SAI_MspInit+0x28c>)
 800d5f4:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800d5f6:	2358      	movs	r3, #88	; 0x58
 800d5f8:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d5fa:	6085      	str	r5, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800d5fc:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800d5fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d602:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d608:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d60a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d60e:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_NORMAL;
 800d610:	61c5      	str	r5, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 800d612:	6205      	str	r5, [r0, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800d614:	2304      	movs	r3, #4
 800d616:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800d618:	2303      	movs	r3, #3
 800d61a:	6283      	str	r3, [r0, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800d61c:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800d61e:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800d620:	f7f3 fb2a 	bl	8000c78 <HAL_DMA_Init>
 800d624:	b9e0      	cbnz	r0, 800d660 <HAL_SAI_MspInit+0x1a4>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800d626:	4b47      	ldr	r3, [pc, #284]	; (800d744 <HAL_SAI_MspInit+0x288>)
 800d628:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800d62c:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800d62e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d632:	e74e      	b.n	800d4d2 <HAL_SAI_MspInit+0x16>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800d634:	4b41      	ldr	r3, [pc, #260]	; (800d73c <HAL_SAI_MspInit+0x280>)
 800d636:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800d63a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800d63e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800d642:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d64a:	9302      	str	r3, [sp, #8]
 800d64c:	9b02      	ldr	r3, [sp, #8]
      HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800d64e:	2200      	movs	r2, #0
 800d650:	4611      	mov	r1, r2
 800d652:	2057      	movs	r0, #87	; 0x57
 800d654:	f7f3 f8a6 	bl	80007a4 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 800d658:	2057      	movs	r0, #87	; 0x57
 800d65a:	f7f3 f8d5 	bl	8000808 <HAL_NVIC_EnableIRQ>
 800d65e:	e7b5      	b.n	800d5cc <HAL_SAI_MspInit+0x110>
      Error_Handler();
 800d660:	f7ff fa55 	bl	800cb0e <Error_Handler>
 800d664:	e7df      	b.n	800d626 <HAL_SAI_MspInit+0x16a>
    if (SAI2_client == 0)
 800d666:	4b30      	ldr	r3, [pc, #192]	; (800d728 <HAL_SAI_MspInit+0x26c>)
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d033      	beq.n	800d6d6 <HAL_SAI_MspInit+0x21a>
    SAI2_client ++;
 800d66e:	4a2e      	ldr	r2, [pc, #184]	; (800d728 <HAL_SAI_MspInit+0x26c>)
 800d670:	6853      	ldr	r3, [r2, #4]
 800d672:	3301      	adds	r3, #1
 800d674:	6053      	str	r3, [r2, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800d676:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800d67a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d67c:	2302      	movs	r3, #2
 800d67e:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d680:	2500      	movs	r5, #0
 800d682:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d684:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800d686:	230a      	movs	r3, #10
 800d688:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d68a:	a909      	add	r1, sp, #36	; 0x24
 800d68c:	482f      	ldr	r0, [pc, #188]	; (800d74c <HAL_SAI_MspInit+0x290>)
 800d68e:	f7f4 fdbb 	bl	8002208 <HAL_GPIO_Init>
    hdma_sai2_a.Instance = DMA1_Stream3;
 800d692:	482f      	ldr	r0, [pc, #188]	; (800d750 <HAL_SAI_MspInit+0x294>)
 800d694:	4b2f      	ldr	r3, [pc, #188]	; (800d754 <HAL_SAI_MspInit+0x298>)
 800d696:	6003      	str	r3, [r0, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_SAI2_A;
 800d698:	2359      	movs	r3, #89	; 0x59
 800d69a:	6043      	str	r3, [r0, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d69c:	6085      	str	r5, [r0, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800d69e:	60c5      	str	r5, [r0, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 800d6a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6a4:	6103      	str	r3, [r0, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d6a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6aa:	6143      	str	r3, [r0, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d6ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d6b0:	6183      	str	r3, [r0, #24]
    hdma_sai2_a.Init.Mode = DMA_NORMAL;
 800d6b2:	61c5      	str	r5, [r0, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 800d6b4:	6205      	str	r5, [r0, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800d6b6:	2304      	movs	r3, #4
 800d6b8:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800d6ba:	2303      	movs	r3, #3
 800d6bc:	6283      	str	r3, [r0, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800d6be:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800d6c0:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 800d6c2:	f7f3 fad9 	bl	8000c78 <HAL_DMA_Init>
 800d6c6:	b9e0      	cbnz	r0, 800d702 <HAL_SAI_MspInit+0x246>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 800d6c8:	4b21      	ldr	r3, [pc, #132]	; (800d750 <HAL_SAI_MspInit+0x294>)
 800d6ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800d6ce:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 800d6d0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d6d4:	e702      	b.n	800d4dc <HAL_SAI_MspInit+0x20>
       __HAL_RCC_SAI2_CLK_ENABLE();
 800d6d6:	4b19      	ldr	r3, [pc, #100]	; (800d73c <HAL_SAI_MspInit+0x280>)
 800d6d8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800d6dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d6e0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800d6e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d6e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d6ec:	9303      	str	r3, [sp, #12]
 800d6ee:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	4611      	mov	r1, r2
 800d6f4:	205b      	movs	r0, #91	; 0x5b
 800d6f6:	f7f3 f855 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 800d6fa:	205b      	movs	r0, #91	; 0x5b
 800d6fc:	f7f3 f884 	bl	8000808 <HAL_NVIC_EnableIRQ>
 800d700:	e7b5      	b.n	800d66e <HAL_SAI_MspInit+0x1b2>
      Error_Handler();
 800d702:	f7ff fa04 	bl	800cb0e <Error_Handler>
 800d706:	e7df      	b.n	800d6c8 <HAL_SAI_MspInit+0x20c>
 800d708:	40015804 	.word	0x40015804
 800d70c:	40015824 	.word	0x40015824
 800d710:	40015c04 	.word	0x40015c04
 800d714:	40015c24 	.word	0x40015c24
 800d718:	40016004 	.word	0x40016004
 800d71c:	40016024 	.word	0x40016024
 800d720:	58005404 	.word	0x58005404
 800d724:	58005424 	.word	0x58005424
 800d728:	20000324 	.word	0x20000324
 800d72c:	58021000 	.word	0x58021000
 800d730:	58020800 	.word	0x58020800
 800d734:	200031d0 	.word	0x200031d0
 800d738:	40020028 	.word	0x40020028
 800d73c:	58024400 	.word	0x58024400
 800d740:	58021400 	.word	0x58021400
 800d744:	200036bc 	.word	0x200036bc
 800d748:	40020088 	.word	0x40020088
 800d74c:	58020c00 	.word	0x58020c00
 800d750:	200037ac 	.word	0x200037ac
 800d754:	40020058 	.word	0x40020058
      if (SAI2_client == 0)
 800d758:	4b82      	ldr	r3, [pc, #520]	; (800d964 <HAL_SAI_MspInit+0x4a8>)
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d03d      	beq.n	800d7dc <HAL_SAI_MspInit+0x320>
    SAI2_client ++;
 800d760:	4a80      	ldr	r2, [pc, #512]	; (800d964 <HAL_SAI_MspInit+0x4a8>)
 800d762:	6853      	ldr	r3, [r2, #4]
 800d764:	3301      	adds	r3, #1
 800d766:	6053      	str	r3, [r2, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d768:	2604      	movs	r6, #4
 800d76a:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d76c:	2702      	movs	r7, #2
 800d76e:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d770:	2500      	movs	r5, #0
 800d772:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d774:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 800d776:	2308      	movs	r3, #8
 800d778:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d77a:	a909      	add	r1, sp, #36	; 0x24
 800d77c:	487a      	ldr	r0, [pc, #488]	; (800d968 <HAL_SAI_MspInit+0x4ac>)
 800d77e:	f7f4 fd43 	bl	8002208 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d782:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800d786:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d788:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d78a:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d78c:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800d78e:	230a      	movs	r3, #10
 800d790:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d792:	a909      	add	r1, sp, #36	; 0x24
 800d794:	4875      	ldr	r0, [pc, #468]	; (800d96c <HAL_SAI_MspInit+0x4b0>)
 800d796:	f7f4 fd37 	bl	8002208 <HAL_GPIO_Init>
    hdma_sai2_b.Instance = DMA1_Stream0;
 800d79a:	4875      	ldr	r0, [pc, #468]	; (800d970 <HAL_SAI_MspInit+0x4b4>)
 800d79c:	4b75      	ldr	r3, [pc, #468]	; (800d974 <HAL_SAI_MspInit+0x4b8>)
 800d79e:	6003      	str	r3, [r0, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_SAI2_B;
 800d7a0:	235a      	movs	r3, #90	; 0x5a
 800d7a2:	6043      	str	r3, [r0, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d7a4:	6085      	str	r5, [r0, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800d7a6:	60c5      	str	r5, [r0, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 800d7a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7ac:	6103      	str	r3, [r0, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d7ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d7b2:	6143      	str	r3, [r0, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d7b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d7b8:	6183      	str	r3, [r0, #24]
    hdma_sai2_b.Init.Mode = DMA_NORMAL;
 800d7ba:	61c5      	str	r5, [r0, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 800d7bc:	6205      	str	r5, [r0, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800d7be:	6246      	str	r6, [r0, #36]	; 0x24
    hdma_sai2_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800d7c0:	2303      	movs	r3, #3
 800d7c2:	6283      	str	r3, [r0, #40]	; 0x28
    hdma_sai2_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800d7c4:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai2_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800d7c6:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 800d7c8:	f7f3 fa56 	bl	8000c78 <HAL_DMA_Init>
 800d7cc:	b9e0      	cbnz	r0, 800d808 <HAL_SAI_MspInit+0x34c>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 800d7ce:	4b68      	ldr	r3, [pc, #416]	; (800d970 <HAL_SAI_MspInit+0x4b4>)
 800d7d0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800d7d4:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 800d7d6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800d7da:	e684      	b.n	800d4e6 <HAL_SAI_MspInit+0x2a>
       __HAL_RCC_SAI2_CLK_ENABLE();
 800d7dc:	4b66      	ldr	r3, [pc, #408]	; (800d978 <HAL_SAI_MspInit+0x4bc>)
 800d7de:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800d7e2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d7e6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800d7ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d7ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7f2:	9304      	str	r3, [sp, #16]
 800d7f4:	9b04      	ldr	r3, [sp, #16]
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	4611      	mov	r1, r2
 800d7fa:	205b      	movs	r0, #91	; 0x5b
 800d7fc:	f7f2 ffd2 	bl	80007a4 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 800d800:	205b      	movs	r0, #91	; 0x5b
 800d802:	f7f3 f801 	bl	8000808 <HAL_NVIC_EnableIRQ>
 800d806:	e7ab      	b.n	800d760 <HAL_SAI_MspInit+0x2a4>
      Error_Handler();
 800d808:	f7ff f981 	bl	800cb0e <Error_Handler>
 800d80c:	e7df      	b.n	800d7ce <HAL_SAI_MspInit+0x312>
    if (SAI3_client == 0)
 800d80e:	4b55      	ldr	r3, [pc, #340]	; (800d964 <HAL_SAI_MspInit+0x4a8>)
 800d810:	689b      	ldr	r3, [r3, #8]
 800d812:	b183      	cbz	r3, 800d836 <HAL_SAI_MspInit+0x37a>
    SAI3_client ++;
 800d814:	4a53      	ldr	r2, [pc, #332]	; (800d964 <HAL_SAI_MspInit+0x4a8>)
 800d816:	6893      	ldr	r3, [r2, #8]
 800d818:	3301      	adds	r3, #1
 800d81a:	6093      	str	r3, [r2, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d81c:	2302      	movs	r3, #2
 800d81e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d820:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d822:	2300      	movs	r3, #0
 800d824:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d826:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI3;
 800d828:	2306      	movs	r3, #6
 800d82a:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d82c:	a909      	add	r1, sp, #36	; 0x24
 800d82e:	4853      	ldr	r0, [pc, #332]	; (800d97c <HAL_SAI_MspInit+0x4c0>)
 800d830:	f7f4 fcea 	bl	8002208 <HAL_GPIO_Init>
 800d834:	e65c      	b.n	800d4f0 <HAL_SAI_MspInit+0x34>
       __HAL_RCC_SAI3_CLK_ENABLE();
 800d836:	4b50      	ldr	r3, [pc, #320]	; (800d978 <HAL_SAI_MspInit+0x4bc>)
 800d838:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800d83c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800d840:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800d844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d84c:	9305      	str	r3, [sp, #20]
 800d84e:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(SAI3_IRQn, 0, 0);
 800d850:	2200      	movs	r2, #0
 800d852:	4611      	mov	r1, r2
 800d854:	2072      	movs	r0, #114	; 0x72
 800d856:	f7f2 ffa5 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI3_IRQn);
 800d85a:	2072      	movs	r0, #114	; 0x72
 800d85c:	f7f2 ffd4 	bl	8000808 <HAL_NVIC_EnableIRQ>
 800d860:	e7d8      	b.n	800d814 <HAL_SAI_MspInit+0x358>
      if (SAI3_client == 0)
 800d862:	4b40      	ldr	r3, [pc, #256]	; (800d964 <HAL_SAI_MspInit+0x4a8>)
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	b193      	cbz	r3, 800d88e <HAL_SAI_MspInit+0x3d2>
    SAI3_client ++;
 800d868:	4a3e      	ldr	r2, [pc, #248]	; (800d964 <HAL_SAI_MspInit+0x4a8>)
 800d86a:	6893      	ldr	r3, [r2, #8]
 800d86c:	3301      	adds	r3, #1
 800d86e:	6093      	str	r3, [r2, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d870:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d874:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d876:	2302      	movs	r3, #2
 800d878:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d87a:	2300      	movs	r3, #0
 800d87c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d87e:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI3;
 800d880:	2306      	movs	r3, #6
 800d882:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d884:	a909      	add	r1, sp, #36	; 0x24
 800d886:	483d      	ldr	r0, [pc, #244]	; (800d97c <HAL_SAI_MspInit+0x4c0>)
 800d888:	f7f4 fcbe 	bl	8002208 <HAL_GPIO_Init>
 800d88c:	e635      	b.n	800d4fa <HAL_SAI_MspInit+0x3e>
       __HAL_RCC_SAI3_CLK_ENABLE();
 800d88e:	4b3a      	ldr	r3, [pc, #232]	; (800d978 <HAL_SAI_MspInit+0x4bc>)
 800d890:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800d894:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800d898:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800d89c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d8a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d8a4:	9306      	str	r3, [sp, #24]
 800d8a6:	9b06      	ldr	r3, [sp, #24]
      HAL_NVIC_SetPriority(SAI3_IRQn, 0, 0);
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	4611      	mov	r1, r2
 800d8ac:	2072      	movs	r0, #114	; 0x72
 800d8ae:	f7f2 ff79 	bl	80007a4 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI3_IRQn);
 800d8b2:	2072      	movs	r0, #114	; 0x72
 800d8b4:	f7f2 ffa8 	bl	8000808 <HAL_NVIC_EnableIRQ>
 800d8b8:	e7d6      	b.n	800d868 <HAL_SAI_MspInit+0x3ac>
    if (SAI4_client == 0)
 800d8ba:	4b2a      	ldr	r3, [pc, #168]	; (800d964 <HAL_SAI_MspInit+0x4a8>)
 800d8bc:	68db      	ldr	r3, [r3, #12]
 800d8be:	b18b      	cbz	r3, 800d8e4 <HAL_SAI_MspInit+0x428>
    SAI4_client ++;
 800d8c0:	4a28      	ldr	r2, [pc, #160]	; (800d964 <HAL_SAI_MspInit+0x4a8>)
 800d8c2:	68d3      	ldr	r3, [r2, #12]
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	60d3      	str	r3, [r2, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d8c8:	2340      	movs	r3, #64	; 0x40
 800d8ca:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8cc:	2302      	movs	r3, #2
 800d8ce:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d8d4:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI4;
 800d8d6:	2308      	movs	r3, #8
 800d8d8:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d8da:	a909      	add	r1, sp, #36	; 0x24
 800d8dc:	4827      	ldr	r0, [pc, #156]	; (800d97c <HAL_SAI_MspInit+0x4c0>)
 800d8de:	f7f4 fc93 	bl	8002208 <HAL_GPIO_Init>
 800d8e2:	e60f      	b.n	800d504 <HAL_SAI_MspInit+0x48>
       __HAL_RCC_SAI4_CLK_ENABLE();
 800d8e4:	4b24      	ldr	r3, [pc, #144]	; (800d978 <HAL_SAI_MspInit+0x4bc>)
 800d8e6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800d8ea:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800d8ee:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800d8f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d8f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d8fa:	9307      	str	r3, [sp, #28]
 800d8fc:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(SAI4_IRQn, 0, 0);
 800d8fe:	2200      	movs	r2, #0
 800d900:	4611      	mov	r1, r2
 800d902:	2092      	movs	r0, #146	; 0x92
 800d904:	f7f2 ff4e 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI4_IRQn);
 800d908:	2092      	movs	r0, #146	; 0x92
 800d90a:	f7f2 ff7d 	bl	8000808 <HAL_NVIC_EnableIRQ>
 800d90e:	e7d7      	b.n	800d8c0 <HAL_SAI_MspInit+0x404>
      if (SAI4_client == 0)
 800d910:	4b14      	ldr	r3, [pc, #80]	; (800d964 <HAL_SAI_MspInit+0x4a8>)
 800d912:	68db      	ldr	r3, [r3, #12]
 800d914:	b183      	cbz	r3, 800d938 <HAL_SAI_MspInit+0x47c>
    SAI4_client ++;
 800d916:	4a13      	ldr	r2, [pc, #76]	; (800d964 <HAL_SAI_MspInit+0x4a8>)
 800d918:	68d3      	ldr	r3, [r2, #12]
 800d91a:	3301      	adds	r3, #1
 800d91c:	60d3      	str	r3, [r2, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800d91e:	2308      	movs	r3, #8
 800d920:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d922:	2202      	movs	r2, #2
 800d924:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d926:	2200      	movs	r2, #0
 800d928:	920b      	str	r2, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d92a:	920c      	str	r2, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI4;
 800d92c:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d92e:	a909      	add	r1, sp, #36	; 0x24
 800d930:	4813      	ldr	r0, [pc, #76]	; (800d980 <HAL_SAI_MspInit+0x4c4>)
 800d932:	f7f4 fc69 	bl	8002208 <HAL_GPIO_Init>
}
 800d936:	e5ea      	b.n	800d50e <HAL_SAI_MspInit+0x52>
       __HAL_RCC_SAI4_CLK_ENABLE();
 800d938:	4b0f      	ldr	r3, [pc, #60]	; (800d978 <HAL_SAI_MspInit+0x4bc>)
 800d93a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800d93e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800d942:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800d946:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d94a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d94e:	9308      	str	r3, [sp, #32]
 800d950:	9b08      	ldr	r3, [sp, #32]
      HAL_NVIC_SetPriority(SAI4_IRQn, 0, 0);
 800d952:	2200      	movs	r2, #0
 800d954:	4611      	mov	r1, r2
 800d956:	2092      	movs	r0, #146	; 0x92
 800d958:	f7f2 ff24 	bl	80007a4 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI4_IRQn);
 800d95c:	2092      	movs	r0, #146	; 0x92
 800d95e:	f7f2 ff53 	bl	8000808 <HAL_NVIC_EnableIRQ>
 800d962:	e7d8      	b.n	800d916 <HAL_SAI_MspInit+0x45a>
 800d964:	20000324 	.word	0x20000324
 800d968:	58020000 	.word	0x58020000
 800d96c:	58021800 	.word	0x58021800
 800d970:	20002b10 	.word	0x20002b10
 800d974:	40020010 	.word	0x40020010
 800d978:	58024400 	.word	0x58024400
 800d97c:	58020c00 	.word	0x58020c00
 800d980:	58021000 	.word	0x58021000

0800d984 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800d984:	4770      	bx	lr

0800d986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d986:	e7fe      	b.n	800d986 <HardFault_Handler>

0800d988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d988:	e7fe      	b.n	800d988 <MemManage_Handler>

0800d98a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d98a:	e7fe      	b.n	800d98a <BusFault_Handler>

0800d98c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d98c:	e7fe      	b.n	800d98c <UsageFault_Handler>

0800d98e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d98e:	4770      	bx	lr

0800d990 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d990:	4770      	bx	lr

0800d992 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d992:	4770      	bx	lr

0800d994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d994:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d996:	f7f2 fec7 	bl	8000728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d99a:	bd08      	pop	{r3, pc}

0800d99c <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 800d99c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 800d99e:	f7f6 f805 	bl	80039ac <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 800d9a2:	bd08      	pop	{r3, pc}

0800d9a4 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800d9a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800d9a6:	f7f4 fb0b 	bl	8001fc0 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800d9aa:	bd08      	pop	{r3, pc}

0800d9ac <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800d9ac:	4770      	bx	lr

0800d9ae <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800d9ae:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800d9b0:	2001      	movs	r0, #1
 800d9b2:	f7f4 fd26 	bl	8002402 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800d9b6:	bd08      	pop	{r3, pc}

0800d9b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800d9b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800d9ba:	4802      	ldr	r0, [pc, #8]	; (800d9c4 <DMA1_Stream0_IRQHandler+0xc>)
 800d9bc:	f7f3 ff5c 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800d9c0:	bd08      	pop	{r3, pc}
 800d9c2:	bf00      	nop
 800d9c4:	20002b10 	.word	0x20002b10

0800d9c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800d9c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800d9ca:	4802      	ldr	r0, [pc, #8]	; (800d9d4 <DMA1_Stream1_IRQHandler+0xc>)
 800d9cc:	f7f3 ff54 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800d9d0:	bd08      	pop	{r3, pc}
 800d9d2:	bf00      	nop
 800d9d4:	200031d0 	.word	0x200031d0

0800d9d8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800d9d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800d9da:	4802      	ldr	r0, [pc, #8]	; (800d9e4 <DMA1_Stream2_IRQHandler+0xc>)
 800d9dc:	f7f3 ff4c 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800d9e0:	bd08      	pop	{r3, pc}
 800d9e2:	bf00      	nop
 800d9e4:	20003158 	.word	0x20003158

0800d9e8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800d9e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 800d9ea:	4802      	ldr	r0, [pc, #8]	; (800d9f4 <DMA1_Stream3_IRQHandler+0xc>)
 800d9ec:	f7f3 ff44 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800d9f0:	bd08      	pop	{r3, pc}
 800d9f2:	bf00      	nop
 800d9f4:	200037ac 	.word	0x200037ac

0800d9f8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800d9f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_trig);
 800d9fa:	4802      	ldr	r0, [pc, #8]	; (800da04 <DMA1_Stream4_IRQHandler+0xc>)
 800d9fc:	f7f3 ff3c 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800da00:	bd08      	pop	{r3, pc}
 800da02:	bf00      	nop
 800da04:	20005d68 	.word	0x20005d68

0800da08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800da08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800da0a:	4802      	ldr	r0, [pc, #8]	; (800da14 <DMA1_Stream5_IRQHandler+0xc>)
 800da0c:	f7f3 ff34 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800da10:	bd08      	pop	{r3, pc}
 800da12:	bf00      	nop
 800da14:	200036bc 	.word	0x200036bc

0800da18 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800da18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 800da1a:	4802      	ldr	r0, [pc, #8]	; (800da24 <DMA1_Stream6_IRQHandler+0xc>)
 800da1c:	f7f3 ff2c 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800da20:	bd08      	pop	{r3, pc}
 800da22:	bf00      	nop
 800da24:	20002e74 	.word	0x20002e74

0800da28 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800da28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800da2a:	4802      	ldr	r0, [pc, #8]	; (800da34 <TIM1_BRK_IRQHandler+0xc>)
 800da2c:	f7fa fb02 	bl	8008034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800da30:	bd08      	pop	{r3, pc}
 800da32:	bf00      	nop
 800da34:	20003650 	.word	0x20003650

0800da38 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800da38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800da3a:	4802      	ldr	r0, [pc, #8]	; (800da44 <TIM1_UP_IRQHandler+0xc>)
 800da3c:	f7fa fafa 	bl	8008034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800da40:	bd08      	pop	{r3, pc}
 800da42:	bf00      	nop
 800da44:	20003650 	.word	0x20003650

0800da48 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800da48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800da4a:	4802      	ldr	r0, [pc, #8]	; (800da54 <TIM1_TRG_COM_IRQHandler+0xc>)
 800da4c:	f7fa faf2 	bl	8008034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800da50:	bd08      	pop	{r3, pc}
 800da52:	bf00      	nop
 800da54:	20003650 	.word	0x20003650

0800da58 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800da58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800da5a:	4802      	ldr	r0, [pc, #8]	; (800da64 <TIM1_CC_IRQHandler+0xc>)
 800da5c:	f7fa faea 	bl	8008034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800da60:	bd08      	pop	{r3, pc}
 800da62:	bf00      	nop
 800da64:	20003650 	.word	0x20003650

0800da68 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800da68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800da6a:	4802      	ldr	r0, [pc, #8]	; (800da74 <I2C1_EV_IRQHandler+0xc>)
 800da6c:	f7f4 fdae 	bl	80025cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800da70:	bd08      	pop	{r3, pc}
 800da72:	bf00      	nop
 800da74:	20002cc0 	.word	0x20002cc0

0800da78 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800da78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800da7a:	4802      	ldr	r0, [pc, #8]	; (800da84 <I2C1_ER_IRQHandler+0xc>)
 800da7c:	f7f5 f8e2 	bl	8002c44 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800da80:	bd08      	pop	{r3, pc}
 800da82:	bf00      	nop
 800da84:	20002cc0 	.word	0x20002cc0

0800da88 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800da88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800da8a:	4802      	ldr	r0, [pc, #8]	; (800da94 <I2C2_EV_IRQHandler+0xc>)
 800da8c:	f7f4 fd9e 	bl	80025cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800da90:	bd08      	pop	{r3, pc}
 800da92:	bf00      	nop
 800da94:	20002d0c 	.word	0x20002d0c

0800da98 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800da98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800da9a:	4802      	ldr	r0, [pc, #8]	; (800daa4 <I2C2_ER_IRQHandler+0xc>)
 800da9c:	f7f5 f8d2 	bl	8002c44 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800daa0:	bd08      	pop	{r3, pc}
 800daa2:	bf00      	nop
 800daa4:	20002d0c 	.word	0x20002d0c

0800daa8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800daa8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800daaa:	4802      	ldr	r0, [pc, #8]	; (800dab4 <SPI1_IRQHandler+0xc>)
 800daac:	f7fa f904 	bl	8007cb8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800dab0:	bd08      	pop	{r3, pc}
 800dab2:	bf00      	nop
 800dab4:	20003824 	.word	0x20003824

0800dab8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800dab8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800daba:	4802      	ldr	r0, [pc, #8]	; (800dac4 <SPI2_IRQHandler+0xc>)
 800dabc:	f7fa f8fc 	bl	8007cb8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800dac0:	bd08      	pop	{r3, pc}
 800dac2:	bf00      	nop
 800dac4:	20002a3c 	.word	0x20002a3c

0800dac8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800dac8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800daca:	4802      	ldr	r0, [pc, #8]	; (800dad4 <USART1_IRQHandler+0xc>)
 800dacc:	f7fa ff24 	bl	8008918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800dad0:	bd08      	pop	{r3, pc}
 800dad2:	bf00      	nop
 800dad4:	200032c4 	.word	0x200032c4

0800dad8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800dad8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800dada:	4802      	ldr	r0, [pc, #8]	; (800dae4 <TIM8_BRK_TIM12_IRQHandler+0xc>)
 800dadc:	f7fa faaa 	bl	8008034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800dae0:	bd08      	pop	{r3, pc}
 800dae2:	bf00      	nop
 800dae4:	20002ac4 	.word	0x20002ac4

0800dae8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800dae8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800daea:	4802      	ldr	r0, [pc, #8]	; (800daf4 <TIM8_UP_TIM13_IRQHandler+0xc>)
 800daec:	f7fa faa2 	bl	8008034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800daf0:	bd08      	pop	{r3, pc}
 800daf2:	bf00      	nop
 800daf4:	20002ac4 	.word	0x20002ac4

0800daf8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800daf8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800dafa:	4802      	ldr	r0, [pc, #8]	; (800db04 <TIM8_TRG_COM_TIM14_IRQHandler+0xc>)
 800dafc:	f7fa fa9a 	bl	8008034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800db00:	bd08      	pop	{r3, pc}
 800db02:	bf00      	nop
 800db04:	20002ac4 	.word	0x20002ac4

0800db08 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800db08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800db0a:	4802      	ldr	r0, [pc, #8]	; (800db14 <TIM8_CC_IRQHandler+0xc>)
 800db0c:	f7fa fa92 	bl	8008034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800db10:	bd08      	pop	{r3, pc}
 800db12:	bf00      	nop
 800db14:	20002ac4 	.word	0x20002ac4

0800db18 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800db18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_trig);
 800db1a:	4802      	ldr	r0, [pc, #8]	; (800db24 <DMA1_Stream7_IRQHandler+0xc>)
 800db1c:	f7f3 feac 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800db20:	bd08      	pop	{r3, pc}
 800db22:	bf00      	nop
 800db24:	200028b0 	.word	0x200028b0

0800db28 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800db28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800db2a:	4802      	ldr	r0, [pc, #8]	; (800db34 <SDMMC1_IRQHandler+0xc>)
 800db2c:	f7f9 fc6c 	bl	8007408 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800db30:	bd08      	pop	{r3, pc}
 800db32:	bf00      	nop
 800db34:	20002df4 	.word	0x20002df4

0800db38 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800db38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800db3a:	4802      	ldr	r0, [pc, #8]	; (800db44 <SPI3_IRQHandler+0xc>)
 800db3c:	f7fa f8bc 	bl	8007cb8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800db40:	bd08      	pop	{r3, pc}
 800db42:	bf00      	nop
 800db44:	20002f7c 	.word	0x20002f7c

0800db48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800db48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 800db4a:	4802      	ldr	r0, [pc, #8]	; (800db54 <DMA2_Stream0_IRQHandler+0xc>)
 800db4c:	f7f3 fe94 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800db50:	bd08      	pop	{r3, pc}
 800db52:	bf00      	nop
 800db54:	20002928 	.word	0x20002928

0800db58 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800db58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 800db5a:	4802      	ldr	r0, [pc, #8]	; (800db64 <DMA2_Stream1_IRQHandler+0xc>)
 800db5c:	f7f3 fe8c 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800db60:	bd08      	pop	{r3, pc}
 800db62:	bf00      	nop
 800db64:	20003734 	.word	0x20003734

0800db68 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800db68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800db6a:	4802      	ldr	r0, [pc, #8]	; (800db74 <DMA2_Stream4_IRQHandler+0xc>)
 800db6c:	f7f3 fe84 	bl	8001878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800db70:	bd08      	pop	{r3, pc}
 800db72:	bf00      	nop
 800db74:	2000324c 	.word	0x2000324c

0800db78 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 800db78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800db7a:	4802      	ldr	r0, [pc, #8]	; (800db84 <OTG_HS_EP1_OUT_IRQHandler+0xc>)
 800db7c:	f7f5 faca 	bl	8003114 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 800db80:	bd08      	pop	{r3, pc}
 800db82:	bf00      	nop
 800db84:	200070b0 	.word	0x200070b0

0800db88 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 800db88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800db8a:	4802      	ldr	r0, [pc, #8]	; (800db94 <OTG_HS_EP1_IN_IRQHandler+0xc>)
 800db8c:	f7f5 fac2 	bl	8003114 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 800db90:	bd08      	pop	{r3, pc}
 800db92:	bf00      	nop
 800db94:	200070b0 	.word	0x200070b0

0800db98 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800db98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800db9a:	4802      	ldr	r0, [pc, #8]	; (800dba4 <OTG_HS_IRQHandler+0xc>)
 800db9c:	f7f5 faba 	bl	8003114 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800dba0:	bd08      	pop	{r3, pc}
 800dba2:	bf00      	nop
 800dba4:	200070b0 	.word	0x200070b0

0800dba8 <FPU_IRQHandler>:

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800dba8:	4770      	bx	lr
	...

0800dbac <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800dbac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800dbae:	4802      	ldr	r0, [pc, #8]	; (800dbb8 <SPI4_IRQHandler+0xc>)
 800dbb0:	f7fa f882 	bl	8007cb8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800dbb4:	bd08      	pop	{r3, pc}
 800dbb6:	bf00      	nop
 800dbb8:	20003360 	.word	0x20003360

0800dbbc <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 800dbbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 800dbbe:	4802      	ldr	r0, [pc, #8]	; (800dbc8 <SPI6_IRQHandler+0xc>)
 800dbc0:	f7fa f87a 	bl	8007cb8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 800dbc4:	bd08      	pop	{r3, pc}
 800dbc6:	bf00      	nop
 800dbc8:	20002eec 	.word	0x20002eec

0800dbcc <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 800dbcc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 800dbce:	4803      	ldr	r0, [pc, #12]	; (800dbdc <SAI1_IRQHandler+0x10>)
 800dbd0:	f7f8 fb46 	bl	8006260 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 800dbd4:	4802      	ldr	r0, [pc, #8]	; (800dbe0 <SAI1_IRQHandler+0x14>)
 800dbd6:	f7f8 fb43 	bl	8006260 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 800dbda:	bd08      	pop	{r3, pc}
 800dbdc:	200038bc 	.word	0x200038bc
 800dbe0:	20003004 	.word	0x20003004

0800dbe4 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 800dbe4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 800dbe6:	4803      	ldr	r0, [pc, #12]	; (800dbf4 <SAI2_IRQHandler+0x10>)
 800dbe8:	f7f8 fb3a 	bl	8006260 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 800dbec:	4802      	ldr	r0, [pc, #8]	; (800dbf8 <SAI2_IRQHandler+0x14>)
 800dbee:	f7f8 fb37 	bl	8006260 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 800dbf2:	bd08      	pop	{r3, pc}
 800dbf4:	20002c28 	.word	0x20002c28
 800dbf8:	20002418 	.word	0x20002418

0800dbfc <SAI3_IRQHandler>:

/**
  * @brief This function handles SAI3 global interrupt.
  */
void SAI3_IRQHandler(void)
{
 800dbfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SAI3_IRQn 0 */

  /* USER CODE END SAI3_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA3);
 800dbfe:	4803      	ldr	r0, [pc, #12]	; (800dc0c <SAI3_IRQHandler+0x10>)
 800dc00:	f7f8 fb2e 	bl	8006260 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB3);
 800dc04:	4802      	ldr	r0, [pc, #8]	; (800dc10 <SAI3_IRQHandler+0x14>)
 800dc06:	f7f8 fb2b 	bl	8006260 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI3_IRQn 1 */

  /* USER CODE END SAI3_IRQn 1 */
}
 800dc0a:	bd08      	pop	{r3, pc}
 800dc0c:	200029a0 	.word	0x200029a0
 800dc10:	200035b8 	.word	0x200035b8

0800dc14 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 800dc14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800dc16:	f7f4 fc05 	bl	8002424 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 800dc1a:	bd08      	pop	{r3, pc}

0800dc1c <SAI4_IRQHandler>:

/**
  * @brief This function handles SAI4 global interrupt.
  */
void SAI4_IRQHandler(void)
{
 800dc1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SAI4_IRQn 0 */

  /* USER CODE END SAI4_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA4);
 800dc1e:	4803      	ldr	r0, [pc, #12]	; (800dc2c <SAI4_IRQHandler+0x10>)
 800dc20:	f7f8 fb1e 	bl	8006260 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB4);
 800dc24:	4802      	ldr	r0, [pc, #8]	; (800dc30 <SAI4_IRQHandler+0x14>)
 800dc26:	f7f8 fb1b 	bl	8006260 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI4_IRQn 1 */

  /* USER CODE END SAI4_IRQn 1 */
}
 800dc2a:	bd08      	pop	{r3, pc}
 800dc2c:	2000309c 	.word	0x2000309c
 800dc30:	20002d5c 	.word	0x20002d5c

0800dc34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800dc34:	b570      	push	{r4, r5, r6, lr}
 800dc36:	460d      	mov	r5, r1
 800dc38:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dc3a:	2400      	movs	r4, #0
 800dc3c:	e004      	b.n	800dc48 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 800dc3e:	f3af 8000 	nop.w
 800dc42:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dc44:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 800dc46:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dc48:	42b4      	cmp	r4, r6
 800dc4a:	dbf8      	blt.n	800dc3e <_read+0xa>
	}

return len;
}
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	bd70      	pop	{r4, r5, r6, pc}

0800dc50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800dc50:	b570      	push	{r4, r5, r6, lr}
 800dc52:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dc54:	2400      	movs	r4, #0
 800dc56:	e005      	b.n	800dc64 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800dc58:	1c4d      	adds	r5, r1, #1
 800dc5a:	7808      	ldrb	r0, [r1, #0]
 800dc5c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dc60:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 800dc62:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dc64:	42b4      	cmp	r4, r6
 800dc66:	dbf7      	blt.n	800dc58 <_write+0x8>
	}
	return len;
}
 800dc68:	4630      	mov	r0, r6
 800dc6a:	bd70      	pop	{r4, r5, r6, pc}

0800dc6c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800dc6c:	b508      	push	{r3, lr}
 800dc6e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800dc70:	4a0b      	ldr	r2, [pc, #44]	; (800dca0 <_sbrk+0x34>)
 800dc72:	6812      	ldr	r2, [r2, #0]
 800dc74:	b142      	cbz	r2, 800dc88 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800dc76:	4a0a      	ldr	r2, [pc, #40]	; (800dca0 <_sbrk+0x34>)
 800dc78:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800dc7a:	4403      	add	r3, r0
 800dc7c:	466a      	mov	r2, sp
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d806      	bhi.n	800dc90 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800dc82:	4a07      	ldr	r2, [pc, #28]	; (800dca0 <_sbrk+0x34>)
 800dc84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800dc86:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800dc88:	4a05      	ldr	r2, [pc, #20]	; (800dca0 <_sbrk+0x34>)
 800dc8a:	4906      	ldr	r1, [pc, #24]	; (800dca4 <_sbrk+0x38>)
 800dc8c:	6011      	str	r1, [r2, #0]
 800dc8e:	e7f2      	b.n	800dc76 <_sbrk+0xa>
		errno = ENOMEM;
 800dc90:	f000 fae2 	bl	800e258 <__errno>
 800dc94:	230c      	movs	r3, #12
 800dc96:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800dc98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc9c:	e7f3      	b.n	800dc86 <_sbrk+0x1a>
 800dc9e:	bf00      	nop
 800dca0:	20000334 	.word	0x20000334
 800dca4:	200076c0 	.word	0x200076c0

0800dca8 <_close>:

int _close(int file)
{
	return -1;
}
 800dca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dcac:	4770      	bx	lr

0800dcae <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800dcae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dcb2:	604b      	str	r3, [r1, #4]
	return 0;
}
 800dcb4:	2000      	movs	r0, #0
 800dcb6:	4770      	bx	lr

0800dcb8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800dcb8:	2001      	movs	r0, #1
 800dcba:	4770      	bx	lr

0800dcbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	4770      	bx	lr

0800dcc0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800dcc0:	4a18      	ldr	r2, [pc, #96]	; (800dd24 <SystemInit+0x64>)
 800dcc2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800dcc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dcca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800dcce:	4b16      	ldr	r3, [pc, #88]	; (800dd28 <SystemInit+0x68>)
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	f042 0201 	orr.w	r2, r2, #1
 800dcd6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800dcd8:	2200      	movs	r2, #0
 800dcda:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800dcdc:	6818      	ldr	r0, [r3, #0]
 800dcde:	4913      	ldr	r1, [pc, #76]	; (800dd2c <SystemInit+0x6c>)
 800dce0:	4001      	ands	r1, r0
 800dce2:	6019      	str	r1, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800dce4:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800dce6:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800dce8:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800dcea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800dcec:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800dcee:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800dcf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800dcf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800dcf4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800dcf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800dcf8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800dcfa:	6819      	ldr	r1, [r3, #0]
 800dcfc:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800dd00:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800dd02:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800dd04:	4b0a      	ldr	r3, [pc, #40]	; (800dd30 <SystemInit+0x70>)
 800dd06:	681a      	ldr	r2, [r3, #0]
 800dd08:	4b0a      	ldr	r3, [pc, #40]	; (800dd34 <SystemInit+0x74>)
 800dd0a:	4013      	ands	r3, r2
 800dd0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd10:	d202      	bcs.n	800dd18 <SystemInit+0x58>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800dd12:	4b09      	ldr	r3, [pc, #36]	; (800dd38 <SystemInit+0x78>)
 800dd14:	2201      	movs	r2, #1
 800dd16:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800dd18:	4b02      	ldr	r3, [pc, #8]	; (800dd24 <SystemInit+0x64>)
 800dd1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dd1e:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800dd20:	4770      	bx	lr
 800dd22:	bf00      	nop
 800dd24:	e000ed00 	.word	0xe000ed00
 800dd28:	58024400 	.word	0x58024400
 800dd2c:	eaf6ed7f 	.word	0xeaf6ed7f
 800dd30:	5c001000 	.word	0x5c001000
 800dd34:	ffff0000 	.word	0xffff0000
 800dd38:	51008108 	.word	0x51008108

0800dd3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dd3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800dd3e:	2201      	movs	r2, #1
 800dd40:	4910      	ldr	r1, [pc, #64]	; (800dd84 <MX_USB_DEVICE_Init+0x48>)
 800dd42:	4811      	ldr	r0, [pc, #68]	; (800dd88 <MX_USB_DEVICE_Init+0x4c>)
 800dd44:	f7fc fedb 	bl	800aafe <USBD_Init>
 800dd48:	b980      	cbnz	r0, 800dd6c <MX_USB_DEVICE_Init+0x30>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800dd4a:	4910      	ldr	r1, [pc, #64]	; (800dd8c <MX_USB_DEVICE_Init+0x50>)
 800dd4c:	480e      	ldr	r0, [pc, #56]	; (800dd88 <MX_USB_DEVICE_Init+0x4c>)
 800dd4e:	f7fc fef2 	bl	800ab36 <USBD_RegisterClass>
 800dd52:	b970      	cbnz	r0, 800dd72 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800dd54:	490e      	ldr	r1, [pc, #56]	; (800dd90 <MX_USB_DEVICE_Init+0x54>)
 800dd56:	480c      	ldr	r0, [pc, #48]	; (800dd88 <MX_USB_DEVICE_Init+0x4c>)
 800dd58:	f7fc fe89 	bl	800aa6e <USBD_CDC_RegisterInterface>
 800dd5c:	b960      	cbnz	r0, 800dd78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800dd5e:	480a      	ldr	r0, [pc, #40]	; (800dd88 <MX_USB_DEVICE_Init+0x4c>)
 800dd60:	f7fc fefd 	bl	800ab5e <USBD_Start>
 800dd64:	b958      	cbnz	r0, 800dd7e <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800dd66:	f7f5 fe17 	bl	8003998 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dd6a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800dd6c:	f7fe fecf 	bl	800cb0e <Error_Handler>
 800dd70:	e7eb      	b.n	800dd4a <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800dd72:	f7fe fecc 	bl	800cb0e <Error_Handler>
 800dd76:	e7ed      	b.n	800dd54 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800dd78:	f7fe fec9 	bl	800cb0e <Error_Handler>
 800dd7c:	e7ef      	b.n	800dd5e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800dd7e:	f7fe fec6 	bl	800cb0e <Error_Handler>
 800dd82:	e7f0      	b.n	800dd66 <MX_USB_DEVICE_Init+0x2a>
 800dd84:	200001e0 	.word	0x200001e0
 800dd88:	20005de0 	.word	0x20005de0
 800dd8c:	200000e0 	.word	0x200000e0
 800dd90:	20000198 	.word	0x20000198

0800dd94 <CDC_DeInit_HS>:
static int8_t CDC_DeInit_HS(void)
{
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
  /* USER CODE END 9 */
}
 800dd94:	2000      	movs	r0, #0
 800dd96:	4770      	bx	lr

0800dd98 <CDC_Control_HS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 10 */
}
 800dd98:	2000      	movs	r0, #0
 800dd9a:	4770      	bx	lr

0800dd9c <CDC_TransmitCplt_HS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
}
 800dd9c:	2000      	movs	r0, #0
 800dd9e:	4770      	bx	lr

0800dda0 <CDC_Receive_HS>:
{
 800dda0:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800dda2:	4c05      	ldr	r4, [pc, #20]	; (800ddb8 <CDC_Receive_HS+0x18>)
 800dda4:	4601      	mov	r1, r0
 800dda6:	4620      	mov	r0, r4
 800dda8:	f7fc fe70 	bl	800aa8c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800ddac:	4620      	mov	r0, r4
 800ddae:	f7fc fe8d 	bl	800aacc <USBD_CDC_ReceivePacket>
}
 800ddb2:	2000      	movs	r0, #0
 800ddb4:	bd10      	pop	{r4, pc}
 800ddb6:	bf00      	nop
 800ddb8:	20005de0 	.word	0x20005de0

0800ddbc <CDC_Init_HS>:
{
 800ddbc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800ddbe:	4c06      	ldr	r4, [pc, #24]	; (800ddd8 <CDC_Init_HS+0x1c>)
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	4906      	ldr	r1, [pc, #24]	; (800dddc <CDC_Init_HS+0x20>)
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	f7fc fe59 	bl	800aa7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800ddca:	4905      	ldr	r1, [pc, #20]	; (800dde0 <CDC_Init_HS+0x24>)
 800ddcc:	4620      	mov	r0, r4
 800ddce:	f7fc fe5d 	bl	800aa8c <USBD_CDC_SetRxBuffer>
}
 800ddd2:	2000      	movs	r0, #0
 800ddd4:	bd10      	pop	{r4, pc}
 800ddd6:	bf00      	nop
 800ddd8:	20005de0 	.word	0x20005de0
 800dddc:	200068b0 	.word	0x200068b0
 800dde0:	200060b0 	.word	0x200060b0

0800dde4 <CDC_Transmit_HS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800dde4:	4b09      	ldr	r3, [pc, #36]	; (800de0c <CDC_Transmit_HS+0x28>)
 800dde6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800ddea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ddee:	b10b      	cbz	r3, 800ddf4 <CDC_Transmit_HS+0x10>
    return USBD_BUSY;
 800ddf0:	2001      	movs	r0, #1
}
 800ddf2:	4770      	bx	lr
{
 800ddf4:	b510      	push	{r4, lr}
 800ddf6:	460a      	mov	r2, r1
 800ddf8:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800ddfa:	4c04      	ldr	r4, [pc, #16]	; (800de0c <CDC_Transmit_HS+0x28>)
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	f7fc fe3d 	bl	800aa7c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800de02:	4620      	mov	r0, r4
 800de04:	f7fc fe48 	bl	800aa98 <USBD_CDC_TransmitPacket>
}
 800de08:	bd10      	pop	{r4, pc}
 800de0a:	bf00      	nop
 800de0c:	20005de0 	.word	0x20005de0

0800de10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800de10:	b510      	push	{r4, lr}
 800de12:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de14:	2300      	movs	r3, #0
 800de16:	9303      	str	r3, [sp, #12]
 800de18:	9304      	str	r3, [sp, #16]
 800de1a:	9305      	str	r3, [sp, #20]
 800de1c:	9306      	str	r3, [sp, #24]
 800de1e:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_HS)
 800de20:	6802      	ldr	r2, [r0, #0]
 800de22:	4b21      	ldr	r3, [pc, #132]	; (800dea8 <HAL_PCD_MspInit+0x98>)
 800de24:	429a      	cmp	r2, r3
 800de26:	d001      	beq.n	800de2c <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800de28:	b008      	add	sp, #32
 800de2a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800de2c:	4c1f      	ldr	r4, [pc, #124]	; (800deac <HAL_PCD_MspInit+0x9c>)
 800de2e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800de32:	f043 0302 	orr.w	r3, r3, #2
 800de36:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800de3a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800de3e:	f003 0302 	and.w	r3, r3, #2
 800de42:	9301      	str	r3, [sp, #4]
 800de44:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800de46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800de4a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de4c:	2302      	movs	r3, #2
 800de4e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 800de50:	230c      	movs	r3, #12
 800de52:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800de54:	eb0d 0103 	add.w	r1, sp, r3
 800de58:	4815      	ldr	r0, [pc, #84]	; (800deb0 <HAL_PCD_MspInit+0xa0>)
 800de5a:	f7f4 f9d5 	bl	8002208 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800de5e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800de62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800de66:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800de6a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800de6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de72:	9302      	str	r3, [sp, #8]
 800de74:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 1, 0);
 800de76:	2200      	movs	r2, #0
 800de78:	2101      	movs	r1, #1
 800de7a:	204a      	movs	r0, #74	; 0x4a
 800de7c:	f7f2 fc92 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800de80:	204a      	movs	r0, #74	; 0x4a
 800de82:	f7f2 fcc1 	bl	8000808 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 1, 0);
 800de86:	2200      	movs	r2, #0
 800de88:	2101      	movs	r1, #1
 800de8a:	204b      	movs	r0, #75	; 0x4b
 800de8c:	f7f2 fc8a 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800de90:	204b      	movs	r0, #75	; 0x4b
 800de92:	f7f2 fcb9 	bl	8000808 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 0);
 800de96:	2200      	movs	r2, #0
 800de98:	2101      	movs	r1, #1
 800de9a:	204d      	movs	r0, #77	; 0x4d
 800de9c:	f7f2 fc82 	bl	80007a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800dea0:	204d      	movs	r0, #77	; 0x4d
 800dea2:	f7f2 fcb1 	bl	8000808 <HAL_NVIC_EnableIRQ>
}
 800dea6:	e7bf      	b.n	800de28 <HAL_PCD_MspInit+0x18>
 800dea8:	40040000 	.word	0x40040000
 800deac:	58024400 	.word	0x58024400
 800deb0:	58020400 	.word	0x58020400

0800deb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800deb4:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800deb6:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800deba:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800debe:	f7fc fe63 	bl	800ab88 <USBD_LL_SetupStage>
}
 800dec2:	bd08      	pop	{r3, pc}

0800dec4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dec4:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dec6:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800deca:	0093      	lsls	r3, r2, #2
 800decc:	4403      	add	r3, r0
 800dece:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ded2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800ded6:	f7fc fe83 	bl	800abe0 <USBD_LL_DataOutStage>
}
 800deda:	bd08      	pop	{r3, pc}

0800dedc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dedc:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dede:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800dee2:	0093      	lsls	r3, r2, #2
 800dee4:	4403      	add	r3, r0
 800dee6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dee8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800deec:	f7fc feb1 	bl	800ac52 <USBD_LL_DataInStage>
}
 800def0:	bd08      	pop	{r3, pc}

0800def2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800def2:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800def4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800def8:	f7fc ff46 	bl	800ad88 <USBD_LL_SOF>
}
 800defc:	bd08      	pop	{r3, pc}

0800defe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800defe:	b510      	push	{r4, lr}
 800df00:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800df02:	68c3      	ldr	r3, [r0, #12]
 800df04:	b12b      	cbz	r3, 800df12 <HAL_PCD_ResetCallback+0x14>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800df06:	2b02      	cmp	r3, #2
 800df08:	d00d      	beq.n	800df26 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 800df0a:	f7fe fe00 	bl	800cb0e <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800df0e:	2101      	movs	r1, #1
 800df10:	e000      	b.n	800df14 <HAL_PCD_ResetCallback+0x16>
    speed = USBD_SPEED_HIGH;
 800df12:	2100      	movs	r1, #0
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800df14:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800df18:	f7fc ff1f 	bl	800ad5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800df1c:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800df20:	f7fc fef2 	bl	800ad08 <USBD_LL_Reset>
}
 800df24:	bd10      	pop	{r4, pc}
    speed = USBD_SPEED_FULL;
 800df26:	2101      	movs	r1, #1
 800df28:	e7f4      	b.n	800df14 <HAL_PCD_ResetCallback+0x16>
	...

0800df2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df2c:	b510      	push	{r4, lr}
 800df2e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800df30:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800df34:	f7fc ff14 	bl	800ad60 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800df38:	6822      	ldr	r2, [r4, #0]
 800df3a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800df3e:	f043 0301 	orr.w	r3, r3, #1
 800df42:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800df46:	6a23      	ldr	r3, [r4, #32]
 800df48:	b123      	cbz	r3, 800df54 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df4a:	4a03      	ldr	r2, [pc, #12]	; (800df58 <HAL_PCD_SuspendCallback+0x2c>)
 800df4c:	6913      	ldr	r3, [r2, #16]
 800df4e:	f043 0306 	orr.w	r3, r3, #6
 800df52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800df54:	bd10      	pop	{r4, pc}
 800df56:	bf00      	nop
 800df58:	e000ed00 	.word	0xe000ed00

0800df5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800df5e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800df62:	f7fc ff06 	bl	800ad72 <USBD_LL_Resume>
}
 800df66:	bd08      	pop	{r3, pc}

0800df68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df68:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df6a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800df6e:	f7fc ff1b 	bl	800ada8 <USBD_LL_IsoOUTIncomplete>
}
 800df72:	bd08      	pop	{r3, pc}

0800df74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df74:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df76:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800df7a:	f7fc ff13 	bl	800ada4 <USBD_LL_IsoINIncomplete>
}
 800df7e:	bd08      	pop	{r3, pc}

0800df80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df80:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800df82:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800df86:	f7fc ff11 	bl	800adac <USBD_LL_DevConnected>
}
 800df8a:	bd08      	pop	{r3, pc}

0800df8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df8c:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800df8e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800df92:	f7fc ff0d 	bl	800adb0 <USBD_LL_DevDisconnected>
}
 800df96:	bd08      	pop	{r3, pc}

0800df98 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800df98:	7803      	ldrb	r3, [r0, #0]
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d001      	beq.n	800dfa2 <USBD_LL_Init+0xa>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
  }
  return USBD_OK;
}
 800df9e:	2000      	movs	r0, #0
 800dfa0:	4770      	bx	lr
{
 800dfa2:	b510      	push	{r4, lr}
 800dfa4:	4603      	mov	r3, r0
  hpcd_USB_OTG_HS.pData = pdev;
 800dfa6:	4817      	ldr	r0, [pc, #92]	; (800e004 <USBD_LL_Init+0x6c>)
 800dfa8:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 800dfac:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800dfb0:	4b15      	ldr	r3, [pc, #84]	; (800e008 <USBD_LL_Init+0x70>)
 800dfb2:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800dfb4:	2309      	movs	r3, #9
 800dfb6:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800dfb8:	2202      	movs	r2, #2
 800dfba:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800dfc0:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800dfc2:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800dfc4:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800dfc6:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.battery_charging_enable = ENABLE;
 800dfc8:	2201      	movs	r2, #1
 800dfca:	6282      	str	r2, [r0, #40]	; 0x28
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800dfcc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800dfce:	6303      	str	r3, [r0, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800dfd0:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800dfd2:	f7f4 ff3d 	bl	8002e50 <HAL_PCD_Init>
 800dfd6:	b990      	cbnz	r0, 800dffe <USBD_LL_Init+0x66>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800dfd8:	4c0a      	ldr	r4, [pc, #40]	; (800e004 <USBD_LL_Init+0x6c>)
 800dfda:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f7f5 fc95 	bl	800390e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800dfe4:	2280      	movs	r2, #128	; 0x80
 800dfe6:	2100      	movs	r1, #0
 800dfe8:	4620      	mov	r0, r4
 800dfea:	f7f5 fc6c 	bl	80038c6 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800dfee:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800dff2:	2101      	movs	r1, #1
 800dff4:	4620      	mov	r0, r4
 800dff6:	f7f5 fc66 	bl	80038c6 <HAL_PCDEx_SetTxFiFo>
}
 800dffa:	2000      	movs	r0, #0
 800dffc:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800dffe:	f7fe fd86 	bl	800cb0e <Error_Handler>
 800e002:	e7e9      	b.n	800dfd8 <USBD_LL_Init+0x40>
 800e004:	200070b0 	.word	0x200070b0
 800e008:	40040000 	.word	0x40040000

0800e00c <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e00c:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4

  if((ep_addr & 0x80) == 0x80)
 800e010:	f011 0f80 	tst.w	r1, #128	; 0x80
 800e014:	d108      	bne.n	800e028 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e016:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800e01a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800e01e:	008a      	lsls	r2, r1, #2
 800e020:	4413      	add	r3, r2
 800e022:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
  }
}
 800e026:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e028:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800e02c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800e030:	008a      	lsls	r2, r1, #2
 800e032:	4413      	add	r3, r2
 800e034:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 800e038:	4770      	bx	lr

0800e03a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e03a:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e03c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e040:	f7f5 fb96 	bl	8003770 <HAL_PCD_EP_GetRxCount>
}
 800e044:	bd08      	pop	{r3, pc}

0800e046 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800e046:	b118      	cbz	r0, 800e050 <USBD_Get_USB_Status+0xa>
 800e048:	2802      	cmp	r0, #2
 800e04a:	d003      	beq.n	800e054 <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e04c:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800e04e:	4770      	bx	lr
      usb_status = USBD_OK;
 800e050:	2000      	movs	r0, #0
 800e052:	4770      	bx	lr
      usb_status = USBD_BUSY;
 800e054:	2001      	movs	r0, #1
    break;
 800e056:	4770      	bx	lr

0800e058 <USBD_LL_Start>:
{
 800e058:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800e05a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e05e:	f7f4 ff8f 	bl	8002f80 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e062:	f7ff fff0 	bl	800e046 <USBD_Get_USB_Status>
}
 800e066:	bd08      	pop	{r3, pc}

0800e068 <USBD_LL_OpenEP>:
{
 800e068:	b510      	push	{r4, lr}
 800e06a:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e06c:	4613      	mov	r3, r2
 800e06e:	4622      	mov	r2, r4
 800e070:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e074:	f7f5 fad6 	bl	8003624 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e078:	f7ff ffe5 	bl	800e046 <USBD_Get_USB_Status>
}
 800e07c:	bd10      	pop	{r4, pc}

0800e07e <USBD_LL_CloseEP>:
{
 800e07e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e080:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e084:	f7f5 fb0f 	bl	80036a6 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e088:	f7ff ffdd 	bl	800e046 <USBD_Get_USB_Status>
}
 800e08c:	bd08      	pop	{r3, pc}

0800e08e <USBD_LL_StallEP>:
{
 800e08e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e090:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e094:	f7f5 fb9f 	bl	80037d6 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e098:	f7ff ffd5 	bl	800e046 <USBD_Get_USB_Status>
}
 800e09c:	bd08      	pop	{r3, pc}

0800e09e <USBD_LL_ClearStallEP>:
{
 800e09e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e0a0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e0a4:	f7f5 fbd8 	bl	8003858 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0a8:	f7ff ffcd 	bl	800e046 <USBD_Get_USB_Status>
}
 800e0ac:	bd08      	pop	{r3, pc}

0800e0ae <USBD_LL_SetUSBAddress>:
{
 800e0ae:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e0b0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e0b4:	f7f5 faa2 	bl	80035fc <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0b8:	f7ff ffc5 	bl	800e046 <USBD_Get_USB_Status>
}
 800e0bc:	bd08      	pop	{r3, pc}

0800e0be <USBD_LL_Transmit>:
{
 800e0be:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e0c0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e0c4:	f7f5 fb5d 	bl	8003782 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0c8:	f7ff ffbd 	bl	800e046 <USBD_Get_USB_Status>
}
 800e0cc:	bd08      	pop	{r3, pc}

0800e0ce <USBD_LL_PrepareReceive>:
{
 800e0ce:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e0d0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e0d4:	f7f5 fb1e 	bl	8003714 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0d8:	f7ff ffb5 	bl	800e046 <USBD_Get_USB_Status>
}
 800e0dc:	bd08      	pop	{r3, pc}
	...

0800e0e0 <USBD_HS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800e0e0:	2312      	movs	r3, #18
 800e0e2:	800b      	strh	r3, [r1, #0]
  return USBD_HS_DeviceDesc;
}
 800e0e4:	4800      	ldr	r0, [pc, #0]	; (800e0e8 <USBD_HS_DeviceDescriptor+0x8>)
 800e0e6:	4770      	bx	lr
 800e0e8:	200001ac 	.word	0x200001ac

0800e0ec <USBD_HS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e0ec:	2304      	movs	r3, #4
 800e0ee:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800e0f0:	4800      	ldr	r0, [pc, #0]	; (800e0f4 <USBD_HS_LangIDStrDescriptor+0x8>)
 800e0f2:	4770      	bx	lr
 800e0f4:	200001c0 	.word	0x200001c0

0800e0f8 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	d216      	bcs.n	800e12c <IntToUnicode+0x34>
{
 800e0fe:	b430      	push	{r4, r5}
 800e100:	e00b      	b.n	800e11a <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e102:	3437      	adds	r4, #55	; 0x37
 800e104:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 800e108:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800e10a:	005c      	lsls	r4, r3, #1
 800e10c:	3401      	adds	r4, #1
 800e10e:	2500      	movs	r5, #0
 800e110:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 800e112:	3301      	adds	r3, #1
 800e114:	b2db      	uxtb	r3, r3
 800e116:	4293      	cmp	r3, r2
 800e118:	d206      	bcs.n	800e128 <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 800e11a:	0f04      	lsrs	r4, r0, #28
 800e11c:	2c09      	cmp	r4, #9
 800e11e:	d8f0      	bhi.n	800e102 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800e120:	3430      	adds	r4, #48	; 0x30
 800e122:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 800e126:	e7ef      	b.n	800e108 <IntToUnicode+0x10>
  }
}
 800e128:	bc30      	pop	{r4, r5}
 800e12a:	4770      	bx	lr
 800e12c:	4770      	bx	lr
	...

0800e130 <Get_SerialNum>:
{
 800e130:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e132:	4b0b      	ldr	r3, [pc, #44]	; (800e160 <Get_SerialNum+0x30>)
 800e134:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e136:	3304      	adds	r3, #4
 800e138:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e13a:	3304      	adds	r3, #4
 800e13c:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800e13e:	18c0      	adds	r0, r0, r3
 800e140:	d100      	bne.n	800e144 <Get_SerialNum+0x14>
}
 800e142:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e144:	4d07      	ldr	r5, [pc, #28]	; (800e164 <Get_SerialNum+0x34>)
 800e146:	2208      	movs	r2, #8
 800e148:	f105 011a 	add.w	r1, r5, #26
 800e14c:	f7ff ffd4 	bl	800e0f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e150:	2204      	movs	r2, #4
 800e152:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 800e156:	4620      	mov	r0, r4
 800e158:	f7ff ffce 	bl	800e0f8 <IntToUnicode>
}
 800e15c:	e7f1      	b.n	800e142 <Get_SerialNum+0x12>
 800e15e:	bf00      	nop
 800e160:	1ff1e800 	.word	0x1ff1e800
 800e164:	200001ac 	.word	0x200001ac

0800e168 <USBD_HS_SerialStrDescriptor>:
{
 800e168:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800e16a:	231a      	movs	r3, #26
 800e16c:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800e16e:	f7ff ffdf 	bl	800e130 <Get_SerialNum>
}
 800e172:	4801      	ldr	r0, [pc, #4]	; (800e178 <USBD_HS_SerialStrDescriptor+0x10>)
 800e174:	bd08      	pop	{r3, pc}
 800e176:	bf00      	nop
 800e178:	200001c4 	.word	0x200001c4

0800e17c <USBD_HS_ProductStrDescriptor>:
{
 800e17c:	b508      	push	{r3, lr}
 800e17e:	460a      	mov	r2, r1
  if(speed == 0)
 800e180:	b128      	cbz	r0, 800e18e <USBD_HS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e182:	4905      	ldr	r1, [pc, #20]	; (800e198 <USBD_HS_ProductStrDescriptor+0x1c>)
 800e184:	4805      	ldr	r0, [pc, #20]	; (800e19c <USBD_HS_ProductStrDescriptor+0x20>)
 800e186:	f7fd f975 	bl	800b474 <USBD_GetString>
}
 800e18a:	4803      	ldr	r0, [pc, #12]	; (800e198 <USBD_HS_ProductStrDescriptor+0x1c>)
 800e18c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e18e:	4902      	ldr	r1, [pc, #8]	; (800e198 <USBD_HS_ProductStrDescriptor+0x1c>)
 800e190:	4802      	ldr	r0, [pc, #8]	; (800e19c <USBD_HS_ProductStrDescriptor+0x20>)
 800e192:	f7fd f96f 	bl	800b474 <USBD_GetString>
 800e196:	e7f8      	b.n	800e18a <USBD_HS_ProductStrDescriptor+0xe>
 800e198:	200074b8 	.word	0x200074b8
 800e19c:	0800f358 	.word	0x0800f358

0800e1a0 <USBD_HS_ManufacturerStrDescriptor>:
{
 800e1a0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e1a2:	4c04      	ldr	r4, [pc, #16]	; (800e1b4 <USBD_HS_ManufacturerStrDescriptor+0x14>)
 800e1a4:	460a      	mov	r2, r1
 800e1a6:	4621      	mov	r1, r4
 800e1a8:	4803      	ldr	r0, [pc, #12]	; (800e1b8 <USBD_HS_ManufacturerStrDescriptor+0x18>)
 800e1aa:	f7fd f963 	bl	800b474 <USBD_GetString>
}
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	bd10      	pop	{r4, pc}
 800e1b2:	bf00      	nop
 800e1b4:	200074b8 	.word	0x200074b8
 800e1b8:	0800f370 	.word	0x0800f370

0800e1bc <USBD_HS_ConfigStrDescriptor>:
{
 800e1bc:	b508      	push	{r3, lr}
 800e1be:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800e1c0:	b128      	cbz	r0, 800e1ce <USBD_HS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e1c2:	4905      	ldr	r1, [pc, #20]	; (800e1d8 <USBD_HS_ConfigStrDescriptor+0x1c>)
 800e1c4:	4805      	ldr	r0, [pc, #20]	; (800e1dc <USBD_HS_ConfigStrDescriptor+0x20>)
 800e1c6:	f7fd f955 	bl	800b474 <USBD_GetString>
}
 800e1ca:	4803      	ldr	r0, [pc, #12]	; (800e1d8 <USBD_HS_ConfigStrDescriptor+0x1c>)
 800e1cc:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e1ce:	4902      	ldr	r1, [pc, #8]	; (800e1d8 <USBD_HS_ConfigStrDescriptor+0x1c>)
 800e1d0:	4802      	ldr	r0, [pc, #8]	; (800e1dc <USBD_HS_ConfigStrDescriptor+0x20>)
 800e1d2:	f7fd f94f 	bl	800b474 <USBD_GetString>
 800e1d6:	e7f8      	b.n	800e1ca <USBD_HS_ConfigStrDescriptor+0xe>
 800e1d8:	200074b8 	.word	0x200074b8
 800e1dc:	0800f384 	.word	0x0800f384

0800e1e0 <USBD_HS_InterfaceStrDescriptor>:
{
 800e1e0:	b508      	push	{r3, lr}
 800e1e2:	460a      	mov	r2, r1
  if(speed == 0)
 800e1e4:	b128      	cbz	r0, 800e1f2 <USBD_HS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e1e6:	4905      	ldr	r1, [pc, #20]	; (800e1fc <USBD_HS_InterfaceStrDescriptor+0x1c>)
 800e1e8:	4805      	ldr	r0, [pc, #20]	; (800e200 <USBD_HS_InterfaceStrDescriptor+0x20>)
 800e1ea:	f7fd f943 	bl	800b474 <USBD_GetString>
}
 800e1ee:	4803      	ldr	r0, [pc, #12]	; (800e1fc <USBD_HS_InterfaceStrDescriptor+0x1c>)
 800e1f0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e1f2:	4902      	ldr	r1, [pc, #8]	; (800e1fc <USBD_HS_InterfaceStrDescriptor+0x1c>)
 800e1f4:	4802      	ldr	r0, [pc, #8]	; (800e200 <USBD_HS_InterfaceStrDescriptor+0x20>)
 800e1f6:	f7fd f93d 	bl	800b474 <USBD_GetString>
 800e1fa:	e7f8      	b.n	800e1ee <USBD_HS_InterfaceStrDescriptor+0xe>
 800e1fc:	200074b8 	.word	0x200074b8
 800e200:	0800f390 	.word	0x0800f390

0800e204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800e204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e23c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e208:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e20a:	e003      	b.n	800e214 <LoopCopyDataInit>

0800e20c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e20c:	4b0c      	ldr	r3, [pc, #48]	; (800e240 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e20e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e210:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e212:	3104      	adds	r1, #4

0800e214 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e214:	480b      	ldr	r0, [pc, #44]	; (800e244 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e216:	4b0c      	ldr	r3, [pc, #48]	; (800e248 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e218:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e21a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e21c:	d3f6      	bcc.n	800e20c <CopyDataInit>
  ldr  r2, =_sbss
 800e21e:	4a0b      	ldr	r2, [pc, #44]	; (800e24c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e220:	e002      	b.n	800e228 <LoopFillZerobss>

0800e222 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e222:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e224:	f842 3b04 	str.w	r3, [r2], #4

0800e228 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e228:	4b09      	ldr	r3, [pc, #36]	; (800e250 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e22a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e22c:	d3f9      	bcc.n	800e222 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e22e:	f7ff fd47 	bl	800dcc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e232:	f000 f817 	bl	800e264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e236:	f7fe f967 	bl	800c508 <main>
  bx  lr    
 800e23a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800e23c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800e240:	0800f448 	.word	0x0800f448
  ldr  r0, =_sdata
 800e244:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e248:	20000260 	.word	0x20000260
  ldr  r2, =_sbss
 800e24c:	20000260 	.word	0x20000260
  ldr  r3, = _ebss
 800e250:	200076bc 	.word	0x200076bc

0800e254 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e254:	e7fe      	b.n	800e254 <ADC3_IRQHandler>
	...

0800e258 <__errno>:
 800e258:	4b01      	ldr	r3, [pc, #4]	; (800e260 <__errno+0x8>)
 800e25a:	6818      	ldr	r0, [r3, #0]
 800e25c:	4770      	bx	lr
 800e25e:	bf00      	nop
 800e260:	200001fc 	.word	0x200001fc

0800e264 <__libc_init_array>:
 800e264:	b570      	push	{r4, r5, r6, lr}
 800e266:	4e0d      	ldr	r6, [pc, #52]	; (800e29c <__libc_init_array+0x38>)
 800e268:	4c0d      	ldr	r4, [pc, #52]	; (800e2a0 <__libc_init_array+0x3c>)
 800e26a:	1ba4      	subs	r4, r4, r6
 800e26c:	10a4      	asrs	r4, r4, #2
 800e26e:	2500      	movs	r5, #0
 800e270:	42a5      	cmp	r5, r4
 800e272:	d109      	bne.n	800e288 <__libc_init_array+0x24>
 800e274:	4e0b      	ldr	r6, [pc, #44]	; (800e2a4 <__libc_init_array+0x40>)
 800e276:	4c0c      	ldr	r4, [pc, #48]	; (800e2a8 <__libc_init_array+0x44>)
 800e278:	f000 ff20 	bl	800f0bc <_init>
 800e27c:	1ba4      	subs	r4, r4, r6
 800e27e:	10a4      	asrs	r4, r4, #2
 800e280:	2500      	movs	r5, #0
 800e282:	42a5      	cmp	r5, r4
 800e284:	d105      	bne.n	800e292 <__libc_init_array+0x2e>
 800e286:	bd70      	pop	{r4, r5, r6, pc}
 800e288:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e28c:	4798      	blx	r3
 800e28e:	3501      	adds	r5, #1
 800e290:	e7ee      	b.n	800e270 <__libc_init_array+0xc>
 800e292:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e296:	4798      	blx	r3
 800e298:	3501      	adds	r5, #1
 800e29a:	e7f2      	b.n	800e282 <__libc_init_array+0x1e>
 800e29c:	0800f440 	.word	0x0800f440
 800e2a0:	0800f440 	.word	0x0800f440
 800e2a4:	0800f440 	.word	0x0800f440
 800e2a8:	0800f444 	.word	0x0800f444

0800e2ac <malloc>:
 800e2ac:	4b02      	ldr	r3, [pc, #8]	; (800e2b8 <malloc+0xc>)
 800e2ae:	4601      	mov	r1, r0
 800e2b0:	6818      	ldr	r0, [r3, #0]
 800e2b2:	f000 b86d 	b.w	800e390 <_malloc_r>
 800e2b6:	bf00      	nop
 800e2b8:	200001fc 	.word	0x200001fc

0800e2bc <free>:
 800e2bc:	4b02      	ldr	r3, [pc, #8]	; (800e2c8 <free+0xc>)
 800e2be:	4601      	mov	r1, r0
 800e2c0:	6818      	ldr	r0, [r3, #0]
 800e2c2:	f000 b817 	b.w	800e2f4 <_free_r>
 800e2c6:	bf00      	nop
 800e2c8:	200001fc 	.word	0x200001fc

0800e2cc <memcpy>:
 800e2cc:	b510      	push	{r4, lr}
 800e2ce:	1e43      	subs	r3, r0, #1
 800e2d0:	440a      	add	r2, r1
 800e2d2:	4291      	cmp	r1, r2
 800e2d4:	d100      	bne.n	800e2d8 <memcpy+0xc>
 800e2d6:	bd10      	pop	{r4, pc}
 800e2d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2e0:	e7f7      	b.n	800e2d2 <memcpy+0x6>

0800e2e2 <memset>:
 800e2e2:	4402      	add	r2, r0
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d100      	bne.n	800e2ec <memset+0xa>
 800e2ea:	4770      	bx	lr
 800e2ec:	f803 1b01 	strb.w	r1, [r3], #1
 800e2f0:	e7f9      	b.n	800e2e6 <memset+0x4>
	...

0800e2f4 <_free_r>:
 800e2f4:	b538      	push	{r3, r4, r5, lr}
 800e2f6:	4605      	mov	r5, r0
 800e2f8:	2900      	cmp	r1, #0
 800e2fa:	d045      	beq.n	800e388 <_free_r+0x94>
 800e2fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e300:	1f0c      	subs	r4, r1, #4
 800e302:	2b00      	cmp	r3, #0
 800e304:	bfb8      	it	lt
 800e306:	18e4      	addlt	r4, r4, r3
 800e308:	f000 f98e 	bl	800e628 <__malloc_lock>
 800e30c:	4a1f      	ldr	r2, [pc, #124]	; (800e38c <_free_r+0x98>)
 800e30e:	6813      	ldr	r3, [r2, #0]
 800e310:	4610      	mov	r0, r2
 800e312:	b933      	cbnz	r3, 800e322 <_free_r+0x2e>
 800e314:	6063      	str	r3, [r4, #4]
 800e316:	6014      	str	r4, [r2, #0]
 800e318:	4628      	mov	r0, r5
 800e31a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e31e:	f000 b984 	b.w	800e62a <__malloc_unlock>
 800e322:	42a3      	cmp	r3, r4
 800e324:	d90c      	bls.n	800e340 <_free_r+0x4c>
 800e326:	6821      	ldr	r1, [r4, #0]
 800e328:	1862      	adds	r2, r4, r1
 800e32a:	4293      	cmp	r3, r2
 800e32c:	bf04      	itt	eq
 800e32e:	681a      	ldreq	r2, [r3, #0]
 800e330:	685b      	ldreq	r3, [r3, #4]
 800e332:	6063      	str	r3, [r4, #4]
 800e334:	bf04      	itt	eq
 800e336:	1852      	addeq	r2, r2, r1
 800e338:	6022      	streq	r2, [r4, #0]
 800e33a:	6004      	str	r4, [r0, #0]
 800e33c:	e7ec      	b.n	800e318 <_free_r+0x24>
 800e33e:	4613      	mov	r3, r2
 800e340:	685a      	ldr	r2, [r3, #4]
 800e342:	b10a      	cbz	r2, 800e348 <_free_r+0x54>
 800e344:	42a2      	cmp	r2, r4
 800e346:	d9fa      	bls.n	800e33e <_free_r+0x4a>
 800e348:	6819      	ldr	r1, [r3, #0]
 800e34a:	1858      	adds	r0, r3, r1
 800e34c:	42a0      	cmp	r0, r4
 800e34e:	d10b      	bne.n	800e368 <_free_r+0x74>
 800e350:	6820      	ldr	r0, [r4, #0]
 800e352:	4401      	add	r1, r0
 800e354:	1858      	adds	r0, r3, r1
 800e356:	4282      	cmp	r2, r0
 800e358:	6019      	str	r1, [r3, #0]
 800e35a:	d1dd      	bne.n	800e318 <_free_r+0x24>
 800e35c:	6810      	ldr	r0, [r2, #0]
 800e35e:	6852      	ldr	r2, [r2, #4]
 800e360:	605a      	str	r2, [r3, #4]
 800e362:	4401      	add	r1, r0
 800e364:	6019      	str	r1, [r3, #0]
 800e366:	e7d7      	b.n	800e318 <_free_r+0x24>
 800e368:	d902      	bls.n	800e370 <_free_r+0x7c>
 800e36a:	230c      	movs	r3, #12
 800e36c:	602b      	str	r3, [r5, #0]
 800e36e:	e7d3      	b.n	800e318 <_free_r+0x24>
 800e370:	6820      	ldr	r0, [r4, #0]
 800e372:	1821      	adds	r1, r4, r0
 800e374:	428a      	cmp	r2, r1
 800e376:	bf04      	itt	eq
 800e378:	6811      	ldreq	r1, [r2, #0]
 800e37a:	6852      	ldreq	r2, [r2, #4]
 800e37c:	6062      	str	r2, [r4, #4]
 800e37e:	bf04      	itt	eq
 800e380:	1809      	addeq	r1, r1, r0
 800e382:	6021      	streq	r1, [r4, #0]
 800e384:	605c      	str	r4, [r3, #4]
 800e386:	e7c7      	b.n	800e318 <_free_r+0x24>
 800e388:	bd38      	pop	{r3, r4, r5, pc}
 800e38a:	bf00      	nop
 800e38c:	2000033c 	.word	0x2000033c

0800e390 <_malloc_r>:
 800e390:	b570      	push	{r4, r5, r6, lr}
 800e392:	1ccd      	adds	r5, r1, #3
 800e394:	f025 0503 	bic.w	r5, r5, #3
 800e398:	3508      	adds	r5, #8
 800e39a:	2d0c      	cmp	r5, #12
 800e39c:	bf38      	it	cc
 800e39e:	250c      	movcc	r5, #12
 800e3a0:	2d00      	cmp	r5, #0
 800e3a2:	4606      	mov	r6, r0
 800e3a4:	db01      	blt.n	800e3aa <_malloc_r+0x1a>
 800e3a6:	42a9      	cmp	r1, r5
 800e3a8:	d903      	bls.n	800e3b2 <_malloc_r+0x22>
 800e3aa:	230c      	movs	r3, #12
 800e3ac:	6033      	str	r3, [r6, #0]
 800e3ae:	2000      	movs	r0, #0
 800e3b0:	bd70      	pop	{r4, r5, r6, pc}
 800e3b2:	f000 f939 	bl	800e628 <__malloc_lock>
 800e3b6:	4a21      	ldr	r2, [pc, #132]	; (800e43c <_malloc_r+0xac>)
 800e3b8:	6814      	ldr	r4, [r2, #0]
 800e3ba:	4621      	mov	r1, r4
 800e3bc:	b991      	cbnz	r1, 800e3e4 <_malloc_r+0x54>
 800e3be:	4c20      	ldr	r4, [pc, #128]	; (800e440 <_malloc_r+0xb0>)
 800e3c0:	6823      	ldr	r3, [r4, #0]
 800e3c2:	b91b      	cbnz	r3, 800e3cc <_malloc_r+0x3c>
 800e3c4:	4630      	mov	r0, r6
 800e3c6:	f000 f855 	bl	800e474 <_sbrk_r>
 800e3ca:	6020      	str	r0, [r4, #0]
 800e3cc:	4629      	mov	r1, r5
 800e3ce:	4630      	mov	r0, r6
 800e3d0:	f000 f850 	bl	800e474 <_sbrk_r>
 800e3d4:	1c43      	adds	r3, r0, #1
 800e3d6:	d124      	bne.n	800e422 <_malloc_r+0x92>
 800e3d8:	230c      	movs	r3, #12
 800e3da:	6033      	str	r3, [r6, #0]
 800e3dc:	4630      	mov	r0, r6
 800e3de:	f000 f924 	bl	800e62a <__malloc_unlock>
 800e3e2:	e7e4      	b.n	800e3ae <_malloc_r+0x1e>
 800e3e4:	680b      	ldr	r3, [r1, #0]
 800e3e6:	1b5b      	subs	r3, r3, r5
 800e3e8:	d418      	bmi.n	800e41c <_malloc_r+0x8c>
 800e3ea:	2b0b      	cmp	r3, #11
 800e3ec:	d90f      	bls.n	800e40e <_malloc_r+0x7e>
 800e3ee:	600b      	str	r3, [r1, #0]
 800e3f0:	50cd      	str	r5, [r1, r3]
 800e3f2:	18cc      	adds	r4, r1, r3
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	f000 f918 	bl	800e62a <__malloc_unlock>
 800e3fa:	f104 000b 	add.w	r0, r4, #11
 800e3fe:	1d23      	adds	r3, r4, #4
 800e400:	f020 0007 	bic.w	r0, r0, #7
 800e404:	1ac3      	subs	r3, r0, r3
 800e406:	d0d3      	beq.n	800e3b0 <_malloc_r+0x20>
 800e408:	425a      	negs	r2, r3
 800e40a:	50e2      	str	r2, [r4, r3]
 800e40c:	e7d0      	b.n	800e3b0 <_malloc_r+0x20>
 800e40e:	428c      	cmp	r4, r1
 800e410:	684b      	ldr	r3, [r1, #4]
 800e412:	bf16      	itet	ne
 800e414:	6063      	strne	r3, [r4, #4]
 800e416:	6013      	streq	r3, [r2, #0]
 800e418:	460c      	movne	r4, r1
 800e41a:	e7eb      	b.n	800e3f4 <_malloc_r+0x64>
 800e41c:	460c      	mov	r4, r1
 800e41e:	6849      	ldr	r1, [r1, #4]
 800e420:	e7cc      	b.n	800e3bc <_malloc_r+0x2c>
 800e422:	1cc4      	adds	r4, r0, #3
 800e424:	f024 0403 	bic.w	r4, r4, #3
 800e428:	42a0      	cmp	r0, r4
 800e42a:	d005      	beq.n	800e438 <_malloc_r+0xa8>
 800e42c:	1a21      	subs	r1, r4, r0
 800e42e:	4630      	mov	r0, r6
 800e430:	f000 f820 	bl	800e474 <_sbrk_r>
 800e434:	3001      	adds	r0, #1
 800e436:	d0cf      	beq.n	800e3d8 <_malloc_r+0x48>
 800e438:	6025      	str	r5, [r4, #0]
 800e43a:	e7db      	b.n	800e3f4 <_malloc_r+0x64>
 800e43c:	2000033c 	.word	0x2000033c
 800e440:	20000340 	.word	0x20000340

0800e444 <iprintf>:
 800e444:	b40f      	push	{r0, r1, r2, r3}
 800e446:	4b0a      	ldr	r3, [pc, #40]	; (800e470 <iprintf+0x2c>)
 800e448:	b513      	push	{r0, r1, r4, lr}
 800e44a:	681c      	ldr	r4, [r3, #0]
 800e44c:	b124      	cbz	r4, 800e458 <iprintf+0x14>
 800e44e:	69a3      	ldr	r3, [r4, #24]
 800e450:	b913      	cbnz	r3, 800e458 <iprintf+0x14>
 800e452:	4620      	mov	r0, r4
 800e454:	f000 f85e 	bl	800e514 <__sinit>
 800e458:	ab05      	add	r3, sp, #20
 800e45a:	9a04      	ldr	r2, [sp, #16]
 800e45c:	68a1      	ldr	r1, [r4, #8]
 800e45e:	9301      	str	r3, [sp, #4]
 800e460:	4620      	mov	r0, r4
 800e462:	f000 f90d 	bl	800e680 <_vfiprintf_r>
 800e466:	b002      	add	sp, #8
 800e468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e46c:	b004      	add	sp, #16
 800e46e:	4770      	bx	lr
 800e470:	200001fc 	.word	0x200001fc

0800e474 <_sbrk_r>:
 800e474:	b538      	push	{r3, r4, r5, lr}
 800e476:	4c06      	ldr	r4, [pc, #24]	; (800e490 <_sbrk_r+0x1c>)
 800e478:	2300      	movs	r3, #0
 800e47a:	4605      	mov	r5, r0
 800e47c:	4608      	mov	r0, r1
 800e47e:	6023      	str	r3, [r4, #0]
 800e480:	f7ff fbf4 	bl	800dc6c <_sbrk>
 800e484:	1c43      	adds	r3, r0, #1
 800e486:	d102      	bne.n	800e48e <_sbrk_r+0x1a>
 800e488:	6823      	ldr	r3, [r4, #0]
 800e48a:	b103      	cbz	r3, 800e48e <_sbrk_r+0x1a>
 800e48c:	602b      	str	r3, [r5, #0]
 800e48e:	bd38      	pop	{r3, r4, r5, pc}
 800e490:	200076b8 	.word	0x200076b8

0800e494 <std>:
 800e494:	2300      	movs	r3, #0
 800e496:	b510      	push	{r4, lr}
 800e498:	4604      	mov	r4, r0
 800e49a:	e9c0 3300 	strd	r3, r3, [r0]
 800e49e:	6083      	str	r3, [r0, #8]
 800e4a0:	8181      	strh	r1, [r0, #12]
 800e4a2:	6643      	str	r3, [r0, #100]	; 0x64
 800e4a4:	81c2      	strh	r2, [r0, #14]
 800e4a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4aa:	6183      	str	r3, [r0, #24]
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	2208      	movs	r2, #8
 800e4b0:	305c      	adds	r0, #92	; 0x5c
 800e4b2:	f7ff ff16 	bl	800e2e2 <memset>
 800e4b6:	4b05      	ldr	r3, [pc, #20]	; (800e4cc <std+0x38>)
 800e4b8:	6263      	str	r3, [r4, #36]	; 0x24
 800e4ba:	4b05      	ldr	r3, [pc, #20]	; (800e4d0 <std+0x3c>)
 800e4bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4be:	4b05      	ldr	r3, [pc, #20]	; (800e4d4 <std+0x40>)
 800e4c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4c2:	4b05      	ldr	r3, [pc, #20]	; (800e4d8 <std+0x44>)
 800e4c4:	6224      	str	r4, [r4, #32]
 800e4c6:	6323      	str	r3, [r4, #48]	; 0x30
 800e4c8:	bd10      	pop	{r4, pc}
 800e4ca:	bf00      	nop
 800e4cc:	0800ebbd 	.word	0x0800ebbd
 800e4d0:	0800ebdf 	.word	0x0800ebdf
 800e4d4:	0800ec17 	.word	0x0800ec17
 800e4d8:	0800ec3b 	.word	0x0800ec3b

0800e4dc <_cleanup_r>:
 800e4dc:	4901      	ldr	r1, [pc, #4]	; (800e4e4 <_cleanup_r+0x8>)
 800e4de:	f000 b885 	b.w	800e5ec <_fwalk_reent>
 800e4e2:	bf00      	nop
 800e4e4:	0800ef15 	.word	0x0800ef15

0800e4e8 <__sfmoreglue>:
 800e4e8:	b570      	push	{r4, r5, r6, lr}
 800e4ea:	1e4a      	subs	r2, r1, #1
 800e4ec:	2568      	movs	r5, #104	; 0x68
 800e4ee:	4355      	muls	r5, r2
 800e4f0:	460e      	mov	r6, r1
 800e4f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e4f6:	f7ff ff4b 	bl	800e390 <_malloc_r>
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	b140      	cbz	r0, 800e510 <__sfmoreglue+0x28>
 800e4fe:	2100      	movs	r1, #0
 800e500:	e9c0 1600 	strd	r1, r6, [r0]
 800e504:	300c      	adds	r0, #12
 800e506:	60a0      	str	r0, [r4, #8]
 800e508:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e50c:	f7ff fee9 	bl	800e2e2 <memset>
 800e510:	4620      	mov	r0, r4
 800e512:	bd70      	pop	{r4, r5, r6, pc}

0800e514 <__sinit>:
 800e514:	6983      	ldr	r3, [r0, #24]
 800e516:	b510      	push	{r4, lr}
 800e518:	4604      	mov	r4, r0
 800e51a:	bb33      	cbnz	r3, 800e56a <__sinit+0x56>
 800e51c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e520:	6503      	str	r3, [r0, #80]	; 0x50
 800e522:	4b12      	ldr	r3, [pc, #72]	; (800e56c <__sinit+0x58>)
 800e524:	4a12      	ldr	r2, [pc, #72]	; (800e570 <__sinit+0x5c>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	6282      	str	r2, [r0, #40]	; 0x28
 800e52a:	4298      	cmp	r0, r3
 800e52c:	bf04      	itt	eq
 800e52e:	2301      	moveq	r3, #1
 800e530:	6183      	streq	r3, [r0, #24]
 800e532:	f000 f81f 	bl	800e574 <__sfp>
 800e536:	6060      	str	r0, [r4, #4]
 800e538:	4620      	mov	r0, r4
 800e53a:	f000 f81b 	bl	800e574 <__sfp>
 800e53e:	60a0      	str	r0, [r4, #8]
 800e540:	4620      	mov	r0, r4
 800e542:	f000 f817 	bl	800e574 <__sfp>
 800e546:	2200      	movs	r2, #0
 800e548:	60e0      	str	r0, [r4, #12]
 800e54a:	2104      	movs	r1, #4
 800e54c:	6860      	ldr	r0, [r4, #4]
 800e54e:	f7ff ffa1 	bl	800e494 <std>
 800e552:	2201      	movs	r2, #1
 800e554:	2109      	movs	r1, #9
 800e556:	68a0      	ldr	r0, [r4, #8]
 800e558:	f7ff ff9c 	bl	800e494 <std>
 800e55c:	2202      	movs	r2, #2
 800e55e:	2112      	movs	r1, #18
 800e560:	68e0      	ldr	r0, [r4, #12]
 800e562:	f7ff ff97 	bl	800e494 <std>
 800e566:	2301      	movs	r3, #1
 800e568:	61a3      	str	r3, [r4, #24]
 800e56a:	bd10      	pop	{r4, pc}
 800e56c:	0800f3a0 	.word	0x0800f3a0
 800e570:	0800e4dd 	.word	0x0800e4dd

0800e574 <__sfp>:
 800e574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e576:	4b1b      	ldr	r3, [pc, #108]	; (800e5e4 <__sfp+0x70>)
 800e578:	681e      	ldr	r6, [r3, #0]
 800e57a:	69b3      	ldr	r3, [r6, #24]
 800e57c:	4607      	mov	r7, r0
 800e57e:	b913      	cbnz	r3, 800e586 <__sfp+0x12>
 800e580:	4630      	mov	r0, r6
 800e582:	f7ff ffc7 	bl	800e514 <__sinit>
 800e586:	3648      	adds	r6, #72	; 0x48
 800e588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e58c:	3b01      	subs	r3, #1
 800e58e:	d503      	bpl.n	800e598 <__sfp+0x24>
 800e590:	6833      	ldr	r3, [r6, #0]
 800e592:	b133      	cbz	r3, 800e5a2 <__sfp+0x2e>
 800e594:	6836      	ldr	r6, [r6, #0]
 800e596:	e7f7      	b.n	800e588 <__sfp+0x14>
 800e598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e59c:	b16d      	cbz	r5, 800e5ba <__sfp+0x46>
 800e59e:	3468      	adds	r4, #104	; 0x68
 800e5a0:	e7f4      	b.n	800e58c <__sfp+0x18>
 800e5a2:	2104      	movs	r1, #4
 800e5a4:	4638      	mov	r0, r7
 800e5a6:	f7ff ff9f 	bl	800e4e8 <__sfmoreglue>
 800e5aa:	6030      	str	r0, [r6, #0]
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	d1f1      	bne.n	800e594 <__sfp+0x20>
 800e5b0:	230c      	movs	r3, #12
 800e5b2:	603b      	str	r3, [r7, #0]
 800e5b4:	4604      	mov	r4, r0
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5ba:	4b0b      	ldr	r3, [pc, #44]	; (800e5e8 <__sfp+0x74>)
 800e5bc:	6665      	str	r5, [r4, #100]	; 0x64
 800e5be:	e9c4 5500 	strd	r5, r5, [r4]
 800e5c2:	60a5      	str	r5, [r4, #8]
 800e5c4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e5c8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e5cc:	2208      	movs	r2, #8
 800e5ce:	4629      	mov	r1, r5
 800e5d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e5d4:	f7ff fe85 	bl	800e2e2 <memset>
 800e5d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e5dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e5e0:	e7e9      	b.n	800e5b6 <__sfp+0x42>
 800e5e2:	bf00      	nop
 800e5e4:	0800f3a0 	.word	0x0800f3a0
 800e5e8:	ffff0001 	.word	0xffff0001

0800e5ec <_fwalk_reent>:
 800e5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5f0:	4680      	mov	r8, r0
 800e5f2:	4689      	mov	r9, r1
 800e5f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e5f8:	2600      	movs	r6, #0
 800e5fa:	b914      	cbnz	r4, 800e602 <_fwalk_reent+0x16>
 800e5fc:	4630      	mov	r0, r6
 800e5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e602:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e606:	3f01      	subs	r7, #1
 800e608:	d501      	bpl.n	800e60e <_fwalk_reent+0x22>
 800e60a:	6824      	ldr	r4, [r4, #0]
 800e60c:	e7f5      	b.n	800e5fa <_fwalk_reent+0xe>
 800e60e:	89ab      	ldrh	r3, [r5, #12]
 800e610:	2b01      	cmp	r3, #1
 800e612:	d907      	bls.n	800e624 <_fwalk_reent+0x38>
 800e614:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e618:	3301      	adds	r3, #1
 800e61a:	d003      	beq.n	800e624 <_fwalk_reent+0x38>
 800e61c:	4629      	mov	r1, r5
 800e61e:	4640      	mov	r0, r8
 800e620:	47c8      	blx	r9
 800e622:	4306      	orrs	r6, r0
 800e624:	3568      	adds	r5, #104	; 0x68
 800e626:	e7ee      	b.n	800e606 <_fwalk_reent+0x1a>

0800e628 <__malloc_lock>:
 800e628:	4770      	bx	lr

0800e62a <__malloc_unlock>:
 800e62a:	4770      	bx	lr

0800e62c <__sfputc_r>:
 800e62c:	6893      	ldr	r3, [r2, #8]
 800e62e:	3b01      	subs	r3, #1
 800e630:	2b00      	cmp	r3, #0
 800e632:	b410      	push	{r4}
 800e634:	6093      	str	r3, [r2, #8]
 800e636:	da08      	bge.n	800e64a <__sfputc_r+0x1e>
 800e638:	6994      	ldr	r4, [r2, #24]
 800e63a:	42a3      	cmp	r3, r4
 800e63c:	db01      	blt.n	800e642 <__sfputc_r+0x16>
 800e63e:	290a      	cmp	r1, #10
 800e640:	d103      	bne.n	800e64a <__sfputc_r+0x1e>
 800e642:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e646:	f000 bafd 	b.w	800ec44 <__swbuf_r>
 800e64a:	6813      	ldr	r3, [r2, #0]
 800e64c:	1c58      	adds	r0, r3, #1
 800e64e:	6010      	str	r0, [r2, #0]
 800e650:	7019      	strb	r1, [r3, #0]
 800e652:	4608      	mov	r0, r1
 800e654:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e658:	4770      	bx	lr

0800e65a <__sfputs_r>:
 800e65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e65c:	4606      	mov	r6, r0
 800e65e:	460f      	mov	r7, r1
 800e660:	4614      	mov	r4, r2
 800e662:	18d5      	adds	r5, r2, r3
 800e664:	42ac      	cmp	r4, r5
 800e666:	d101      	bne.n	800e66c <__sfputs_r+0x12>
 800e668:	2000      	movs	r0, #0
 800e66a:	e007      	b.n	800e67c <__sfputs_r+0x22>
 800e66c:	463a      	mov	r2, r7
 800e66e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e672:	4630      	mov	r0, r6
 800e674:	f7ff ffda 	bl	800e62c <__sfputc_r>
 800e678:	1c43      	adds	r3, r0, #1
 800e67a:	d1f3      	bne.n	800e664 <__sfputs_r+0xa>
 800e67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e680 <_vfiprintf_r>:
 800e680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e684:	460c      	mov	r4, r1
 800e686:	b09d      	sub	sp, #116	; 0x74
 800e688:	4617      	mov	r7, r2
 800e68a:	461d      	mov	r5, r3
 800e68c:	4606      	mov	r6, r0
 800e68e:	b118      	cbz	r0, 800e698 <_vfiprintf_r+0x18>
 800e690:	6983      	ldr	r3, [r0, #24]
 800e692:	b90b      	cbnz	r3, 800e698 <_vfiprintf_r+0x18>
 800e694:	f7ff ff3e 	bl	800e514 <__sinit>
 800e698:	4b7c      	ldr	r3, [pc, #496]	; (800e88c <_vfiprintf_r+0x20c>)
 800e69a:	429c      	cmp	r4, r3
 800e69c:	d158      	bne.n	800e750 <_vfiprintf_r+0xd0>
 800e69e:	6874      	ldr	r4, [r6, #4]
 800e6a0:	89a3      	ldrh	r3, [r4, #12]
 800e6a2:	0718      	lsls	r0, r3, #28
 800e6a4:	d55e      	bpl.n	800e764 <_vfiprintf_r+0xe4>
 800e6a6:	6923      	ldr	r3, [r4, #16]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d05b      	beq.n	800e764 <_vfiprintf_r+0xe4>
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	9309      	str	r3, [sp, #36]	; 0x24
 800e6b0:	2320      	movs	r3, #32
 800e6b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e6b6:	2330      	movs	r3, #48	; 0x30
 800e6b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6bc:	9503      	str	r5, [sp, #12]
 800e6be:	f04f 0b01 	mov.w	fp, #1
 800e6c2:	46b8      	mov	r8, r7
 800e6c4:	4645      	mov	r5, r8
 800e6c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e6ca:	b10b      	cbz	r3, 800e6d0 <_vfiprintf_r+0x50>
 800e6cc:	2b25      	cmp	r3, #37	; 0x25
 800e6ce:	d154      	bne.n	800e77a <_vfiprintf_r+0xfa>
 800e6d0:	ebb8 0a07 	subs.w	sl, r8, r7
 800e6d4:	d00b      	beq.n	800e6ee <_vfiprintf_r+0x6e>
 800e6d6:	4653      	mov	r3, sl
 800e6d8:	463a      	mov	r2, r7
 800e6da:	4621      	mov	r1, r4
 800e6dc:	4630      	mov	r0, r6
 800e6de:	f7ff ffbc 	bl	800e65a <__sfputs_r>
 800e6e2:	3001      	adds	r0, #1
 800e6e4:	f000 80c2 	beq.w	800e86c <_vfiprintf_r+0x1ec>
 800e6e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6ea:	4453      	add	r3, sl
 800e6ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e6ee:	f898 3000 	ldrb.w	r3, [r8]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	f000 80ba 	beq.w	800e86c <_vfiprintf_r+0x1ec>
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e702:	9304      	str	r3, [sp, #16]
 800e704:	9307      	str	r3, [sp, #28]
 800e706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e70a:	931a      	str	r3, [sp, #104]	; 0x68
 800e70c:	46a8      	mov	r8, r5
 800e70e:	2205      	movs	r2, #5
 800e710:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e714:	485e      	ldr	r0, [pc, #376]	; (800e890 <_vfiprintf_r+0x210>)
 800e716:	f7f1 fde3 	bl	80002e0 <memchr>
 800e71a:	9b04      	ldr	r3, [sp, #16]
 800e71c:	bb78      	cbnz	r0, 800e77e <_vfiprintf_r+0xfe>
 800e71e:	06d9      	lsls	r1, r3, #27
 800e720:	bf44      	itt	mi
 800e722:	2220      	movmi	r2, #32
 800e724:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e728:	071a      	lsls	r2, r3, #28
 800e72a:	bf44      	itt	mi
 800e72c:	222b      	movmi	r2, #43	; 0x2b
 800e72e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e732:	782a      	ldrb	r2, [r5, #0]
 800e734:	2a2a      	cmp	r2, #42	; 0x2a
 800e736:	d02a      	beq.n	800e78e <_vfiprintf_r+0x10e>
 800e738:	9a07      	ldr	r2, [sp, #28]
 800e73a:	46a8      	mov	r8, r5
 800e73c:	2000      	movs	r0, #0
 800e73e:	250a      	movs	r5, #10
 800e740:	4641      	mov	r1, r8
 800e742:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e746:	3b30      	subs	r3, #48	; 0x30
 800e748:	2b09      	cmp	r3, #9
 800e74a:	d969      	bls.n	800e820 <_vfiprintf_r+0x1a0>
 800e74c:	b360      	cbz	r0, 800e7a8 <_vfiprintf_r+0x128>
 800e74e:	e024      	b.n	800e79a <_vfiprintf_r+0x11a>
 800e750:	4b50      	ldr	r3, [pc, #320]	; (800e894 <_vfiprintf_r+0x214>)
 800e752:	429c      	cmp	r4, r3
 800e754:	d101      	bne.n	800e75a <_vfiprintf_r+0xda>
 800e756:	68b4      	ldr	r4, [r6, #8]
 800e758:	e7a2      	b.n	800e6a0 <_vfiprintf_r+0x20>
 800e75a:	4b4f      	ldr	r3, [pc, #316]	; (800e898 <_vfiprintf_r+0x218>)
 800e75c:	429c      	cmp	r4, r3
 800e75e:	bf08      	it	eq
 800e760:	68f4      	ldreq	r4, [r6, #12]
 800e762:	e79d      	b.n	800e6a0 <_vfiprintf_r+0x20>
 800e764:	4621      	mov	r1, r4
 800e766:	4630      	mov	r0, r6
 800e768:	f000 fad0 	bl	800ed0c <__swsetup_r>
 800e76c:	2800      	cmp	r0, #0
 800e76e:	d09d      	beq.n	800e6ac <_vfiprintf_r+0x2c>
 800e770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e774:	b01d      	add	sp, #116	; 0x74
 800e776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e77a:	46a8      	mov	r8, r5
 800e77c:	e7a2      	b.n	800e6c4 <_vfiprintf_r+0x44>
 800e77e:	4a44      	ldr	r2, [pc, #272]	; (800e890 <_vfiprintf_r+0x210>)
 800e780:	1a80      	subs	r0, r0, r2
 800e782:	fa0b f000 	lsl.w	r0, fp, r0
 800e786:	4318      	orrs	r0, r3
 800e788:	9004      	str	r0, [sp, #16]
 800e78a:	4645      	mov	r5, r8
 800e78c:	e7be      	b.n	800e70c <_vfiprintf_r+0x8c>
 800e78e:	9a03      	ldr	r2, [sp, #12]
 800e790:	1d11      	adds	r1, r2, #4
 800e792:	6812      	ldr	r2, [r2, #0]
 800e794:	9103      	str	r1, [sp, #12]
 800e796:	2a00      	cmp	r2, #0
 800e798:	db01      	blt.n	800e79e <_vfiprintf_r+0x11e>
 800e79a:	9207      	str	r2, [sp, #28]
 800e79c:	e004      	b.n	800e7a8 <_vfiprintf_r+0x128>
 800e79e:	4252      	negs	r2, r2
 800e7a0:	f043 0302 	orr.w	r3, r3, #2
 800e7a4:	9207      	str	r2, [sp, #28]
 800e7a6:	9304      	str	r3, [sp, #16]
 800e7a8:	f898 3000 	ldrb.w	r3, [r8]
 800e7ac:	2b2e      	cmp	r3, #46	; 0x2e
 800e7ae:	d10e      	bne.n	800e7ce <_vfiprintf_r+0x14e>
 800e7b0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e7b4:	2b2a      	cmp	r3, #42	; 0x2a
 800e7b6:	d138      	bne.n	800e82a <_vfiprintf_r+0x1aa>
 800e7b8:	9b03      	ldr	r3, [sp, #12]
 800e7ba:	1d1a      	adds	r2, r3, #4
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	9203      	str	r2, [sp, #12]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	bfb8      	it	lt
 800e7c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e7c8:	f108 0802 	add.w	r8, r8, #2
 800e7cc:	9305      	str	r3, [sp, #20]
 800e7ce:	4d33      	ldr	r5, [pc, #204]	; (800e89c <_vfiprintf_r+0x21c>)
 800e7d0:	f898 1000 	ldrb.w	r1, [r8]
 800e7d4:	2203      	movs	r2, #3
 800e7d6:	4628      	mov	r0, r5
 800e7d8:	f7f1 fd82 	bl	80002e0 <memchr>
 800e7dc:	b140      	cbz	r0, 800e7f0 <_vfiprintf_r+0x170>
 800e7de:	2340      	movs	r3, #64	; 0x40
 800e7e0:	1b40      	subs	r0, r0, r5
 800e7e2:	fa03 f000 	lsl.w	r0, r3, r0
 800e7e6:	9b04      	ldr	r3, [sp, #16]
 800e7e8:	4303      	orrs	r3, r0
 800e7ea:	f108 0801 	add.w	r8, r8, #1
 800e7ee:	9304      	str	r3, [sp, #16]
 800e7f0:	f898 1000 	ldrb.w	r1, [r8]
 800e7f4:	482a      	ldr	r0, [pc, #168]	; (800e8a0 <_vfiprintf_r+0x220>)
 800e7f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7fa:	2206      	movs	r2, #6
 800e7fc:	f108 0701 	add.w	r7, r8, #1
 800e800:	f7f1 fd6e 	bl	80002e0 <memchr>
 800e804:	2800      	cmp	r0, #0
 800e806:	d037      	beq.n	800e878 <_vfiprintf_r+0x1f8>
 800e808:	4b26      	ldr	r3, [pc, #152]	; (800e8a4 <_vfiprintf_r+0x224>)
 800e80a:	bb1b      	cbnz	r3, 800e854 <_vfiprintf_r+0x1d4>
 800e80c:	9b03      	ldr	r3, [sp, #12]
 800e80e:	3307      	adds	r3, #7
 800e810:	f023 0307 	bic.w	r3, r3, #7
 800e814:	3308      	adds	r3, #8
 800e816:	9303      	str	r3, [sp, #12]
 800e818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e81a:	444b      	add	r3, r9
 800e81c:	9309      	str	r3, [sp, #36]	; 0x24
 800e81e:	e750      	b.n	800e6c2 <_vfiprintf_r+0x42>
 800e820:	fb05 3202 	mla	r2, r5, r2, r3
 800e824:	2001      	movs	r0, #1
 800e826:	4688      	mov	r8, r1
 800e828:	e78a      	b.n	800e740 <_vfiprintf_r+0xc0>
 800e82a:	2300      	movs	r3, #0
 800e82c:	f108 0801 	add.w	r8, r8, #1
 800e830:	9305      	str	r3, [sp, #20]
 800e832:	4619      	mov	r1, r3
 800e834:	250a      	movs	r5, #10
 800e836:	4640      	mov	r0, r8
 800e838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e83c:	3a30      	subs	r2, #48	; 0x30
 800e83e:	2a09      	cmp	r2, #9
 800e840:	d903      	bls.n	800e84a <_vfiprintf_r+0x1ca>
 800e842:	2b00      	cmp	r3, #0
 800e844:	d0c3      	beq.n	800e7ce <_vfiprintf_r+0x14e>
 800e846:	9105      	str	r1, [sp, #20]
 800e848:	e7c1      	b.n	800e7ce <_vfiprintf_r+0x14e>
 800e84a:	fb05 2101 	mla	r1, r5, r1, r2
 800e84e:	2301      	movs	r3, #1
 800e850:	4680      	mov	r8, r0
 800e852:	e7f0      	b.n	800e836 <_vfiprintf_r+0x1b6>
 800e854:	ab03      	add	r3, sp, #12
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	4622      	mov	r2, r4
 800e85a:	4b13      	ldr	r3, [pc, #76]	; (800e8a8 <_vfiprintf_r+0x228>)
 800e85c:	a904      	add	r1, sp, #16
 800e85e:	4630      	mov	r0, r6
 800e860:	f3af 8000 	nop.w
 800e864:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e868:	4681      	mov	r9, r0
 800e86a:	d1d5      	bne.n	800e818 <_vfiprintf_r+0x198>
 800e86c:	89a3      	ldrh	r3, [r4, #12]
 800e86e:	065b      	lsls	r3, r3, #25
 800e870:	f53f af7e 	bmi.w	800e770 <_vfiprintf_r+0xf0>
 800e874:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e876:	e77d      	b.n	800e774 <_vfiprintf_r+0xf4>
 800e878:	ab03      	add	r3, sp, #12
 800e87a:	9300      	str	r3, [sp, #0]
 800e87c:	4622      	mov	r2, r4
 800e87e:	4b0a      	ldr	r3, [pc, #40]	; (800e8a8 <_vfiprintf_r+0x228>)
 800e880:	a904      	add	r1, sp, #16
 800e882:	4630      	mov	r0, r6
 800e884:	f000 f888 	bl	800e998 <_printf_i>
 800e888:	e7ec      	b.n	800e864 <_vfiprintf_r+0x1e4>
 800e88a:	bf00      	nop
 800e88c:	0800f3c4 	.word	0x0800f3c4
 800e890:	0800f404 	.word	0x0800f404
 800e894:	0800f3e4 	.word	0x0800f3e4
 800e898:	0800f3a4 	.word	0x0800f3a4
 800e89c:	0800f40a 	.word	0x0800f40a
 800e8a0:	0800f40e 	.word	0x0800f40e
 800e8a4:	00000000 	.word	0x00000000
 800e8a8:	0800e65b 	.word	0x0800e65b

0800e8ac <_printf_common>:
 800e8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8b0:	4691      	mov	r9, r2
 800e8b2:	461f      	mov	r7, r3
 800e8b4:	688a      	ldr	r2, [r1, #8]
 800e8b6:	690b      	ldr	r3, [r1, #16]
 800e8b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	bfb8      	it	lt
 800e8c0:	4613      	movlt	r3, r2
 800e8c2:	f8c9 3000 	str.w	r3, [r9]
 800e8c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e8ca:	4606      	mov	r6, r0
 800e8cc:	460c      	mov	r4, r1
 800e8ce:	b112      	cbz	r2, 800e8d6 <_printf_common+0x2a>
 800e8d0:	3301      	adds	r3, #1
 800e8d2:	f8c9 3000 	str.w	r3, [r9]
 800e8d6:	6823      	ldr	r3, [r4, #0]
 800e8d8:	0699      	lsls	r1, r3, #26
 800e8da:	bf42      	ittt	mi
 800e8dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e8e0:	3302      	addmi	r3, #2
 800e8e2:	f8c9 3000 	strmi.w	r3, [r9]
 800e8e6:	6825      	ldr	r5, [r4, #0]
 800e8e8:	f015 0506 	ands.w	r5, r5, #6
 800e8ec:	d107      	bne.n	800e8fe <_printf_common+0x52>
 800e8ee:	f104 0a19 	add.w	sl, r4, #25
 800e8f2:	68e3      	ldr	r3, [r4, #12]
 800e8f4:	f8d9 2000 	ldr.w	r2, [r9]
 800e8f8:	1a9b      	subs	r3, r3, r2
 800e8fa:	42ab      	cmp	r3, r5
 800e8fc:	dc28      	bgt.n	800e950 <_printf_common+0xa4>
 800e8fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e902:	6822      	ldr	r2, [r4, #0]
 800e904:	3300      	adds	r3, #0
 800e906:	bf18      	it	ne
 800e908:	2301      	movne	r3, #1
 800e90a:	0692      	lsls	r2, r2, #26
 800e90c:	d42d      	bmi.n	800e96a <_printf_common+0xbe>
 800e90e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e912:	4639      	mov	r1, r7
 800e914:	4630      	mov	r0, r6
 800e916:	47c0      	blx	r8
 800e918:	3001      	adds	r0, #1
 800e91a:	d020      	beq.n	800e95e <_printf_common+0xb2>
 800e91c:	6823      	ldr	r3, [r4, #0]
 800e91e:	68e5      	ldr	r5, [r4, #12]
 800e920:	f8d9 2000 	ldr.w	r2, [r9]
 800e924:	f003 0306 	and.w	r3, r3, #6
 800e928:	2b04      	cmp	r3, #4
 800e92a:	bf08      	it	eq
 800e92c:	1aad      	subeq	r5, r5, r2
 800e92e:	68a3      	ldr	r3, [r4, #8]
 800e930:	6922      	ldr	r2, [r4, #16]
 800e932:	bf0c      	ite	eq
 800e934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e938:	2500      	movne	r5, #0
 800e93a:	4293      	cmp	r3, r2
 800e93c:	bfc4      	itt	gt
 800e93e:	1a9b      	subgt	r3, r3, r2
 800e940:	18ed      	addgt	r5, r5, r3
 800e942:	f04f 0900 	mov.w	r9, #0
 800e946:	341a      	adds	r4, #26
 800e948:	454d      	cmp	r5, r9
 800e94a:	d11a      	bne.n	800e982 <_printf_common+0xd6>
 800e94c:	2000      	movs	r0, #0
 800e94e:	e008      	b.n	800e962 <_printf_common+0xb6>
 800e950:	2301      	movs	r3, #1
 800e952:	4652      	mov	r2, sl
 800e954:	4639      	mov	r1, r7
 800e956:	4630      	mov	r0, r6
 800e958:	47c0      	blx	r8
 800e95a:	3001      	adds	r0, #1
 800e95c:	d103      	bne.n	800e966 <_printf_common+0xba>
 800e95e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e966:	3501      	adds	r5, #1
 800e968:	e7c3      	b.n	800e8f2 <_printf_common+0x46>
 800e96a:	18e1      	adds	r1, r4, r3
 800e96c:	1c5a      	adds	r2, r3, #1
 800e96e:	2030      	movs	r0, #48	; 0x30
 800e970:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e974:	4422      	add	r2, r4
 800e976:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e97a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e97e:	3302      	adds	r3, #2
 800e980:	e7c5      	b.n	800e90e <_printf_common+0x62>
 800e982:	2301      	movs	r3, #1
 800e984:	4622      	mov	r2, r4
 800e986:	4639      	mov	r1, r7
 800e988:	4630      	mov	r0, r6
 800e98a:	47c0      	blx	r8
 800e98c:	3001      	adds	r0, #1
 800e98e:	d0e6      	beq.n	800e95e <_printf_common+0xb2>
 800e990:	f109 0901 	add.w	r9, r9, #1
 800e994:	e7d8      	b.n	800e948 <_printf_common+0x9c>
	...

0800e998 <_printf_i>:
 800e998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e99c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e9a0:	460c      	mov	r4, r1
 800e9a2:	7e09      	ldrb	r1, [r1, #24]
 800e9a4:	b085      	sub	sp, #20
 800e9a6:	296e      	cmp	r1, #110	; 0x6e
 800e9a8:	4617      	mov	r7, r2
 800e9aa:	4606      	mov	r6, r0
 800e9ac:	4698      	mov	r8, r3
 800e9ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9b0:	f000 80b3 	beq.w	800eb1a <_printf_i+0x182>
 800e9b4:	d822      	bhi.n	800e9fc <_printf_i+0x64>
 800e9b6:	2963      	cmp	r1, #99	; 0x63
 800e9b8:	d036      	beq.n	800ea28 <_printf_i+0x90>
 800e9ba:	d80a      	bhi.n	800e9d2 <_printf_i+0x3a>
 800e9bc:	2900      	cmp	r1, #0
 800e9be:	f000 80b9 	beq.w	800eb34 <_printf_i+0x19c>
 800e9c2:	2958      	cmp	r1, #88	; 0x58
 800e9c4:	f000 8083 	beq.w	800eace <_printf_i+0x136>
 800e9c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e9cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e9d0:	e032      	b.n	800ea38 <_printf_i+0xa0>
 800e9d2:	2964      	cmp	r1, #100	; 0x64
 800e9d4:	d001      	beq.n	800e9da <_printf_i+0x42>
 800e9d6:	2969      	cmp	r1, #105	; 0x69
 800e9d8:	d1f6      	bne.n	800e9c8 <_printf_i+0x30>
 800e9da:	6820      	ldr	r0, [r4, #0]
 800e9dc:	6813      	ldr	r3, [r2, #0]
 800e9de:	0605      	lsls	r5, r0, #24
 800e9e0:	f103 0104 	add.w	r1, r3, #4
 800e9e4:	d52a      	bpl.n	800ea3c <_printf_i+0xa4>
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	6011      	str	r1, [r2, #0]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	da03      	bge.n	800e9f6 <_printf_i+0x5e>
 800e9ee:	222d      	movs	r2, #45	; 0x2d
 800e9f0:	425b      	negs	r3, r3
 800e9f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e9f6:	486f      	ldr	r0, [pc, #444]	; (800ebb4 <_printf_i+0x21c>)
 800e9f8:	220a      	movs	r2, #10
 800e9fa:	e039      	b.n	800ea70 <_printf_i+0xd8>
 800e9fc:	2973      	cmp	r1, #115	; 0x73
 800e9fe:	f000 809d 	beq.w	800eb3c <_printf_i+0x1a4>
 800ea02:	d808      	bhi.n	800ea16 <_printf_i+0x7e>
 800ea04:	296f      	cmp	r1, #111	; 0x6f
 800ea06:	d020      	beq.n	800ea4a <_printf_i+0xb2>
 800ea08:	2970      	cmp	r1, #112	; 0x70
 800ea0a:	d1dd      	bne.n	800e9c8 <_printf_i+0x30>
 800ea0c:	6823      	ldr	r3, [r4, #0]
 800ea0e:	f043 0320 	orr.w	r3, r3, #32
 800ea12:	6023      	str	r3, [r4, #0]
 800ea14:	e003      	b.n	800ea1e <_printf_i+0x86>
 800ea16:	2975      	cmp	r1, #117	; 0x75
 800ea18:	d017      	beq.n	800ea4a <_printf_i+0xb2>
 800ea1a:	2978      	cmp	r1, #120	; 0x78
 800ea1c:	d1d4      	bne.n	800e9c8 <_printf_i+0x30>
 800ea1e:	2378      	movs	r3, #120	; 0x78
 800ea20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ea24:	4864      	ldr	r0, [pc, #400]	; (800ebb8 <_printf_i+0x220>)
 800ea26:	e055      	b.n	800ead4 <_printf_i+0x13c>
 800ea28:	6813      	ldr	r3, [r2, #0]
 800ea2a:	1d19      	adds	r1, r3, #4
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	6011      	str	r1, [r2, #0]
 800ea30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea38:	2301      	movs	r3, #1
 800ea3a:	e08c      	b.n	800eb56 <_printf_i+0x1be>
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	6011      	str	r1, [r2, #0]
 800ea40:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ea44:	bf18      	it	ne
 800ea46:	b21b      	sxthne	r3, r3
 800ea48:	e7cf      	b.n	800e9ea <_printf_i+0x52>
 800ea4a:	6813      	ldr	r3, [r2, #0]
 800ea4c:	6825      	ldr	r5, [r4, #0]
 800ea4e:	1d18      	adds	r0, r3, #4
 800ea50:	6010      	str	r0, [r2, #0]
 800ea52:	0628      	lsls	r0, r5, #24
 800ea54:	d501      	bpl.n	800ea5a <_printf_i+0xc2>
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	e002      	b.n	800ea60 <_printf_i+0xc8>
 800ea5a:	0668      	lsls	r0, r5, #25
 800ea5c:	d5fb      	bpl.n	800ea56 <_printf_i+0xbe>
 800ea5e:	881b      	ldrh	r3, [r3, #0]
 800ea60:	4854      	ldr	r0, [pc, #336]	; (800ebb4 <_printf_i+0x21c>)
 800ea62:	296f      	cmp	r1, #111	; 0x6f
 800ea64:	bf14      	ite	ne
 800ea66:	220a      	movne	r2, #10
 800ea68:	2208      	moveq	r2, #8
 800ea6a:	2100      	movs	r1, #0
 800ea6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea70:	6865      	ldr	r5, [r4, #4]
 800ea72:	60a5      	str	r5, [r4, #8]
 800ea74:	2d00      	cmp	r5, #0
 800ea76:	f2c0 8095 	blt.w	800eba4 <_printf_i+0x20c>
 800ea7a:	6821      	ldr	r1, [r4, #0]
 800ea7c:	f021 0104 	bic.w	r1, r1, #4
 800ea80:	6021      	str	r1, [r4, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d13d      	bne.n	800eb02 <_printf_i+0x16a>
 800ea86:	2d00      	cmp	r5, #0
 800ea88:	f040 808e 	bne.w	800eba8 <_printf_i+0x210>
 800ea8c:	4665      	mov	r5, ip
 800ea8e:	2a08      	cmp	r2, #8
 800ea90:	d10b      	bne.n	800eaaa <_printf_i+0x112>
 800ea92:	6823      	ldr	r3, [r4, #0]
 800ea94:	07db      	lsls	r3, r3, #31
 800ea96:	d508      	bpl.n	800eaaa <_printf_i+0x112>
 800ea98:	6923      	ldr	r3, [r4, #16]
 800ea9a:	6862      	ldr	r2, [r4, #4]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	bfde      	ittt	le
 800eaa0:	2330      	movle	r3, #48	; 0x30
 800eaa2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eaa6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800eaaa:	ebac 0305 	sub.w	r3, ip, r5
 800eaae:	6123      	str	r3, [r4, #16]
 800eab0:	f8cd 8000 	str.w	r8, [sp]
 800eab4:	463b      	mov	r3, r7
 800eab6:	aa03      	add	r2, sp, #12
 800eab8:	4621      	mov	r1, r4
 800eaba:	4630      	mov	r0, r6
 800eabc:	f7ff fef6 	bl	800e8ac <_printf_common>
 800eac0:	3001      	adds	r0, #1
 800eac2:	d14d      	bne.n	800eb60 <_printf_i+0x1c8>
 800eac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eac8:	b005      	add	sp, #20
 800eaca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eace:	4839      	ldr	r0, [pc, #228]	; (800ebb4 <_printf_i+0x21c>)
 800ead0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ead4:	6813      	ldr	r3, [r2, #0]
 800ead6:	6821      	ldr	r1, [r4, #0]
 800ead8:	1d1d      	adds	r5, r3, #4
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	6015      	str	r5, [r2, #0]
 800eade:	060a      	lsls	r2, r1, #24
 800eae0:	d50b      	bpl.n	800eafa <_printf_i+0x162>
 800eae2:	07ca      	lsls	r2, r1, #31
 800eae4:	bf44      	itt	mi
 800eae6:	f041 0120 	orrmi.w	r1, r1, #32
 800eaea:	6021      	strmi	r1, [r4, #0]
 800eaec:	b91b      	cbnz	r3, 800eaf6 <_printf_i+0x15e>
 800eaee:	6822      	ldr	r2, [r4, #0]
 800eaf0:	f022 0220 	bic.w	r2, r2, #32
 800eaf4:	6022      	str	r2, [r4, #0]
 800eaf6:	2210      	movs	r2, #16
 800eaf8:	e7b7      	b.n	800ea6a <_printf_i+0xd2>
 800eafa:	064d      	lsls	r5, r1, #25
 800eafc:	bf48      	it	mi
 800eafe:	b29b      	uxthmi	r3, r3
 800eb00:	e7ef      	b.n	800eae2 <_printf_i+0x14a>
 800eb02:	4665      	mov	r5, ip
 800eb04:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb08:	fb02 3311 	mls	r3, r2, r1, r3
 800eb0c:	5cc3      	ldrb	r3, [r0, r3]
 800eb0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800eb12:	460b      	mov	r3, r1
 800eb14:	2900      	cmp	r1, #0
 800eb16:	d1f5      	bne.n	800eb04 <_printf_i+0x16c>
 800eb18:	e7b9      	b.n	800ea8e <_printf_i+0xf6>
 800eb1a:	6813      	ldr	r3, [r2, #0]
 800eb1c:	6825      	ldr	r5, [r4, #0]
 800eb1e:	6961      	ldr	r1, [r4, #20]
 800eb20:	1d18      	adds	r0, r3, #4
 800eb22:	6010      	str	r0, [r2, #0]
 800eb24:	0628      	lsls	r0, r5, #24
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	d501      	bpl.n	800eb2e <_printf_i+0x196>
 800eb2a:	6019      	str	r1, [r3, #0]
 800eb2c:	e002      	b.n	800eb34 <_printf_i+0x19c>
 800eb2e:	066a      	lsls	r2, r5, #25
 800eb30:	d5fb      	bpl.n	800eb2a <_printf_i+0x192>
 800eb32:	8019      	strh	r1, [r3, #0]
 800eb34:	2300      	movs	r3, #0
 800eb36:	6123      	str	r3, [r4, #16]
 800eb38:	4665      	mov	r5, ip
 800eb3a:	e7b9      	b.n	800eab0 <_printf_i+0x118>
 800eb3c:	6813      	ldr	r3, [r2, #0]
 800eb3e:	1d19      	adds	r1, r3, #4
 800eb40:	6011      	str	r1, [r2, #0]
 800eb42:	681d      	ldr	r5, [r3, #0]
 800eb44:	6862      	ldr	r2, [r4, #4]
 800eb46:	2100      	movs	r1, #0
 800eb48:	4628      	mov	r0, r5
 800eb4a:	f7f1 fbc9 	bl	80002e0 <memchr>
 800eb4e:	b108      	cbz	r0, 800eb54 <_printf_i+0x1bc>
 800eb50:	1b40      	subs	r0, r0, r5
 800eb52:	6060      	str	r0, [r4, #4]
 800eb54:	6863      	ldr	r3, [r4, #4]
 800eb56:	6123      	str	r3, [r4, #16]
 800eb58:	2300      	movs	r3, #0
 800eb5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb5e:	e7a7      	b.n	800eab0 <_printf_i+0x118>
 800eb60:	6923      	ldr	r3, [r4, #16]
 800eb62:	462a      	mov	r2, r5
 800eb64:	4639      	mov	r1, r7
 800eb66:	4630      	mov	r0, r6
 800eb68:	47c0      	blx	r8
 800eb6a:	3001      	adds	r0, #1
 800eb6c:	d0aa      	beq.n	800eac4 <_printf_i+0x12c>
 800eb6e:	6823      	ldr	r3, [r4, #0]
 800eb70:	079b      	lsls	r3, r3, #30
 800eb72:	d413      	bmi.n	800eb9c <_printf_i+0x204>
 800eb74:	68e0      	ldr	r0, [r4, #12]
 800eb76:	9b03      	ldr	r3, [sp, #12]
 800eb78:	4298      	cmp	r0, r3
 800eb7a:	bfb8      	it	lt
 800eb7c:	4618      	movlt	r0, r3
 800eb7e:	e7a3      	b.n	800eac8 <_printf_i+0x130>
 800eb80:	2301      	movs	r3, #1
 800eb82:	464a      	mov	r2, r9
 800eb84:	4639      	mov	r1, r7
 800eb86:	4630      	mov	r0, r6
 800eb88:	47c0      	blx	r8
 800eb8a:	3001      	adds	r0, #1
 800eb8c:	d09a      	beq.n	800eac4 <_printf_i+0x12c>
 800eb8e:	3501      	adds	r5, #1
 800eb90:	68e3      	ldr	r3, [r4, #12]
 800eb92:	9a03      	ldr	r2, [sp, #12]
 800eb94:	1a9b      	subs	r3, r3, r2
 800eb96:	42ab      	cmp	r3, r5
 800eb98:	dcf2      	bgt.n	800eb80 <_printf_i+0x1e8>
 800eb9a:	e7eb      	b.n	800eb74 <_printf_i+0x1dc>
 800eb9c:	2500      	movs	r5, #0
 800eb9e:	f104 0919 	add.w	r9, r4, #25
 800eba2:	e7f5      	b.n	800eb90 <_printf_i+0x1f8>
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d1ac      	bne.n	800eb02 <_printf_i+0x16a>
 800eba8:	7803      	ldrb	r3, [r0, #0]
 800ebaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ebae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebb2:	e76c      	b.n	800ea8e <_printf_i+0xf6>
 800ebb4:	0800f415 	.word	0x0800f415
 800ebb8:	0800f426 	.word	0x0800f426

0800ebbc <__sread>:
 800ebbc:	b510      	push	{r4, lr}
 800ebbe:	460c      	mov	r4, r1
 800ebc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebc4:	f000 fa46 	bl	800f054 <_read_r>
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	bfab      	itete	ge
 800ebcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ebce:	89a3      	ldrhlt	r3, [r4, #12]
 800ebd0:	181b      	addge	r3, r3, r0
 800ebd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ebd6:	bfac      	ite	ge
 800ebd8:	6563      	strge	r3, [r4, #84]	; 0x54
 800ebda:	81a3      	strhlt	r3, [r4, #12]
 800ebdc:	bd10      	pop	{r4, pc}

0800ebde <__swrite>:
 800ebde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe2:	461f      	mov	r7, r3
 800ebe4:	898b      	ldrh	r3, [r1, #12]
 800ebe6:	05db      	lsls	r3, r3, #23
 800ebe8:	4605      	mov	r5, r0
 800ebea:	460c      	mov	r4, r1
 800ebec:	4616      	mov	r6, r2
 800ebee:	d505      	bpl.n	800ebfc <__swrite+0x1e>
 800ebf0:	2302      	movs	r3, #2
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebf8:	f000 f9b6 	bl	800ef68 <_lseek_r>
 800ebfc:	89a3      	ldrh	r3, [r4, #12]
 800ebfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec06:	81a3      	strh	r3, [r4, #12]
 800ec08:	4632      	mov	r2, r6
 800ec0a:	463b      	mov	r3, r7
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec12:	f000 b869 	b.w	800ece8 <_write_r>

0800ec16 <__sseek>:
 800ec16:	b510      	push	{r4, lr}
 800ec18:	460c      	mov	r4, r1
 800ec1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec1e:	f000 f9a3 	bl	800ef68 <_lseek_r>
 800ec22:	1c43      	adds	r3, r0, #1
 800ec24:	89a3      	ldrh	r3, [r4, #12]
 800ec26:	bf15      	itete	ne
 800ec28:	6560      	strne	r0, [r4, #84]	; 0x54
 800ec2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ec32:	81a3      	strheq	r3, [r4, #12]
 800ec34:	bf18      	it	ne
 800ec36:	81a3      	strhne	r3, [r4, #12]
 800ec38:	bd10      	pop	{r4, pc}

0800ec3a <__sclose>:
 800ec3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec3e:	f000 b8d3 	b.w	800ede8 <_close_r>
	...

0800ec44 <__swbuf_r>:
 800ec44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec46:	460e      	mov	r6, r1
 800ec48:	4614      	mov	r4, r2
 800ec4a:	4605      	mov	r5, r0
 800ec4c:	b118      	cbz	r0, 800ec56 <__swbuf_r+0x12>
 800ec4e:	6983      	ldr	r3, [r0, #24]
 800ec50:	b90b      	cbnz	r3, 800ec56 <__swbuf_r+0x12>
 800ec52:	f7ff fc5f 	bl	800e514 <__sinit>
 800ec56:	4b21      	ldr	r3, [pc, #132]	; (800ecdc <__swbuf_r+0x98>)
 800ec58:	429c      	cmp	r4, r3
 800ec5a:	d12a      	bne.n	800ecb2 <__swbuf_r+0x6e>
 800ec5c:	686c      	ldr	r4, [r5, #4]
 800ec5e:	69a3      	ldr	r3, [r4, #24]
 800ec60:	60a3      	str	r3, [r4, #8]
 800ec62:	89a3      	ldrh	r3, [r4, #12]
 800ec64:	071a      	lsls	r2, r3, #28
 800ec66:	d52e      	bpl.n	800ecc6 <__swbuf_r+0x82>
 800ec68:	6923      	ldr	r3, [r4, #16]
 800ec6a:	b363      	cbz	r3, 800ecc6 <__swbuf_r+0x82>
 800ec6c:	6923      	ldr	r3, [r4, #16]
 800ec6e:	6820      	ldr	r0, [r4, #0]
 800ec70:	1ac0      	subs	r0, r0, r3
 800ec72:	6963      	ldr	r3, [r4, #20]
 800ec74:	b2f6      	uxtb	r6, r6
 800ec76:	4283      	cmp	r3, r0
 800ec78:	4637      	mov	r7, r6
 800ec7a:	dc04      	bgt.n	800ec86 <__swbuf_r+0x42>
 800ec7c:	4621      	mov	r1, r4
 800ec7e:	4628      	mov	r0, r5
 800ec80:	f000 f948 	bl	800ef14 <_fflush_r>
 800ec84:	bb28      	cbnz	r0, 800ecd2 <__swbuf_r+0x8e>
 800ec86:	68a3      	ldr	r3, [r4, #8]
 800ec88:	3b01      	subs	r3, #1
 800ec8a:	60a3      	str	r3, [r4, #8]
 800ec8c:	6823      	ldr	r3, [r4, #0]
 800ec8e:	1c5a      	adds	r2, r3, #1
 800ec90:	6022      	str	r2, [r4, #0]
 800ec92:	701e      	strb	r6, [r3, #0]
 800ec94:	6963      	ldr	r3, [r4, #20]
 800ec96:	3001      	adds	r0, #1
 800ec98:	4283      	cmp	r3, r0
 800ec9a:	d004      	beq.n	800eca6 <__swbuf_r+0x62>
 800ec9c:	89a3      	ldrh	r3, [r4, #12]
 800ec9e:	07db      	lsls	r3, r3, #31
 800eca0:	d519      	bpl.n	800ecd6 <__swbuf_r+0x92>
 800eca2:	2e0a      	cmp	r6, #10
 800eca4:	d117      	bne.n	800ecd6 <__swbuf_r+0x92>
 800eca6:	4621      	mov	r1, r4
 800eca8:	4628      	mov	r0, r5
 800ecaa:	f000 f933 	bl	800ef14 <_fflush_r>
 800ecae:	b190      	cbz	r0, 800ecd6 <__swbuf_r+0x92>
 800ecb0:	e00f      	b.n	800ecd2 <__swbuf_r+0x8e>
 800ecb2:	4b0b      	ldr	r3, [pc, #44]	; (800ece0 <__swbuf_r+0x9c>)
 800ecb4:	429c      	cmp	r4, r3
 800ecb6:	d101      	bne.n	800ecbc <__swbuf_r+0x78>
 800ecb8:	68ac      	ldr	r4, [r5, #8]
 800ecba:	e7d0      	b.n	800ec5e <__swbuf_r+0x1a>
 800ecbc:	4b09      	ldr	r3, [pc, #36]	; (800ece4 <__swbuf_r+0xa0>)
 800ecbe:	429c      	cmp	r4, r3
 800ecc0:	bf08      	it	eq
 800ecc2:	68ec      	ldreq	r4, [r5, #12]
 800ecc4:	e7cb      	b.n	800ec5e <__swbuf_r+0x1a>
 800ecc6:	4621      	mov	r1, r4
 800ecc8:	4628      	mov	r0, r5
 800ecca:	f000 f81f 	bl	800ed0c <__swsetup_r>
 800ecce:	2800      	cmp	r0, #0
 800ecd0:	d0cc      	beq.n	800ec6c <__swbuf_r+0x28>
 800ecd2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ecd6:	4638      	mov	r0, r7
 800ecd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	0800f3c4 	.word	0x0800f3c4
 800ece0:	0800f3e4 	.word	0x0800f3e4
 800ece4:	0800f3a4 	.word	0x0800f3a4

0800ece8 <_write_r>:
 800ece8:	b538      	push	{r3, r4, r5, lr}
 800ecea:	4c07      	ldr	r4, [pc, #28]	; (800ed08 <_write_r+0x20>)
 800ecec:	4605      	mov	r5, r0
 800ecee:	4608      	mov	r0, r1
 800ecf0:	4611      	mov	r1, r2
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	6022      	str	r2, [r4, #0]
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	f7fe ffaa 	bl	800dc50 <_write>
 800ecfc:	1c43      	adds	r3, r0, #1
 800ecfe:	d102      	bne.n	800ed06 <_write_r+0x1e>
 800ed00:	6823      	ldr	r3, [r4, #0]
 800ed02:	b103      	cbz	r3, 800ed06 <_write_r+0x1e>
 800ed04:	602b      	str	r3, [r5, #0]
 800ed06:	bd38      	pop	{r3, r4, r5, pc}
 800ed08:	200076b8 	.word	0x200076b8

0800ed0c <__swsetup_r>:
 800ed0c:	4b32      	ldr	r3, [pc, #200]	; (800edd8 <__swsetup_r+0xcc>)
 800ed0e:	b570      	push	{r4, r5, r6, lr}
 800ed10:	681d      	ldr	r5, [r3, #0]
 800ed12:	4606      	mov	r6, r0
 800ed14:	460c      	mov	r4, r1
 800ed16:	b125      	cbz	r5, 800ed22 <__swsetup_r+0x16>
 800ed18:	69ab      	ldr	r3, [r5, #24]
 800ed1a:	b913      	cbnz	r3, 800ed22 <__swsetup_r+0x16>
 800ed1c:	4628      	mov	r0, r5
 800ed1e:	f7ff fbf9 	bl	800e514 <__sinit>
 800ed22:	4b2e      	ldr	r3, [pc, #184]	; (800eddc <__swsetup_r+0xd0>)
 800ed24:	429c      	cmp	r4, r3
 800ed26:	d10f      	bne.n	800ed48 <__swsetup_r+0x3c>
 800ed28:	686c      	ldr	r4, [r5, #4]
 800ed2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed2e:	b29a      	uxth	r2, r3
 800ed30:	0715      	lsls	r5, r2, #28
 800ed32:	d42c      	bmi.n	800ed8e <__swsetup_r+0x82>
 800ed34:	06d0      	lsls	r0, r2, #27
 800ed36:	d411      	bmi.n	800ed5c <__swsetup_r+0x50>
 800ed38:	2209      	movs	r2, #9
 800ed3a:	6032      	str	r2, [r6, #0]
 800ed3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed40:	81a3      	strh	r3, [r4, #12]
 800ed42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed46:	e03e      	b.n	800edc6 <__swsetup_r+0xba>
 800ed48:	4b25      	ldr	r3, [pc, #148]	; (800ede0 <__swsetup_r+0xd4>)
 800ed4a:	429c      	cmp	r4, r3
 800ed4c:	d101      	bne.n	800ed52 <__swsetup_r+0x46>
 800ed4e:	68ac      	ldr	r4, [r5, #8]
 800ed50:	e7eb      	b.n	800ed2a <__swsetup_r+0x1e>
 800ed52:	4b24      	ldr	r3, [pc, #144]	; (800ede4 <__swsetup_r+0xd8>)
 800ed54:	429c      	cmp	r4, r3
 800ed56:	bf08      	it	eq
 800ed58:	68ec      	ldreq	r4, [r5, #12]
 800ed5a:	e7e6      	b.n	800ed2a <__swsetup_r+0x1e>
 800ed5c:	0751      	lsls	r1, r2, #29
 800ed5e:	d512      	bpl.n	800ed86 <__swsetup_r+0x7a>
 800ed60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed62:	b141      	cbz	r1, 800ed76 <__swsetup_r+0x6a>
 800ed64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed68:	4299      	cmp	r1, r3
 800ed6a:	d002      	beq.n	800ed72 <__swsetup_r+0x66>
 800ed6c:	4630      	mov	r0, r6
 800ed6e:	f7ff fac1 	bl	800e2f4 <_free_r>
 800ed72:	2300      	movs	r3, #0
 800ed74:	6363      	str	r3, [r4, #52]	; 0x34
 800ed76:	89a3      	ldrh	r3, [r4, #12]
 800ed78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ed7c:	81a3      	strh	r3, [r4, #12]
 800ed7e:	2300      	movs	r3, #0
 800ed80:	6063      	str	r3, [r4, #4]
 800ed82:	6923      	ldr	r3, [r4, #16]
 800ed84:	6023      	str	r3, [r4, #0]
 800ed86:	89a3      	ldrh	r3, [r4, #12]
 800ed88:	f043 0308 	orr.w	r3, r3, #8
 800ed8c:	81a3      	strh	r3, [r4, #12]
 800ed8e:	6923      	ldr	r3, [r4, #16]
 800ed90:	b94b      	cbnz	r3, 800eda6 <__swsetup_r+0x9a>
 800ed92:	89a3      	ldrh	r3, [r4, #12]
 800ed94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ed98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed9c:	d003      	beq.n	800eda6 <__swsetup_r+0x9a>
 800ed9e:	4621      	mov	r1, r4
 800eda0:	4630      	mov	r0, r6
 800eda2:	f000 f917 	bl	800efd4 <__smakebuf_r>
 800eda6:	89a2      	ldrh	r2, [r4, #12]
 800eda8:	f012 0301 	ands.w	r3, r2, #1
 800edac:	d00c      	beq.n	800edc8 <__swsetup_r+0xbc>
 800edae:	2300      	movs	r3, #0
 800edb0:	60a3      	str	r3, [r4, #8]
 800edb2:	6963      	ldr	r3, [r4, #20]
 800edb4:	425b      	negs	r3, r3
 800edb6:	61a3      	str	r3, [r4, #24]
 800edb8:	6923      	ldr	r3, [r4, #16]
 800edba:	b953      	cbnz	r3, 800edd2 <__swsetup_r+0xc6>
 800edbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edc0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800edc4:	d1ba      	bne.n	800ed3c <__swsetup_r+0x30>
 800edc6:	bd70      	pop	{r4, r5, r6, pc}
 800edc8:	0792      	lsls	r2, r2, #30
 800edca:	bf58      	it	pl
 800edcc:	6963      	ldrpl	r3, [r4, #20]
 800edce:	60a3      	str	r3, [r4, #8]
 800edd0:	e7f2      	b.n	800edb8 <__swsetup_r+0xac>
 800edd2:	2000      	movs	r0, #0
 800edd4:	e7f7      	b.n	800edc6 <__swsetup_r+0xba>
 800edd6:	bf00      	nop
 800edd8:	200001fc 	.word	0x200001fc
 800eddc:	0800f3c4 	.word	0x0800f3c4
 800ede0:	0800f3e4 	.word	0x0800f3e4
 800ede4:	0800f3a4 	.word	0x0800f3a4

0800ede8 <_close_r>:
 800ede8:	b538      	push	{r3, r4, r5, lr}
 800edea:	4c06      	ldr	r4, [pc, #24]	; (800ee04 <_close_r+0x1c>)
 800edec:	2300      	movs	r3, #0
 800edee:	4605      	mov	r5, r0
 800edf0:	4608      	mov	r0, r1
 800edf2:	6023      	str	r3, [r4, #0]
 800edf4:	f7fe ff58 	bl	800dca8 <_close>
 800edf8:	1c43      	adds	r3, r0, #1
 800edfa:	d102      	bne.n	800ee02 <_close_r+0x1a>
 800edfc:	6823      	ldr	r3, [r4, #0]
 800edfe:	b103      	cbz	r3, 800ee02 <_close_r+0x1a>
 800ee00:	602b      	str	r3, [r5, #0]
 800ee02:	bd38      	pop	{r3, r4, r5, pc}
 800ee04:	200076b8 	.word	0x200076b8

0800ee08 <__sflush_r>:
 800ee08:	898a      	ldrh	r2, [r1, #12]
 800ee0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0e:	4605      	mov	r5, r0
 800ee10:	0710      	lsls	r0, r2, #28
 800ee12:	460c      	mov	r4, r1
 800ee14:	d458      	bmi.n	800eec8 <__sflush_r+0xc0>
 800ee16:	684b      	ldr	r3, [r1, #4]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	dc05      	bgt.n	800ee28 <__sflush_r+0x20>
 800ee1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	dc02      	bgt.n	800ee28 <__sflush_r+0x20>
 800ee22:	2000      	movs	r0, #0
 800ee24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee2a:	2e00      	cmp	r6, #0
 800ee2c:	d0f9      	beq.n	800ee22 <__sflush_r+0x1a>
 800ee2e:	2300      	movs	r3, #0
 800ee30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ee34:	682f      	ldr	r7, [r5, #0]
 800ee36:	6a21      	ldr	r1, [r4, #32]
 800ee38:	602b      	str	r3, [r5, #0]
 800ee3a:	d032      	beq.n	800eea2 <__sflush_r+0x9a>
 800ee3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ee3e:	89a3      	ldrh	r3, [r4, #12]
 800ee40:	075a      	lsls	r2, r3, #29
 800ee42:	d505      	bpl.n	800ee50 <__sflush_r+0x48>
 800ee44:	6863      	ldr	r3, [r4, #4]
 800ee46:	1ac0      	subs	r0, r0, r3
 800ee48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee4a:	b10b      	cbz	r3, 800ee50 <__sflush_r+0x48>
 800ee4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ee4e:	1ac0      	subs	r0, r0, r3
 800ee50:	2300      	movs	r3, #0
 800ee52:	4602      	mov	r2, r0
 800ee54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee56:	6a21      	ldr	r1, [r4, #32]
 800ee58:	4628      	mov	r0, r5
 800ee5a:	47b0      	blx	r6
 800ee5c:	1c43      	adds	r3, r0, #1
 800ee5e:	89a3      	ldrh	r3, [r4, #12]
 800ee60:	d106      	bne.n	800ee70 <__sflush_r+0x68>
 800ee62:	6829      	ldr	r1, [r5, #0]
 800ee64:	291d      	cmp	r1, #29
 800ee66:	d848      	bhi.n	800eefa <__sflush_r+0xf2>
 800ee68:	4a29      	ldr	r2, [pc, #164]	; (800ef10 <__sflush_r+0x108>)
 800ee6a:	40ca      	lsrs	r2, r1
 800ee6c:	07d6      	lsls	r6, r2, #31
 800ee6e:	d544      	bpl.n	800eefa <__sflush_r+0xf2>
 800ee70:	2200      	movs	r2, #0
 800ee72:	6062      	str	r2, [r4, #4]
 800ee74:	04d9      	lsls	r1, r3, #19
 800ee76:	6922      	ldr	r2, [r4, #16]
 800ee78:	6022      	str	r2, [r4, #0]
 800ee7a:	d504      	bpl.n	800ee86 <__sflush_r+0x7e>
 800ee7c:	1c42      	adds	r2, r0, #1
 800ee7e:	d101      	bne.n	800ee84 <__sflush_r+0x7c>
 800ee80:	682b      	ldr	r3, [r5, #0]
 800ee82:	b903      	cbnz	r3, 800ee86 <__sflush_r+0x7e>
 800ee84:	6560      	str	r0, [r4, #84]	; 0x54
 800ee86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee88:	602f      	str	r7, [r5, #0]
 800ee8a:	2900      	cmp	r1, #0
 800ee8c:	d0c9      	beq.n	800ee22 <__sflush_r+0x1a>
 800ee8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee92:	4299      	cmp	r1, r3
 800ee94:	d002      	beq.n	800ee9c <__sflush_r+0x94>
 800ee96:	4628      	mov	r0, r5
 800ee98:	f7ff fa2c 	bl	800e2f4 <_free_r>
 800ee9c:	2000      	movs	r0, #0
 800ee9e:	6360      	str	r0, [r4, #52]	; 0x34
 800eea0:	e7c0      	b.n	800ee24 <__sflush_r+0x1c>
 800eea2:	2301      	movs	r3, #1
 800eea4:	4628      	mov	r0, r5
 800eea6:	47b0      	blx	r6
 800eea8:	1c41      	adds	r1, r0, #1
 800eeaa:	d1c8      	bne.n	800ee3e <__sflush_r+0x36>
 800eeac:	682b      	ldr	r3, [r5, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d0c5      	beq.n	800ee3e <__sflush_r+0x36>
 800eeb2:	2b1d      	cmp	r3, #29
 800eeb4:	d001      	beq.n	800eeba <__sflush_r+0xb2>
 800eeb6:	2b16      	cmp	r3, #22
 800eeb8:	d101      	bne.n	800eebe <__sflush_r+0xb6>
 800eeba:	602f      	str	r7, [r5, #0]
 800eebc:	e7b1      	b.n	800ee22 <__sflush_r+0x1a>
 800eebe:	89a3      	ldrh	r3, [r4, #12]
 800eec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eec4:	81a3      	strh	r3, [r4, #12]
 800eec6:	e7ad      	b.n	800ee24 <__sflush_r+0x1c>
 800eec8:	690f      	ldr	r7, [r1, #16]
 800eeca:	2f00      	cmp	r7, #0
 800eecc:	d0a9      	beq.n	800ee22 <__sflush_r+0x1a>
 800eece:	0793      	lsls	r3, r2, #30
 800eed0:	680e      	ldr	r6, [r1, #0]
 800eed2:	bf08      	it	eq
 800eed4:	694b      	ldreq	r3, [r1, #20]
 800eed6:	600f      	str	r7, [r1, #0]
 800eed8:	bf18      	it	ne
 800eeda:	2300      	movne	r3, #0
 800eedc:	eba6 0807 	sub.w	r8, r6, r7
 800eee0:	608b      	str	r3, [r1, #8]
 800eee2:	f1b8 0f00 	cmp.w	r8, #0
 800eee6:	dd9c      	ble.n	800ee22 <__sflush_r+0x1a>
 800eee8:	4643      	mov	r3, r8
 800eeea:	463a      	mov	r2, r7
 800eeec:	6a21      	ldr	r1, [r4, #32]
 800eeee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eef0:	4628      	mov	r0, r5
 800eef2:	47b0      	blx	r6
 800eef4:	2800      	cmp	r0, #0
 800eef6:	dc06      	bgt.n	800ef06 <__sflush_r+0xfe>
 800eef8:	89a3      	ldrh	r3, [r4, #12]
 800eefa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eefe:	81a3      	strh	r3, [r4, #12]
 800ef00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef04:	e78e      	b.n	800ee24 <__sflush_r+0x1c>
 800ef06:	4407      	add	r7, r0
 800ef08:	eba8 0800 	sub.w	r8, r8, r0
 800ef0c:	e7e9      	b.n	800eee2 <__sflush_r+0xda>
 800ef0e:	bf00      	nop
 800ef10:	20400001 	.word	0x20400001

0800ef14 <_fflush_r>:
 800ef14:	b538      	push	{r3, r4, r5, lr}
 800ef16:	690b      	ldr	r3, [r1, #16]
 800ef18:	4605      	mov	r5, r0
 800ef1a:	460c      	mov	r4, r1
 800ef1c:	b1db      	cbz	r3, 800ef56 <_fflush_r+0x42>
 800ef1e:	b118      	cbz	r0, 800ef28 <_fflush_r+0x14>
 800ef20:	6983      	ldr	r3, [r0, #24]
 800ef22:	b90b      	cbnz	r3, 800ef28 <_fflush_r+0x14>
 800ef24:	f7ff faf6 	bl	800e514 <__sinit>
 800ef28:	4b0c      	ldr	r3, [pc, #48]	; (800ef5c <_fflush_r+0x48>)
 800ef2a:	429c      	cmp	r4, r3
 800ef2c:	d109      	bne.n	800ef42 <_fflush_r+0x2e>
 800ef2e:	686c      	ldr	r4, [r5, #4]
 800ef30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef34:	b17b      	cbz	r3, 800ef56 <_fflush_r+0x42>
 800ef36:	4621      	mov	r1, r4
 800ef38:	4628      	mov	r0, r5
 800ef3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef3e:	f7ff bf63 	b.w	800ee08 <__sflush_r>
 800ef42:	4b07      	ldr	r3, [pc, #28]	; (800ef60 <_fflush_r+0x4c>)
 800ef44:	429c      	cmp	r4, r3
 800ef46:	d101      	bne.n	800ef4c <_fflush_r+0x38>
 800ef48:	68ac      	ldr	r4, [r5, #8]
 800ef4a:	e7f1      	b.n	800ef30 <_fflush_r+0x1c>
 800ef4c:	4b05      	ldr	r3, [pc, #20]	; (800ef64 <_fflush_r+0x50>)
 800ef4e:	429c      	cmp	r4, r3
 800ef50:	bf08      	it	eq
 800ef52:	68ec      	ldreq	r4, [r5, #12]
 800ef54:	e7ec      	b.n	800ef30 <_fflush_r+0x1c>
 800ef56:	2000      	movs	r0, #0
 800ef58:	bd38      	pop	{r3, r4, r5, pc}
 800ef5a:	bf00      	nop
 800ef5c:	0800f3c4 	.word	0x0800f3c4
 800ef60:	0800f3e4 	.word	0x0800f3e4
 800ef64:	0800f3a4 	.word	0x0800f3a4

0800ef68 <_lseek_r>:
 800ef68:	b538      	push	{r3, r4, r5, lr}
 800ef6a:	4c07      	ldr	r4, [pc, #28]	; (800ef88 <_lseek_r+0x20>)
 800ef6c:	4605      	mov	r5, r0
 800ef6e:	4608      	mov	r0, r1
 800ef70:	4611      	mov	r1, r2
 800ef72:	2200      	movs	r2, #0
 800ef74:	6022      	str	r2, [r4, #0]
 800ef76:	461a      	mov	r2, r3
 800ef78:	f7fe fea0 	bl	800dcbc <_lseek>
 800ef7c:	1c43      	adds	r3, r0, #1
 800ef7e:	d102      	bne.n	800ef86 <_lseek_r+0x1e>
 800ef80:	6823      	ldr	r3, [r4, #0]
 800ef82:	b103      	cbz	r3, 800ef86 <_lseek_r+0x1e>
 800ef84:	602b      	str	r3, [r5, #0]
 800ef86:	bd38      	pop	{r3, r4, r5, pc}
 800ef88:	200076b8 	.word	0x200076b8

0800ef8c <__swhatbuf_r>:
 800ef8c:	b570      	push	{r4, r5, r6, lr}
 800ef8e:	460e      	mov	r6, r1
 800ef90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef94:	2900      	cmp	r1, #0
 800ef96:	b096      	sub	sp, #88	; 0x58
 800ef98:	4614      	mov	r4, r2
 800ef9a:	461d      	mov	r5, r3
 800ef9c:	da07      	bge.n	800efae <__swhatbuf_r+0x22>
 800ef9e:	2300      	movs	r3, #0
 800efa0:	602b      	str	r3, [r5, #0]
 800efa2:	89b3      	ldrh	r3, [r6, #12]
 800efa4:	061a      	lsls	r2, r3, #24
 800efa6:	d410      	bmi.n	800efca <__swhatbuf_r+0x3e>
 800efa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efac:	e00e      	b.n	800efcc <__swhatbuf_r+0x40>
 800efae:	466a      	mov	r2, sp
 800efb0:	f000 f862 	bl	800f078 <_fstat_r>
 800efb4:	2800      	cmp	r0, #0
 800efb6:	dbf2      	blt.n	800ef9e <__swhatbuf_r+0x12>
 800efb8:	9a01      	ldr	r2, [sp, #4]
 800efba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800efbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800efc2:	425a      	negs	r2, r3
 800efc4:	415a      	adcs	r2, r3
 800efc6:	602a      	str	r2, [r5, #0]
 800efc8:	e7ee      	b.n	800efa8 <__swhatbuf_r+0x1c>
 800efca:	2340      	movs	r3, #64	; 0x40
 800efcc:	2000      	movs	r0, #0
 800efce:	6023      	str	r3, [r4, #0]
 800efd0:	b016      	add	sp, #88	; 0x58
 800efd2:	bd70      	pop	{r4, r5, r6, pc}

0800efd4 <__smakebuf_r>:
 800efd4:	898b      	ldrh	r3, [r1, #12]
 800efd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800efd8:	079d      	lsls	r5, r3, #30
 800efda:	4606      	mov	r6, r0
 800efdc:	460c      	mov	r4, r1
 800efde:	d507      	bpl.n	800eff0 <__smakebuf_r+0x1c>
 800efe0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800efe4:	6023      	str	r3, [r4, #0]
 800efe6:	6123      	str	r3, [r4, #16]
 800efe8:	2301      	movs	r3, #1
 800efea:	6163      	str	r3, [r4, #20]
 800efec:	b002      	add	sp, #8
 800efee:	bd70      	pop	{r4, r5, r6, pc}
 800eff0:	ab01      	add	r3, sp, #4
 800eff2:	466a      	mov	r2, sp
 800eff4:	f7ff ffca 	bl	800ef8c <__swhatbuf_r>
 800eff8:	9900      	ldr	r1, [sp, #0]
 800effa:	4605      	mov	r5, r0
 800effc:	4630      	mov	r0, r6
 800effe:	f7ff f9c7 	bl	800e390 <_malloc_r>
 800f002:	b948      	cbnz	r0, 800f018 <__smakebuf_r+0x44>
 800f004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f008:	059a      	lsls	r2, r3, #22
 800f00a:	d4ef      	bmi.n	800efec <__smakebuf_r+0x18>
 800f00c:	f023 0303 	bic.w	r3, r3, #3
 800f010:	f043 0302 	orr.w	r3, r3, #2
 800f014:	81a3      	strh	r3, [r4, #12]
 800f016:	e7e3      	b.n	800efe0 <__smakebuf_r+0xc>
 800f018:	4b0d      	ldr	r3, [pc, #52]	; (800f050 <__smakebuf_r+0x7c>)
 800f01a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f01c:	89a3      	ldrh	r3, [r4, #12]
 800f01e:	6020      	str	r0, [r4, #0]
 800f020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f024:	81a3      	strh	r3, [r4, #12]
 800f026:	9b00      	ldr	r3, [sp, #0]
 800f028:	6163      	str	r3, [r4, #20]
 800f02a:	9b01      	ldr	r3, [sp, #4]
 800f02c:	6120      	str	r0, [r4, #16]
 800f02e:	b15b      	cbz	r3, 800f048 <__smakebuf_r+0x74>
 800f030:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f034:	4630      	mov	r0, r6
 800f036:	f000 f831 	bl	800f09c <_isatty_r>
 800f03a:	b128      	cbz	r0, 800f048 <__smakebuf_r+0x74>
 800f03c:	89a3      	ldrh	r3, [r4, #12]
 800f03e:	f023 0303 	bic.w	r3, r3, #3
 800f042:	f043 0301 	orr.w	r3, r3, #1
 800f046:	81a3      	strh	r3, [r4, #12]
 800f048:	89a3      	ldrh	r3, [r4, #12]
 800f04a:	431d      	orrs	r5, r3
 800f04c:	81a5      	strh	r5, [r4, #12]
 800f04e:	e7cd      	b.n	800efec <__smakebuf_r+0x18>
 800f050:	0800e4dd 	.word	0x0800e4dd

0800f054 <_read_r>:
 800f054:	b538      	push	{r3, r4, r5, lr}
 800f056:	4c07      	ldr	r4, [pc, #28]	; (800f074 <_read_r+0x20>)
 800f058:	4605      	mov	r5, r0
 800f05a:	4608      	mov	r0, r1
 800f05c:	4611      	mov	r1, r2
 800f05e:	2200      	movs	r2, #0
 800f060:	6022      	str	r2, [r4, #0]
 800f062:	461a      	mov	r2, r3
 800f064:	f7fe fde6 	bl	800dc34 <_read>
 800f068:	1c43      	adds	r3, r0, #1
 800f06a:	d102      	bne.n	800f072 <_read_r+0x1e>
 800f06c:	6823      	ldr	r3, [r4, #0]
 800f06e:	b103      	cbz	r3, 800f072 <_read_r+0x1e>
 800f070:	602b      	str	r3, [r5, #0]
 800f072:	bd38      	pop	{r3, r4, r5, pc}
 800f074:	200076b8 	.word	0x200076b8

0800f078 <_fstat_r>:
 800f078:	b538      	push	{r3, r4, r5, lr}
 800f07a:	4c07      	ldr	r4, [pc, #28]	; (800f098 <_fstat_r+0x20>)
 800f07c:	2300      	movs	r3, #0
 800f07e:	4605      	mov	r5, r0
 800f080:	4608      	mov	r0, r1
 800f082:	4611      	mov	r1, r2
 800f084:	6023      	str	r3, [r4, #0]
 800f086:	f7fe fe12 	bl	800dcae <_fstat>
 800f08a:	1c43      	adds	r3, r0, #1
 800f08c:	d102      	bne.n	800f094 <_fstat_r+0x1c>
 800f08e:	6823      	ldr	r3, [r4, #0]
 800f090:	b103      	cbz	r3, 800f094 <_fstat_r+0x1c>
 800f092:	602b      	str	r3, [r5, #0]
 800f094:	bd38      	pop	{r3, r4, r5, pc}
 800f096:	bf00      	nop
 800f098:	200076b8 	.word	0x200076b8

0800f09c <_isatty_r>:
 800f09c:	b538      	push	{r3, r4, r5, lr}
 800f09e:	4c06      	ldr	r4, [pc, #24]	; (800f0b8 <_isatty_r+0x1c>)
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	4605      	mov	r5, r0
 800f0a4:	4608      	mov	r0, r1
 800f0a6:	6023      	str	r3, [r4, #0]
 800f0a8:	f7fe fe06 	bl	800dcb8 <_isatty>
 800f0ac:	1c43      	adds	r3, r0, #1
 800f0ae:	d102      	bne.n	800f0b6 <_isatty_r+0x1a>
 800f0b0:	6823      	ldr	r3, [r4, #0]
 800f0b2:	b103      	cbz	r3, 800f0b6 <_isatty_r+0x1a>
 800f0b4:	602b      	str	r3, [r5, #0]
 800f0b6:	bd38      	pop	{r3, r4, r5, pc}
 800f0b8:	200076b8 	.word	0x200076b8

0800f0bc <_init>:
 800f0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0be:	bf00      	nop
 800f0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0c2:	bc08      	pop	{r3}
 800f0c4:	469e      	mov	lr, r3
 800f0c6:	4770      	bx	lr

0800f0c8 <_fini>:
 800f0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ca:	bf00      	nop
 800f0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0ce:	bc08      	pop	{r3}
 800f0d0:	469e      	mov	lr, r3
 800f0d2:	4770      	bx	lr
